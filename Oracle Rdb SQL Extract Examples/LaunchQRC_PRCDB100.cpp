/*H**********************************************************************
* FILENAME :        Launcher_PRCDB100.cpp            DESIGN REF: 
*
* DESCRIPTION :
*       This class configures a container to interact with the QThreadPool
*       data replications. This class is the main class to access core 
*       functions for the replication process. 
*
*        Rdb schema.
*
*    THIS FILE IS AN AUTO-GENERATED INCLUDE FILE
*
* PUBLIC FUNCTIONS :
*       None
*      
* NOTES :
*   
*
*       Copyright (c) Timothy Peer, eNVy Systems, Inc. 2015 -2018.  All rights reserved.
* 
* AUTHOR :    Timothy Peer        START DATE :    10 Nov 2018
*
* CHANGES :
*
* REF NO  VERSION DATE    WHO     DETAIL
*
*H*/

#pragma region hashMap PRCDB100
#include "LaunchQRC_PRCDB100.h"
#include <QLoggingCategory>
#include "connectionstringbuilder.h"
#include "clsrowstodeletecleanup.h" 
#include "tableEnumerations_PRCDB100.h"
#pragma region table includes
#include "ClassLibQ_PRCDB100.h"
#include "vcnvtransfers.h" 
#include "checksumtables.h" 

#pragma endregion table includes
launchQRC_PRCDB100::launchQRC_PRCDB100(QObject * parent) : QObject(parent) {
	 workerPool = new QThreadPool(this);
}

launchQRC_PRCDB100::~launchQRC_PRCDB100() {
	m_HashedMap_PRCDB100.clear();
}

void launchQRC_PRCDB100::initialize(const QString _profileName, const QString _tableName, const QString _sourceDSN, const QString _targetDSN, DropOption dropOption, ReplicationOption replicationOption)
{
	tables.clear();
	tableName = _tableName;
	targetDSN = _targetDSN;
	sourceDSN = _sourceDSN;
	profileName = _profileName;
// 	QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder());
	// 	envyRepositoryString = builder->getEnvyConnectionString();
	setDropOption(dropOption);
	setReplicationOption(replicationOption);
# pragma region HashedMap_PRCDB100
	schemaField * PC_IDESREC_Field = new schemaField(this);
	schemaField * PC_FRMINGSET_Field = new schemaField(this);
	schemaField * PC_IXREC_Field = new schemaField(this);
	schemaField * PC_ENDREC_Field = new schemaField(this);
	schemaField * PC_MBOMINGSET_Field = new schemaField(this);
	schemaField * PC_WKCMPISET_Field = new schemaField(this);
	schemaField * PC_TEXDREC_Field = new schemaField(this);
	schemaField * PC_FCODESREC_Field = new schemaField(this);
	schemaField * PC_PRTENDSET_Field = new schemaField(this);
	schemaField * PC_FCOHHSHSET_Field = new schemaField(this);
	schemaField * PC_MPIREC_Field = new schemaField(this);
	schemaField * PC_FRMPVHSHSET_Field = new schemaField(this);
	schemaField * PC_WKCPISET_Field = new schemaField(this);
	schemaField * PC_WOHWODSET_Field = new schemaField(this);
	schemaField * PC_USRFRMPVSET_Field = new schemaField(this);
	schemaField * PC_FCOHFCODESSET_Field = new schemaField(this);
	schemaField * PC_PIPISAFSET_Field = new schemaField(this);
	schemaField * PC_INGIDESSET_Field = new schemaField(this);
	schemaField * PC_ALTHADTSET_Field = new schemaField(this);
	schemaField * PC_TRKNOHSHSET_Field = new schemaField(this);
	schemaField * PC_APIHAPITSET_Field = new schemaField(this);
	schemaField * PC_PRTWODSET_Field = new schemaField(this);
	schemaField * PC_CHGHHSHSET_Field = new schemaField(this);
	schemaField * PC_APIHHSHSET_Field = new schemaField(this);
	schemaField * PC_USRREC_Field = new schemaField(this);
	schemaField * PC_MPISAFREC_Field = new schemaField(this);
	schemaField * PC_FRMFCODSET_Field = new schemaField(this);
	schemaField * PC_APITREC_Field = new schemaField(this);
	schemaField * PC_PRTMINGSET_Field = new schemaField(this);
	schemaField * PC_WODREC_Field = new schemaField(this);
	schemaField * PC_TEXTHSHSET_Field = new schemaField(this);
	schemaField * PC_PRTFRMSET_Field = new schemaField(this);
	schemaField * PC_MPITWUSET_Field = new schemaField(this);
	schemaField * PC_INGSTEPSET_Field = new schemaField(this);
	schemaField * PC_MBOWOHSET_Field = new schemaField(this);
	schemaField * PC_ADFREC_Field = new schemaField(this);
	schemaField * PC_TRKNOREC_Field = new schemaField(this);
	schemaField * PC_CHGHREC_Field = new schemaField(this);
	schemaField * PC_ADTDESREC_Field = new schemaField(this);
	schemaField * PC_MENDMCSTSET_Field = new schemaField(this);
	schemaField * PC_WKCHSHSET_Field = new schemaField(this);
	schemaField * PC_CATREC_Field = new schemaField(this);
	schemaField * PC_FCODREC_Field = new schemaField(this);
	schemaField * PC_MINGREC_Field = new schemaField(this);
	schemaField * PC_FRMHDESSET_Field = new schemaField(this);
	schemaField * PC_CATFRMPVSET_Field = new schemaField(this);
	schemaField * PC_CHGHCHGDSET_Field = new schemaField(this);
	schemaField * PC_FRMENDSET_Field = new schemaField(this);
	schemaField * PC_WOHHSHSET_Field = new schemaField(this);
	schemaField * PC_PISAFREC_Field = new schemaField(this);
	schemaField * PC_FCOHFCODSET_Field = new schemaField(this);
	schemaField * PC_FRMREC_Field = new schemaField(this);
	schemaField * PC_WKCAPITSET_Field = new schemaField(this);
	schemaField * PC_MBOREC_Field = new schemaField(this);
	schemaField * PC_MBOMENDSET_Field = new schemaField(this);
	schemaField * PC_PRTFCODSET_Field = new schemaField(this);
	schemaField * PC_TRKNOTREC_Field = new schemaField(this);
	schemaField * PC_TRKTRKNOTSET_Field = new schemaField(this);
	schemaField * PC_ALTHREC_Field = new schemaField(this);
	schemaField * PC_STEPREC_Field = new schemaField(this);
	schemaField * PC_MBOMBODESSET_Field = new schemaField(this);
	schemaField * PC_SUBPREC_Field = new schemaField(this);
	schemaField * PC_FRMHSHSET_Field = new schemaField(this);
	schemaField * PC_WKCREC_Field = new schemaField(this);
	schemaField * PC_TOOREC_Field = new schemaField(this);
	schemaField * PC_PIDESREC_Field = new schemaField(this);
	schemaField * PC_SLFREC_Field = new schemaField(this);
	schemaField * PC_MINGMIDESSET_Field = new schemaField(this);
	schemaField * PC_USRHSHSET_Field = new schemaField(this);
	schemaField * PC_PRTSLFSET_Field = new schemaField(this);
	schemaField * PC_MBOHSHSET_Field = new schemaField(this);
	schemaField * PC_CHGDREC_Field = new schemaField(this);
	schemaField * PC_INGSIFSET_Field = new schemaField(this);
	schemaField * PC_HDESREC_Field = new schemaField(this);
	schemaField * PC_APITAPIDESSET_Field = new schemaField(this);
	schemaField * PC_ALTHHSHSET_Field = new schemaField(this);
	schemaField * PC_CATHSHSET_Field = new schemaField(this);
	schemaField * PC_TWUREC_Field = new schemaField(this);
	schemaField * PC_FCOHREC_Field = new schemaField(this);
	schemaField * PC_TEXTREC_Field = new schemaField(this);
	schemaField * PC_APIHAPIFSET_Field = new schemaField(this);
	schemaField * PC_APISAFREC_Field = new schemaField(this);
	schemaField * PC_SLTREC_Field = new schemaField(this);
	schemaField * PC_CATIXSET_Field = new schemaField(this);
	schemaField * PC_TRKREC_Field = new schemaField(this);
	schemaField * PC_TEXTTEXDSET_Field = new schemaField(this);
	schemaField * PC_PRTHSHSET_Field = new schemaField(this);
	schemaField * PC_PRTMBOSET_Field = new schemaField(this);
	schemaField * PC_ADTADTDESSET_Field = new schemaField(this);
	schemaField * PC_MCSTREC_Field = new schemaField(this);
	schemaField * PC_TOOTWUSET_Field = new schemaField(this);
	schemaField * PC_ADTREC_Field = new schemaField(this);
	schemaField * PC_APITAPISAFSET_Field = new schemaField(this);
	schemaField * PC_ALTHADFSET_Field = new schemaField(this);
	schemaField * PC_MPIDESREC_Field = new schemaField(this);
	schemaField * PC_APIDESREC_Field = new schemaField(this);
	schemaField * PC_MBOMPISET_Field = new schemaField(this);
	schemaField * PC_PRTMENDSET_Field = new schemaField(this);
	schemaField * PC_APIHREC_Field = new schemaField(this);
	schemaField * PC_APIFREC_Field = new schemaField(this);
	schemaField * PC_PRTSLTSET_Field = new schemaField(this);
	schemaField * PC_SIFREC_Field = new schemaField(this);
	schemaField * PC_MBODESREC_Field = new schemaField(this);
	schemaField * PC_MPIMPISAFSET_Field = new schemaField(this);
	schemaField * PC_WOHREC_Field = new schemaField(this);
	schemaField * PC_TRKNOTRKSET_Field = new schemaField(this);
	schemaField * PC_APITTWUSET_Field = new schemaField(this);
	schemaField * PC_CATFRMSET_Field = new schemaField(this);
	schemaField * PC_PRTINGSET_Field = new schemaField(this);
	schemaField * PC_PITWUSET_Field = new schemaField(this);
	schemaField * PC_PRTREC_Field = new schemaField(this);
	schemaField * PC_PIREC_Field = new schemaField(this);
	schemaField * PC_MPIMPIDESSET_Field = new schemaField(this);
	schemaField * PC_ADTASTPSET_Field = new schemaField(this);
	schemaField * PC_FRMPISET_Field = new schemaField(this);
	schemaField * PC_IXHSHSET_Field = new schemaField(this);
	schemaField * PC_FRMPVREC_Field = new schemaField(this);
	schemaField * PC_PISUBPSET_Field = new schemaField(this);
	schemaField * PC_MIDESREC_Field = new schemaField(this);
	schemaField * PC_PIPIDESSET_Field = new schemaField(this);
	schemaField * PC_ASTPREC_Field = new schemaField(this);
	schemaField * PC_MENDREC_Field = new schemaField(this);
	schemaField * PC_TOOHSHSET_Field = new schemaField(this);
	schemaField * PC_INGREC_Field = new schemaField(this);
	PC_IDESREC_Field->setSchemaField("PC_IDESREC",enumPC_IDESREC);
	PC_FRMINGSET_Field->setSchemaField("PC_FRMINGSET",enumPC_FRMINGSET);
	PC_IXREC_Field->setSchemaField("PC_IXREC",enumPC_IXREC);
	PC_ENDREC_Field->setSchemaField("PC_ENDREC",enumPC_ENDREC);
	PC_MBOMINGSET_Field->setSchemaField("PC_MBOMINGSET",enumPC_MBOMINGSET);
	PC_WKCMPISET_Field->setSchemaField("PC_WKCMPISET",enumPC_WKCMPISET);
	PC_TEXDREC_Field->setSchemaField("PC_TEXDREC",enumPC_TEXDREC);
	PC_FCODESREC_Field->setSchemaField("PC_FCODESREC",enumPC_FCODESREC);
	PC_PRTENDSET_Field->setSchemaField("PC_PRTENDSET",enumPC_PRTENDSET);
	PC_FCOHHSHSET_Field->setSchemaField("PC_FCOHHSHSET",enumPC_FCOHHSHSET);
	PC_MPIREC_Field->setSchemaField("PC_MPIREC",enumPC_MPIREC);
	PC_FRMPVHSHSET_Field->setSchemaField("PC_FRMPVHSHSET",enumPC_FRMPVHSHSET);
	PC_WKCPISET_Field->setSchemaField("PC_WKCPISET",enumPC_WKCPISET);
	PC_WOHWODSET_Field->setSchemaField("PC_WOHWODSET",enumPC_WOHWODSET);
	PC_USRFRMPVSET_Field->setSchemaField("PC_USRFRMPVSET",enumPC_USRFRMPVSET);
	PC_FCOHFCODESSET_Field->setSchemaField("PC_FCOHFCODESSET",enumPC_FCOHFCODESSET);
	PC_PIPISAFSET_Field->setSchemaField("PC_PIPISAFSET",enumPC_PIPISAFSET);
	PC_INGIDESSET_Field->setSchemaField("PC_INGIDESSET",enumPC_INGIDESSET);
	PC_ALTHADTSET_Field->setSchemaField("PC_ALTHADTSET",enumPC_ALTHADTSET);
	PC_TRKNOHSHSET_Field->setSchemaField("PC_TRKNOHSHSET",enumPC_TRKNOHSHSET);
	PC_APIHAPITSET_Field->setSchemaField("PC_APIHAPITSET",enumPC_APIHAPITSET);
	PC_PRTWODSET_Field->setSchemaField("PC_PRTWODSET",enumPC_PRTWODSET);
	PC_CHGHHSHSET_Field->setSchemaField("PC_CHGHHSHSET",enumPC_CHGHHSHSET);
	PC_APIHHSHSET_Field->setSchemaField("PC_APIHHSHSET",enumPC_APIHHSHSET);
	PC_USRREC_Field->setSchemaField("PC_USRREC",enumPC_USRREC);
	PC_MPISAFREC_Field->setSchemaField("PC_MPISAFREC",enumPC_MPISAFREC);
	PC_FRMFCODSET_Field->setSchemaField("PC_FRMFCODSET",enumPC_FRMFCODSET);
	PC_APITREC_Field->setSchemaField("PC_APITREC",enumPC_APITREC);
	PC_PRTMINGSET_Field->setSchemaField("PC_PRTMINGSET",enumPC_PRTMINGSET);
	PC_WODREC_Field->setSchemaField("PC_WODREC",enumPC_WODREC);
	PC_TEXTHSHSET_Field->setSchemaField("PC_TEXTHSHSET",enumPC_TEXTHSHSET);
	PC_PRTFRMSET_Field->setSchemaField("PC_PRTFRMSET",enumPC_PRTFRMSET);
	PC_MPITWUSET_Field->setSchemaField("PC_MPITWUSET",enumPC_MPITWUSET);
	PC_INGSTEPSET_Field->setSchemaField("PC_INGSTEPSET",enumPC_INGSTEPSET);
	PC_MBOWOHSET_Field->setSchemaField("PC_MBOWOHSET",enumPC_MBOWOHSET);
	PC_ADFREC_Field->setSchemaField("PC_ADFREC",enumPC_ADFREC);
	PC_TRKNOREC_Field->setSchemaField("PC_TRKNOREC",enumPC_TRKNOREC);
	PC_CHGHREC_Field->setSchemaField("PC_CHGHREC",enumPC_CHGHREC);
	PC_ADTDESREC_Field->setSchemaField("PC_ADTDESREC",enumPC_ADTDESREC);
	PC_MENDMCSTSET_Field->setSchemaField("PC_MENDMCSTSET",enumPC_MENDMCSTSET);
	PC_WKCHSHSET_Field->setSchemaField("PC_WKCHSHSET",enumPC_WKCHSHSET);
	PC_CATREC_Field->setSchemaField("PC_CATREC",enumPC_CATREC);
	PC_FCODREC_Field->setSchemaField("PC_FCODREC",enumPC_FCODREC);
	PC_MINGREC_Field->setSchemaField("PC_MINGREC",enumPC_MINGREC);
	PC_FRMHDESSET_Field->setSchemaField("PC_FRMHDESSET",enumPC_FRMHDESSET);
	PC_CATFRMPVSET_Field->setSchemaField("PC_CATFRMPVSET",enumPC_CATFRMPVSET);
	PC_CHGHCHGDSET_Field->setSchemaField("PC_CHGHCHGDSET",enumPC_CHGHCHGDSET);
	PC_FRMENDSET_Field->setSchemaField("PC_FRMENDSET",enumPC_FRMENDSET);
	PC_WOHHSHSET_Field->setSchemaField("PC_WOHHSHSET",enumPC_WOHHSHSET);
	PC_PISAFREC_Field->setSchemaField("PC_PISAFREC",enumPC_PISAFREC);
	PC_FCOHFCODSET_Field->setSchemaField("PC_FCOHFCODSET",enumPC_FCOHFCODSET);
	PC_FRMREC_Field->setSchemaField("PC_FRMREC",enumPC_FRMREC);
	PC_WKCAPITSET_Field->setSchemaField("PC_WKCAPITSET",enumPC_WKCAPITSET);
	PC_MBOREC_Field->setSchemaField("PC_MBOREC",enumPC_MBOREC);
	PC_MBOMENDSET_Field->setSchemaField("PC_MBOMENDSET",enumPC_MBOMENDSET);
	PC_PRTFCODSET_Field->setSchemaField("PC_PRTFCODSET",enumPC_PRTFCODSET);
	PC_TRKNOTREC_Field->setSchemaField("PC_TRKNOTREC",enumPC_TRKNOTREC);
	PC_TRKTRKNOTSET_Field->setSchemaField("PC_TRKTRKNOTSET",enumPC_TRKTRKNOTSET);
	PC_ALTHREC_Field->setSchemaField("PC_ALTHREC",enumPC_ALTHREC);
	PC_STEPREC_Field->setSchemaField("PC_STEPREC",enumPC_STEPREC);
	PC_MBOMBODESSET_Field->setSchemaField("PC_MBOMBODESSET",enumPC_MBOMBODESSET);
	PC_SUBPREC_Field->setSchemaField("PC_SUBPREC",enumPC_SUBPREC);
	PC_FRMHSHSET_Field->setSchemaField("PC_FRMHSHSET",enumPC_FRMHSHSET);
	PC_WKCREC_Field->setSchemaField("PC_WKCREC",enumPC_WKCREC);
	PC_TOOREC_Field->setSchemaField("PC_TOOREC",enumPC_TOOREC);
	PC_PIDESREC_Field->setSchemaField("PC_PIDESREC",enumPC_PIDESREC);
	PC_SLFREC_Field->setSchemaField("PC_SLFREC",enumPC_SLFREC);
	PC_MINGMIDESSET_Field->setSchemaField("PC_MINGMIDESSET",enumPC_MINGMIDESSET);
	PC_USRHSHSET_Field->setSchemaField("PC_USRHSHSET",enumPC_USRHSHSET);
	PC_PRTSLFSET_Field->setSchemaField("PC_PRTSLFSET",enumPC_PRTSLFSET);
	PC_MBOHSHSET_Field->setSchemaField("PC_MBOHSHSET",enumPC_MBOHSHSET);
	PC_CHGDREC_Field->setSchemaField("PC_CHGDREC",enumPC_CHGDREC);
	PC_INGSIFSET_Field->setSchemaField("PC_INGSIFSET",enumPC_INGSIFSET);
	PC_HDESREC_Field->setSchemaField("PC_HDESREC",enumPC_HDESREC);
	PC_APITAPIDESSET_Field->setSchemaField("PC_APITAPIDESSET",enumPC_APITAPIDESSET);
	PC_ALTHHSHSET_Field->setSchemaField("PC_ALTHHSHSET",enumPC_ALTHHSHSET);
	PC_CATHSHSET_Field->setSchemaField("PC_CATHSHSET",enumPC_CATHSHSET);
	PC_TWUREC_Field->setSchemaField("PC_TWUREC",enumPC_TWUREC);
	PC_FCOHREC_Field->setSchemaField("PC_FCOHREC",enumPC_FCOHREC);
	PC_TEXTREC_Field->setSchemaField("PC_TEXTREC",enumPC_TEXTREC);
	PC_APIHAPIFSET_Field->setSchemaField("PC_APIHAPIFSET",enumPC_APIHAPIFSET);
	PC_APISAFREC_Field->setSchemaField("PC_APISAFREC",enumPC_APISAFREC);
	PC_SLTREC_Field->setSchemaField("PC_SLTREC",enumPC_SLTREC);
	PC_CATIXSET_Field->setSchemaField("PC_CATIXSET",enumPC_CATIXSET);
	PC_TRKREC_Field->setSchemaField("PC_TRKREC",enumPC_TRKREC);
	PC_TEXTTEXDSET_Field->setSchemaField("PC_TEXTTEXDSET",enumPC_TEXTTEXDSET);
	PC_PRTHSHSET_Field->setSchemaField("PC_PRTHSHSET",enumPC_PRTHSHSET);
	PC_PRTMBOSET_Field->setSchemaField("PC_PRTMBOSET",enumPC_PRTMBOSET);
	PC_ADTADTDESSET_Field->setSchemaField("PC_ADTADTDESSET",enumPC_ADTADTDESSET);
	PC_MCSTREC_Field->setSchemaField("PC_MCSTREC",enumPC_MCSTREC);
	PC_TOOTWUSET_Field->setSchemaField("PC_TOOTWUSET",enumPC_TOOTWUSET);
	PC_ADTREC_Field->setSchemaField("PC_ADTREC",enumPC_ADTREC);
	PC_APITAPISAFSET_Field->setSchemaField("PC_APITAPISAFSET",enumPC_APITAPISAFSET);
	PC_ALTHADFSET_Field->setSchemaField("PC_ALTHADFSET",enumPC_ALTHADFSET);
	PC_MPIDESREC_Field->setSchemaField("PC_MPIDESREC",enumPC_MPIDESREC);
	PC_APIDESREC_Field->setSchemaField("PC_APIDESREC",enumPC_APIDESREC);
	PC_MBOMPISET_Field->setSchemaField("PC_MBOMPISET",enumPC_MBOMPISET);
	PC_PRTMENDSET_Field->setSchemaField("PC_PRTMENDSET",enumPC_PRTMENDSET);
	PC_APIHREC_Field->setSchemaField("PC_APIHREC",enumPC_APIHREC);
	PC_APIFREC_Field->setSchemaField("PC_APIFREC",enumPC_APIFREC);
	PC_PRTSLTSET_Field->setSchemaField("PC_PRTSLTSET",enumPC_PRTSLTSET);
	PC_SIFREC_Field->setSchemaField("PC_SIFREC",enumPC_SIFREC);
	PC_MBODESREC_Field->setSchemaField("PC_MBODESREC",enumPC_MBODESREC);
	PC_MPIMPISAFSET_Field->setSchemaField("PC_MPIMPISAFSET",enumPC_MPIMPISAFSET);
	PC_WOHREC_Field->setSchemaField("PC_WOHREC",enumPC_WOHREC);
	PC_TRKNOTRKSET_Field->setSchemaField("PC_TRKNOTRKSET",enumPC_TRKNOTRKSET);
	PC_APITTWUSET_Field->setSchemaField("PC_APITTWUSET",enumPC_APITTWUSET);
	PC_CATFRMSET_Field->setSchemaField("PC_CATFRMSET",enumPC_CATFRMSET);
	PC_PRTINGSET_Field->setSchemaField("PC_PRTINGSET",enumPC_PRTINGSET);
	PC_PITWUSET_Field->setSchemaField("PC_PITWUSET",enumPC_PITWUSET);
	PC_PRTREC_Field->setSchemaField("PC_PRTREC",enumPC_PRTREC);
	PC_PIREC_Field->setSchemaField("PC_PIREC",enumPC_PIREC);
	PC_MPIMPIDESSET_Field->setSchemaField("PC_MPIMPIDESSET",enumPC_MPIMPIDESSET);
	PC_ADTASTPSET_Field->setSchemaField("PC_ADTASTPSET",enumPC_ADTASTPSET);
	PC_FRMPISET_Field->setSchemaField("PC_FRMPISET",enumPC_FRMPISET);
	PC_IXHSHSET_Field->setSchemaField("PC_IXHSHSET",enumPC_IXHSHSET);
	PC_FRMPVREC_Field->setSchemaField("PC_FRMPVREC",enumPC_FRMPVREC);
	PC_PISUBPSET_Field->setSchemaField("PC_PISUBPSET",enumPC_PISUBPSET);
	PC_MIDESREC_Field->setSchemaField("PC_MIDESREC",enumPC_MIDESREC);
	PC_PIPIDESSET_Field->setSchemaField("PC_PIPIDESSET",enumPC_PIPIDESSET);
	PC_ASTPREC_Field->setSchemaField("PC_ASTPREC",enumPC_ASTPREC);
	PC_MENDREC_Field->setSchemaField("PC_MENDREC",enumPC_MENDREC);
	PC_TOOHSHSET_Field->setSchemaField("PC_TOOHSHSET",enumPC_TOOHSHSET);
	PC_INGREC_Field->setSchemaField("PC_INGREC",enumPC_INGREC);
	m_HashedMap_PRCDB100.insert("PC_IDESREC", PC_IDESREC_Field);
	m_HashedMap_PRCDB100.insert("PC_FRMINGSET", PC_FRMINGSET_Field);
	m_HashedMap_PRCDB100.insert("PC_IXREC", PC_IXREC_Field);
	m_HashedMap_PRCDB100.insert("PC_ENDREC", PC_ENDREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MBOMINGSET", PC_MBOMINGSET_Field);
	m_HashedMap_PRCDB100.insert("PC_WKCMPISET", PC_WKCMPISET_Field);
	m_HashedMap_PRCDB100.insert("PC_TEXDREC", PC_TEXDREC_Field);
	m_HashedMap_PRCDB100.insert("PC_FCODESREC", PC_FCODESREC_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTENDSET", PC_PRTENDSET_Field);
	m_HashedMap_PRCDB100.insert("PC_FCOHHSHSET", PC_FCOHHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_MPIREC", PC_MPIREC_Field);
	m_HashedMap_PRCDB100.insert("PC_FRMPVHSHSET", PC_FRMPVHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_WKCPISET", PC_WKCPISET_Field);
	m_HashedMap_PRCDB100.insert("PC_WOHWODSET", PC_WOHWODSET_Field);
	m_HashedMap_PRCDB100.insert("PC_USRFRMPVSET", PC_USRFRMPVSET_Field);
	m_HashedMap_PRCDB100.insert("PC_FCOHFCODESSET", PC_FCOHFCODESSET_Field);
	m_HashedMap_PRCDB100.insert("PC_PIPISAFSET", PC_PIPISAFSET_Field);
	m_HashedMap_PRCDB100.insert("PC_INGIDESSET", PC_INGIDESSET_Field);
	m_HashedMap_PRCDB100.insert("PC_ALTHADTSET", PC_ALTHADTSET_Field);
	m_HashedMap_PRCDB100.insert("PC_TRKNOHSHSET", PC_TRKNOHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_APIHAPITSET", PC_APIHAPITSET_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTWODSET", PC_PRTWODSET_Field);
	m_HashedMap_PRCDB100.insert("PC_CHGHHSHSET", PC_CHGHHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_APIHHSHSET", PC_APIHHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_USRREC", PC_USRREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MPISAFREC", PC_MPISAFREC_Field);
	m_HashedMap_PRCDB100.insert("PC_FRMFCODSET", PC_FRMFCODSET_Field);
	m_HashedMap_PRCDB100.insert("PC_APITREC", PC_APITREC_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTMINGSET", PC_PRTMINGSET_Field);
	m_HashedMap_PRCDB100.insert("PC_WODREC", PC_WODREC_Field);
	m_HashedMap_PRCDB100.insert("PC_TEXTHSHSET", PC_TEXTHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTFRMSET", PC_PRTFRMSET_Field);
	m_HashedMap_PRCDB100.insert("PC_MPITWUSET", PC_MPITWUSET_Field);
	m_HashedMap_PRCDB100.insert("PC_INGSTEPSET", PC_INGSTEPSET_Field);
	m_HashedMap_PRCDB100.insert("PC_MBOWOHSET", PC_MBOWOHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_ADFREC", PC_ADFREC_Field);
	m_HashedMap_PRCDB100.insert("PC_TRKNOREC", PC_TRKNOREC_Field);
	m_HashedMap_PRCDB100.insert("PC_CHGHREC", PC_CHGHREC_Field);
	m_HashedMap_PRCDB100.insert("PC_ADTDESREC", PC_ADTDESREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MENDMCSTSET", PC_MENDMCSTSET_Field);
	m_HashedMap_PRCDB100.insert("PC_WKCHSHSET", PC_WKCHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_CATREC", PC_CATREC_Field);
	m_HashedMap_PRCDB100.insert("PC_FCODREC", PC_FCODREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MINGREC", PC_MINGREC_Field);
	m_HashedMap_PRCDB100.insert("PC_FRMHDESSET", PC_FRMHDESSET_Field);
	m_HashedMap_PRCDB100.insert("PC_CATFRMPVSET", PC_CATFRMPVSET_Field);
	m_HashedMap_PRCDB100.insert("PC_CHGHCHGDSET", PC_CHGHCHGDSET_Field);
	m_HashedMap_PRCDB100.insert("PC_FRMENDSET", PC_FRMENDSET_Field);
	m_HashedMap_PRCDB100.insert("PC_WOHHSHSET", PC_WOHHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_PISAFREC", PC_PISAFREC_Field);
	m_HashedMap_PRCDB100.insert("PC_FCOHFCODSET", PC_FCOHFCODSET_Field);
	m_HashedMap_PRCDB100.insert("PC_FRMREC", PC_FRMREC_Field);
	m_HashedMap_PRCDB100.insert("PC_WKCAPITSET", PC_WKCAPITSET_Field);
	m_HashedMap_PRCDB100.insert("PC_MBOREC", PC_MBOREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MBOMENDSET", PC_MBOMENDSET_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTFCODSET", PC_PRTFCODSET_Field);
	m_HashedMap_PRCDB100.insert("PC_TRKNOTREC", PC_TRKNOTREC_Field);
	m_HashedMap_PRCDB100.insert("PC_TRKTRKNOTSET", PC_TRKTRKNOTSET_Field);
	m_HashedMap_PRCDB100.insert("PC_ALTHREC", PC_ALTHREC_Field);
	m_HashedMap_PRCDB100.insert("PC_STEPREC", PC_STEPREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MBOMBODESSET", PC_MBOMBODESSET_Field);
	m_HashedMap_PRCDB100.insert("PC_SUBPREC", PC_SUBPREC_Field);
	m_HashedMap_PRCDB100.insert("PC_FRMHSHSET", PC_FRMHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_WKCREC", PC_WKCREC_Field);
	m_HashedMap_PRCDB100.insert("PC_TOOREC", PC_TOOREC_Field);
	m_HashedMap_PRCDB100.insert("PC_PIDESREC", PC_PIDESREC_Field);
	m_HashedMap_PRCDB100.insert("PC_SLFREC", PC_SLFREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MINGMIDESSET", PC_MINGMIDESSET_Field);
	m_HashedMap_PRCDB100.insert("PC_USRHSHSET", PC_USRHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTSLFSET", PC_PRTSLFSET_Field);
	m_HashedMap_PRCDB100.insert("PC_MBOHSHSET", PC_MBOHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_CHGDREC", PC_CHGDREC_Field);
	m_HashedMap_PRCDB100.insert("PC_INGSIFSET", PC_INGSIFSET_Field);
	m_HashedMap_PRCDB100.insert("PC_HDESREC", PC_HDESREC_Field);
	m_HashedMap_PRCDB100.insert("PC_APITAPIDESSET", PC_APITAPIDESSET_Field);
	m_HashedMap_PRCDB100.insert("PC_ALTHHSHSET", PC_ALTHHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_CATHSHSET", PC_CATHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_TWUREC", PC_TWUREC_Field);
	m_HashedMap_PRCDB100.insert("PC_FCOHREC", PC_FCOHREC_Field);
	m_HashedMap_PRCDB100.insert("PC_TEXTREC", PC_TEXTREC_Field);
	m_HashedMap_PRCDB100.insert("PC_APIHAPIFSET", PC_APIHAPIFSET_Field);
	m_HashedMap_PRCDB100.insert("PC_APISAFREC", PC_APISAFREC_Field);
	m_HashedMap_PRCDB100.insert("PC_SLTREC", PC_SLTREC_Field);
	m_HashedMap_PRCDB100.insert("PC_CATIXSET", PC_CATIXSET_Field);
	m_HashedMap_PRCDB100.insert("PC_TRKREC", PC_TRKREC_Field);
	m_HashedMap_PRCDB100.insert("PC_TEXTTEXDSET", PC_TEXTTEXDSET_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTHSHSET", PC_PRTHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTMBOSET", PC_PRTMBOSET_Field);
	m_HashedMap_PRCDB100.insert("PC_ADTADTDESSET", PC_ADTADTDESSET_Field);
	m_HashedMap_PRCDB100.insert("PC_MCSTREC", PC_MCSTREC_Field);
	m_HashedMap_PRCDB100.insert("PC_TOOTWUSET", PC_TOOTWUSET_Field);
	m_HashedMap_PRCDB100.insert("PC_ADTREC", PC_ADTREC_Field);
	m_HashedMap_PRCDB100.insert("PC_APITAPISAFSET", PC_APITAPISAFSET_Field);
	m_HashedMap_PRCDB100.insert("PC_ALTHADFSET", PC_ALTHADFSET_Field);
	m_HashedMap_PRCDB100.insert("PC_MPIDESREC", PC_MPIDESREC_Field);
	m_HashedMap_PRCDB100.insert("PC_APIDESREC", PC_APIDESREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MBOMPISET", PC_MBOMPISET_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTMENDSET", PC_PRTMENDSET_Field);
	m_HashedMap_PRCDB100.insert("PC_APIHREC", PC_APIHREC_Field);
	m_HashedMap_PRCDB100.insert("PC_APIFREC", PC_APIFREC_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTSLTSET", PC_PRTSLTSET_Field);
	m_HashedMap_PRCDB100.insert("PC_SIFREC", PC_SIFREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MBODESREC", PC_MBODESREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MPIMPISAFSET", PC_MPIMPISAFSET_Field);
	m_HashedMap_PRCDB100.insert("PC_WOHREC", PC_WOHREC_Field);
	m_HashedMap_PRCDB100.insert("PC_TRKNOTRKSET", PC_TRKNOTRKSET_Field);
	m_HashedMap_PRCDB100.insert("PC_APITTWUSET", PC_APITTWUSET_Field);
	m_HashedMap_PRCDB100.insert("PC_CATFRMSET", PC_CATFRMSET_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTINGSET", PC_PRTINGSET_Field);
	m_HashedMap_PRCDB100.insert("PC_PITWUSET", PC_PITWUSET_Field);
	m_HashedMap_PRCDB100.insert("PC_PRTREC", PC_PRTREC_Field);
	m_HashedMap_PRCDB100.insert("PC_PIREC", PC_PIREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MPIMPIDESSET", PC_MPIMPIDESSET_Field);
	m_HashedMap_PRCDB100.insert("PC_ADTASTPSET", PC_ADTASTPSET_Field);
	m_HashedMap_PRCDB100.insert("PC_FRMPISET", PC_FRMPISET_Field);
	m_HashedMap_PRCDB100.insert("PC_IXHSHSET", PC_IXHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_FRMPVREC", PC_FRMPVREC_Field);
	m_HashedMap_PRCDB100.insert("PC_PISUBPSET", PC_PISUBPSET_Field);
	m_HashedMap_PRCDB100.insert("PC_MIDESREC", PC_MIDESREC_Field);
	m_HashedMap_PRCDB100.insert("PC_PIPIDESSET", PC_PIPIDESSET_Field);
	m_HashedMap_PRCDB100.insert("PC_ASTPREC", PC_ASTPREC_Field);
	m_HashedMap_PRCDB100.insert("PC_MENDREC", PC_MENDREC_Field);
	m_HashedMap_PRCDB100.insert("PC_TOOHSHSET", PC_TOOHSHSET_Field);
	m_HashedMap_PRCDB100.insert("PC_INGREC", PC_INGREC_Field);
#pragma endregion hashMap PRCDB100

}

void launchQRC_PRCDB100::process()
{

		connectionStringBuilder builder;
		QString envyRepositoryString = builder.getEnvyConnectionString();
		QString odbcAttributes = builder.getOdbcAttributes();
	int ffx;
	QHash<QString, schemaField*>::const_iterator i = m_HashedMap_PRCDB100.find(tableName);
	while (i != m_HashedMap_PRCDB100.end() && i.key() == tableName) {
		schemaField * fld = i.value();
		ffx = fld->ordinalId;
		break;
	}


	switch (ffx)
	{
		case Rctables::enumPC_IDESREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_IDESREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_IDESREC> pc_idesrec(new PC_IDESREC());
			pc_idesrec->open(sourceDSN, targetDSN);
			pc_idesrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_idesrec->setProfileName(profileName);
			pc_idesrec->setReplicationOption(eReplicationOption);
			pc_idesrec->setDropOption(edropOption);
			pc_idesrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_idesrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FRMINGSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FRMINGSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FRMINGSET> pc_frmingset(new PC_FRMINGSET());
			pc_frmingset->open(sourceDSN, targetDSN);
			pc_frmingset->setRepositoryString(builder->getEnvyConnectionString());
			pc_frmingset->setProfileName(profileName);
			pc_frmingset->setReplicationOption(eReplicationOption);
			pc_frmingset->setDropOption(edropOption);
			pc_frmingset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_frmingset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_IXREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_IXREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_IXREC> pc_ixrec(new PC_IXREC());
			pc_ixrec->open(sourceDSN, targetDSN);
			pc_ixrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_ixrec->setProfileName(profileName);
			pc_ixrec->setReplicationOption(eReplicationOption);
			pc_ixrec->setDropOption(edropOption);
			pc_ixrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_ixrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_ENDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_ENDREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_ENDREC> pc_endrec(new PC_ENDREC());
			pc_endrec->open(sourceDSN, targetDSN);
			pc_endrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_endrec->setProfileName(profileName);
			pc_endrec->setReplicationOption(eReplicationOption);
			pc_endrec->setDropOption(edropOption);
			pc_endrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_endrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MBOMINGSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MBOMINGSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MBOMINGSET> pc_mbomingset(new PC_MBOMINGSET());
			pc_mbomingset->open(sourceDSN, targetDSN);
			pc_mbomingset->setRepositoryString(builder->getEnvyConnectionString());
			pc_mbomingset->setProfileName(profileName);
			pc_mbomingset->setReplicationOption(eReplicationOption);
			pc_mbomingset->setDropOption(edropOption);
			pc_mbomingset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mbomingset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_WKCMPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_WKCMPISET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_WKCMPISET> pc_wkcmpiset(new PC_WKCMPISET());
			pc_wkcmpiset->open(sourceDSN, targetDSN);
			pc_wkcmpiset->setRepositoryString(builder->getEnvyConnectionString());
			pc_wkcmpiset->setProfileName(profileName);
			pc_wkcmpiset->setReplicationOption(eReplicationOption);
			pc_wkcmpiset->setDropOption(edropOption);
			pc_wkcmpiset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_wkcmpiset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TEXDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TEXDREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TEXDREC> pc_texdrec(new PC_TEXDREC());
			pc_texdrec->open(sourceDSN, targetDSN);
			pc_texdrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_texdrec->setProfileName(profileName);
			pc_texdrec->setReplicationOption(eReplicationOption);
			pc_texdrec->setDropOption(edropOption);
			pc_texdrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_texdrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FCODESREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FCODESREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FCODESREC> pc_fcodesrec(new PC_FCODESREC());
			pc_fcodesrec->open(sourceDSN, targetDSN);
			pc_fcodesrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_fcodesrec->setProfileName(profileName);
			pc_fcodesrec->setReplicationOption(eReplicationOption);
			pc_fcodesrec->setDropOption(edropOption);
			pc_fcodesrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_fcodesrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTENDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTENDSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTENDSET> pc_prtendset(new PC_PRTENDSET());
			pc_prtendset->open(sourceDSN, targetDSN);
			pc_prtendset->setRepositoryString(builder->getEnvyConnectionString());
			pc_prtendset->setProfileName(profileName);
			pc_prtendset->setReplicationOption(eReplicationOption);
			pc_prtendset->setDropOption(edropOption);
			pc_prtendset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prtendset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FCOHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FCOHHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FCOHHSHSET> pc_fcohhshset(new PC_FCOHHSHSET());
			pc_fcohhshset->open(sourceDSN, targetDSN);
			pc_fcohhshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_fcohhshset->setProfileName(profileName);
			pc_fcohhshset->setReplicationOption(eReplicationOption);
			pc_fcohhshset->setDropOption(edropOption);
			pc_fcohhshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_fcohhshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MPIREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MPIREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MPIREC> pc_mpirec(new PC_MPIREC());
			pc_mpirec->open(sourceDSN, targetDSN);
			pc_mpirec->setRepositoryString(builder->getEnvyConnectionString());
			pc_mpirec->setProfileName(profileName);
			pc_mpirec->setReplicationOption(eReplicationOption);
			pc_mpirec->setDropOption(edropOption);
			pc_mpirec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mpirec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FRMPVHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FRMPVHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FRMPVHSHSET> pc_frmpvhshset(new PC_FRMPVHSHSET());
			pc_frmpvhshset->open(sourceDSN, targetDSN);
			pc_frmpvhshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_frmpvhshset->setProfileName(profileName);
			pc_frmpvhshset->setReplicationOption(eReplicationOption);
			pc_frmpvhshset->setDropOption(edropOption);
			pc_frmpvhshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_frmpvhshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_WKCPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_WKCPISET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_WKCPISET> pc_wkcpiset(new PC_WKCPISET());
			pc_wkcpiset->open(sourceDSN, targetDSN);
			pc_wkcpiset->setRepositoryString(builder->getEnvyConnectionString());
			pc_wkcpiset->setProfileName(profileName);
			pc_wkcpiset->setReplicationOption(eReplicationOption);
			pc_wkcpiset->setDropOption(edropOption);
			pc_wkcpiset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_wkcpiset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_WOHWODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_WOHWODSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_WOHWODSET> pc_wohwodset(new PC_WOHWODSET());
			pc_wohwodset->open(sourceDSN, targetDSN);
			pc_wohwodset->setRepositoryString(builder->getEnvyConnectionString());
			pc_wohwodset->setProfileName(profileName);
			pc_wohwodset->setReplicationOption(eReplicationOption);
			pc_wohwodset->setDropOption(edropOption);
			pc_wohwodset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_wohwodset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_USRFRMPVSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_USRFRMPVSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_USRFRMPVSET> pc_usrfrmpvset(new PC_USRFRMPVSET());
			pc_usrfrmpvset->open(sourceDSN, targetDSN);
			pc_usrfrmpvset->setRepositoryString(builder->getEnvyConnectionString());
			pc_usrfrmpvset->setProfileName(profileName);
			pc_usrfrmpvset->setReplicationOption(eReplicationOption);
			pc_usrfrmpvset->setDropOption(edropOption);
			pc_usrfrmpvset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_usrfrmpvset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FCOHFCODESSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FCOHFCODESSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FCOHFCODESSET> pc_fcohfcodesset(new PC_FCOHFCODESSET());
			pc_fcohfcodesset->open(sourceDSN, targetDSN);
			pc_fcohfcodesset->setRepositoryString(builder->getEnvyConnectionString());
			pc_fcohfcodesset->setProfileName(profileName);
			pc_fcohfcodesset->setReplicationOption(eReplicationOption);
			pc_fcohfcodesset->setDropOption(edropOption);
			pc_fcohfcodesset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_fcohfcodesset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PIPISAFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PIPISAFSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PIPISAFSET> pc_pipisafset(new PC_PIPISAFSET());
			pc_pipisafset->open(sourceDSN, targetDSN);
			pc_pipisafset->setRepositoryString(builder->getEnvyConnectionString());
			pc_pipisafset->setProfileName(profileName);
			pc_pipisafset->setReplicationOption(eReplicationOption);
			pc_pipisafset->setDropOption(edropOption);
			pc_pipisafset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_pipisafset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_INGIDESSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_INGIDESSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_INGIDESSET> pc_ingidesset(new PC_INGIDESSET());
			pc_ingidesset->open(sourceDSN, targetDSN);
			pc_ingidesset->setRepositoryString(builder->getEnvyConnectionString());
			pc_ingidesset->setProfileName(profileName);
			pc_ingidesset->setReplicationOption(eReplicationOption);
			pc_ingidesset->setDropOption(edropOption);
			pc_ingidesset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_ingidesset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_ALTHADTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_ALTHADTSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_ALTHADTSET> pc_althadtset(new PC_ALTHADTSET());
			pc_althadtset->open(sourceDSN, targetDSN);
			pc_althadtset->setRepositoryString(builder->getEnvyConnectionString());
			pc_althadtset->setProfileName(profileName);
			pc_althadtset->setReplicationOption(eReplicationOption);
			pc_althadtset->setDropOption(edropOption);
			pc_althadtset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_althadtset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TRKNOHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TRKNOHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TRKNOHSHSET> pc_trknohshset(new PC_TRKNOHSHSET());
			pc_trknohshset->open(sourceDSN, targetDSN);
			pc_trknohshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_trknohshset->setProfileName(profileName);
			pc_trknohshset->setReplicationOption(eReplicationOption);
			pc_trknohshset->setDropOption(edropOption);
			pc_trknohshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_trknohshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_APIHAPITSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_APIHAPITSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_APIHAPITSET> pc_apihapitset(new PC_APIHAPITSET());
			pc_apihapitset->open(sourceDSN, targetDSN);
			pc_apihapitset->setRepositoryString(builder->getEnvyConnectionString());
			pc_apihapitset->setProfileName(profileName);
			pc_apihapitset->setReplicationOption(eReplicationOption);
			pc_apihapitset->setDropOption(edropOption);
			pc_apihapitset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_apihapitset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTWODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTWODSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTWODSET> pc_prtwodset(new PC_PRTWODSET());
			pc_prtwodset->open(sourceDSN, targetDSN);
			pc_prtwodset->setRepositoryString(builder->getEnvyConnectionString());
			pc_prtwodset->setProfileName(profileName);
			pc_prtwodset->setReplicationOption(eReplicationOption);
			pc_prtwodset->setDropOption(edropOption);
			pc_prtwodset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prtwodset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_CHGHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_CHGHHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_CHGHHSHSET> pc_chghhshset(new PC_CHGHHSHSET());
			pc_chghhshset->open(sourceDSN, targetDSN);
			pc_chghhshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_chghhshset->setProfileName(profileName);
			pc_chghhshset->setReplicationOption(eReplicationOption);
			pc_chghhshset->setDropOption(edropOption);
			pc_chghhshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_chghhshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_APIHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_APIHHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_APIHHSHSET> pc_apihhshset(new PC_APIHHSHSET());
			pc_apihhshset->open(sourceDSN, targetDSN);
			pc_apihhshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_apihhshset->setProfileName(profileName);
			pc_apihhshset->setReplicationOption(eReplicationOption);
			pc_apihhshset->setDropOption(edropOption);
			pc_apihhshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_apihhshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_USRREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_USRREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_USRREC> pc_usrrec(new PC_USRREC());
			pc_usrrec->open(sourceDSN, targetDSN);
			pc_usrrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_usrrec->setProfileName(profileName);
			pc_usrrec->setReplicationOption(eReplicationOption);
			pc_usrrec->setDropOption(edropOption);
			pc_usrrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_usrrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MPISAFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MPISAFREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MPISAFREC> pc_mpisafrec(new PC_MPISAFREC());
			pc_mpisafrec->open(sourceDSN, targetDSN);
			pc_mpisafrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_mpisafrec->setProfileName(profileName);
			pc_mpisafrec->setReplicationOption(eReplicationOption);
			pc_mpisafrec->setDropOption(edropOption);
			pc_mpisafrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mpisafrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FRMFCODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FRMFCODSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FRMFCODSET> pc_frmfcodset(new PC_FRMFCODSET());
			pc_frmfcodset->open(sourceDSN, targetDSN);
			pc_frmfcodset->setRepositoryString(builder->getEnvyConnectionString());
			pc_frmfcodset->setProfileName(profileName);
			pc_frmfcodset->setReplicationOption(eReplicationOption);
			pc_frmfcodset->setDropOption(edropOption);
			pc_frmfcodset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_frmfcodset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_APITREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_APITREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_APITREC> pc_apitrec(new PC_APITREC());
			pc_apitrec->open(sourceDSN, targetDSN);
			pc_apitrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_apitrec->setProfileName(profileName);
			pc_apitrec->setReplicationOption(eReplicationOption);
			pc_apitrec->setDropOption(edropOption);
			pc_apitrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_apitrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTMINGSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTMINGSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTMINGSET> pc_prtmingset(new PC_PRTMINGSET());
			pc_prtmingset->open(sourceDSN, targetDSN);
			pc_prtmingset->setRepositoryString(builder->getEnvyConnectionString());
			pc_prtmingset->setProfileName(profileName);
			pc_prtmingset->setReplicationOption(eReplicationOption);
			pc_prtmingset->setDropOption(edropOption);
			pc_prtmingset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prtmingset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_WODREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_WODREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_WODREC> pc_wodrec(new PC_WODREC());
			pc_wodrec->open(sourceDSN, targetDSN);
			pc_wodrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_wodrec->setProfileName(profileName);
			pc_wodrec->setReplicationOption(eReplicationOption);
			pc_wodrec->setDropOption(edropOption);
			pc_wodrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_wodrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TEXTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TEXTHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TEXTHSHSET> pc_texthshset(new PC_TEXTHSHSET());
			pc_texthshset->open(sourceDSN, targetDSN);
			pc_texthshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_texthshset->setProfileName(profileName);
			pc_texthshset->setReplicationOption(eReplicationOption);
			pc_texthshset->setDropOption(edropOption);
			pc_texthshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_texthshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTFRMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTFRMSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTFRMSET> pc_prtfrmset(new PC_PRTFRMSET());
			pc_prtfrmset->open(sourceDSN, targetDSN);
			pc_prtfrmset->setRepositoryString(builder->getEnvyConnectionString());
			pc_prtfrmset->setProfileName(profileName);
			pc_prtfrmset->setReplicationOption(eReplicationOption);
			pc_prtfrmset->setDropOption(edropOption);
			pc_prtfrmset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prtfrmset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MPITWUSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MPITWUSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MPITWUSET> pc_mpitwuset(new PC_MPITWUSET());
			pc_mpitwuset->open(sourceDSN, targetDSN);
			pc_mpitwuset->setRepositoryString(builder->getEnvyConnectionString());
			pc_mpitwuset->setProfileName(profileName);
			pc_mpitwuset->setReplicationOption(eReplicationOption);
			pc_mpitwuset->setDropOption(edropOption);
			pc_mpitwuset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mpitwuset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_INGSTEPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_INGSTEPSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_INGSTEPSET> pc_ingstepset(new PC_INGSTEPSET());
			pc_ingstepset->open(sourceDSN, targetDSN);
			pc_ingstepset->setRepositoryString(builder->getEnvyConnectionString());
			pc_ingstepset->setProfileName(profileName);
			pc_ingstepset->setReplicationOption(eReplicationOption);
			pc_ingstepset->setDropOption(edropOption);
			pc_ingstepset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_ingstepset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MBOWOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MBOWOHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MBOWOHSET> pc_mbowohset(new PC_MBOWOHSET());
			pc_mbowohset->open(sourceDSN, targetDSN);
			pc_mbowohset->setRepositoryString(builder->getEnvyConnectionString());
			pc_mbowohset->setProfileName(profileName);
			pc_mbowohset->setReplicationOption(eReplicationOption);
			pc_mbowohset->setDropOption(edropOption);
			pc_mbowohset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mbowohset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_ADFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_ADFREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_ADFREC> pc_adfrec(new PC_ADFREC());
			pc_adfrec->open(sourceDSN, targetDSN);
			pc_adfrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_adfrec->setProfileName(profileName);
			pc_adfrec->setReplicationOption(eReplicationOption);
			pc_adfrec->setDropOption(edropOption);
			pc_adfrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_adfrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TRKNOREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TRKNOREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TRKNOREC> pc_trknorec(new PC_TRKNOREC());
			pc_trknorec->open(sourceDSN, targetDSN);
			pc_trknorec->setRepositoryString(builder->getEnvyConnectionString());
			pc_trknorec->setProfileName(profileName);
			pc_trknorec->setReplicationOption(eReplicationOption);
			pc_trknorec->setDropOption(edropOption);
			pc_trknorec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_trknorec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_CHGHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_CHGHREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_CHGHREC> pc_chghrec(new PC_CHGHREC());
			pc_chghrec->open(sourceDSN, targetDSN);
			pc_chghrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_chghrec->setProfileName(profileName);
			pc_chghrec->setReplicationOption(eReplicationOption);
			pc_chghrec->setDropOption(edropOption);
			pc_chghrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_chghrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_ADTDESREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_ADTDESREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_ADTDESREC> pc_adtdesrec(new PC_ADTDESREC());
			pc_adtdesrec->open(sourceDSN, targetDSN);
			pc_adtdesrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_adtdesrec->setProfileName(profileName);
			pc_adtdesrec->setReplicationOption(eReplicationOption);
			pc_adtdesrec->setDropOption(edropOption);
			pc_adtdesrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_adtdesrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MENDMCSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MENDMCSTSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MENDMCSTSET> pc_mendmcstset(new PC_MENDMCSTSET());
			pc_mendmcstset->open(sourceDSN, targetDSN);
			pc_mendmcstset->setRepositoryString(builder->getEnvyConnectionString());
			pc_mendmcstset->setProfileName(profileName);
			pc_mendmcstset->setReplicationOption(eReplicationOption);
			pc_mendmcstset->setDropOption(edropOption);
			pc_mendmcstset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mendmcstset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_WKCHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_WKCHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_WKCHSHSET> pc_wkchshset(new PC_WKCHSHSET());
			pc_wkchshset->open(sourceDSN, targetDSN);
			pc_wkchshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_wkchshset->setProfileName(profileName);
			pc_wkchshset->setReplicationOption(eReplicationOption);
			pc_wkchshset->setDropOption(edropOption);
			pc_wkchshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_wkchshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_CATREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_CATREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_CATREC> pc_catrec(new PC_CATREC());
			pc_catrec->open(sourceDSN, targetDSN);
			pc_catrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_catrec->setProfileName(profileName);
			pc_catrec->setReplicationOption(eReplicationOption);
			pc_catrec->setDropOption(edropOption);
			pc_catrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_catrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FCODREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FCODREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FCODREC> pc_fcodrec(new PC_FCODREC());
			pc_fcodrec->open(sourceDSN, targetDSN);
			pc_fcodrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_fcodrec->setProfileName(profileName);
			pc_fcodrec->setReplicationOption(eReplicationOption);
			pc_fcodrec->setDropOption(edropOption);
			pc_fcodrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_fcodrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MINGREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MINGREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MINGREC> pc_mingrec(new PC_MINGREC());
			pc_mingrec->open(sourceDSN, targetDSN);
			pc_mingrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_mingrec->setProfileName(profileName);
			pc_mingrec->setReplicationOption(eReplicationOption);
			pc_mingrec->setDropOption(edropOption);
			pc_mingrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mingrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FRMHDESSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FRMHDESSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FRMHDESSET> pc_frmhdesset(new PC_FRMHDESSET());
			pc_frmhdesset->open(sourceDSN, targetDSN);
			pc_frmhdesset->setRepositoryString(builder->getEnvyConnectionString());
			pc_frmhdesset->setProfileName(profileName);
			pc_frmhdesset->setReplicationOption(eReplicationOption);
			pc_frmhdesset->setDropOption(edropOption);
			pc_frmhdesset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_frmhdesset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_CATFRMPVSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_CATFRMPVSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_CATFRMPVSET> pc_catfrmpvset(new PC_CATFRMPVSET());
			pc_catfrmpvset->open(sourceDSN, targetDSN);
			pc_catfrmpvset->setRepositoryString(builder->getEnvyConnectionString());
			pc_catfrmpvset->setProfileName(profileName);
			pc_catfrmpvset->setReplicationOption(eReplicationOption);
			pc_catfrmpvset->setDropOption(edropOption);
			pc_catfrmpvset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_catfrmpvset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_CHGHCHGDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_CHGHCHGDSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_CHGHCHGDSET> pc_chghchgdset(new PC_CHGHCHGDSET());
			pc_chghchgdset->open(sourceDSN, targetDSN);
			pc_chghchgdset->setRepositoryString(builder->getEnvyConnectionString());
			pc_chghchgdset->setProfileName(profileName);
			pc_chghchgdset->setReplicationOption(eReplicationOption);
			pc_chghchgdset->setDropOption(edropOption);
			pc_chghchgdset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_chghchgdset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FRMENDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FRMENDSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FRMENDSET> pc_frmendset(new PC_FRMENDSET());
			pc_frmendset->open(sourceDSN, targetDSN);
			pc_frmendset->setRepositoryString(builder->getEnvyConnectionString());
			pc_frmendset->setProfileName(profileName);
			pc_frmendset->setReplicationOption(eReplicationOption);
			pc_frmendset->setDropOption(edropOption);
			pc_frmendset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_frmendset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_WOHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_WOHHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_WOHHSHSET> pc_wohhshset(new PC_WOHHSHSET());
			pc_wohhshset->open(sourceDSN, targetDSN);
			pc_wohhshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_wohhshset->setProfileName(profileName);
			pc_wohhshset->setReplicationOption(eReplicationOption);
			pc_wohhshset->setDropOption(edropOption);
			pc_wohhshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_wohhshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PISAFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PISAFREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PISAFREC> pc_pisafrec(new PC_PISAFREC());
			pc_pisafrec->open(sourceDSN, targetDSN);
			pc_pisafrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_pisafrec->setProfileName(profileName);
			pc_pisafrec->setReplicationOption(eReplicationOption);
			pc_pisafrec->setDropOption(edropOption);
			pc_pisafrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_pisafrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FCOHFCODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FCOHFCODSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FCOHFCODSET> pc_fcohfcodset(new PC_FCOHFCODSET());
			pc_fcohfcodset->open(sourceDSN, targetDSN);
			pc_fcohfcodset->setRepositoryString(builder->getEnvyConnectionString());
			pc_fcohfcodset->setProfileName(profileName);
			pc_fcohfcodset->setReplicationOption(eReplicationOption);
			pc_fcohfcodset->setDropOption(edropOption);
			pc_fcohfcodset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_fcohfcodset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FRMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FRMREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FRMREC> pc_frmrec(new PC_FRMREC());
			pc_frmrec->open(sourceDSN, targetDSN);
			pc_frmrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_frmrec->setProfileName(profileName);
			pc_frmrec->setReplicationOption(eReplicationOption);
			pc_frmrec->setDropOption(edropOption);
			pc_frmrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_frmrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_WKCAPITSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_WKCAPITSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_WKCAPITSET> pc_wkcapitset(new PC_WKCAPITSET());
			pc_wkcapitset->open(sourceDSN, targetDSN);
			pc_wkcapitset->setRepositoryString(builder->getEnvyConnectionString());
			pc_wkcapitset->setProfileName(profileName);
			pc_wkcapitset->setReplicationOption(eReplicationOption);
			pc_wkcapitset->setDropOption(edropOption);
			pc_wkcapitset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_wkcapitset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MBOREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MBOREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MBOREC> pc_mborec(new PC_MBOREC());
			pc_mborec->open(sourceDSN, targetDSN);
			pc_mborec->setRepositoryString(builder->getEnvyConnectionString());
			pc_mborec->setProfileName(profileName);
			pc_mborec->setReplicationOption(eReplicationOption);
			pc_mborec->setDropOption(edropOption);
			pc_mborec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mborec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MBOMENDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MBOMENDSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MBOMENDSET> pc_mbomendset(new PC_MBOMENDSET());
			pc_mbomendset->open(sourceDSN, targetDSN);
			pc_mbomendset->setRepositoryString(builder->getEnvyConnectionString());
			pc_mbomendset->setProfileName(profileName);
			pc_mbomendset->setReplicationOption(eReplicationOption);
			pc_mbomendset->setDropOption(edropOption);
			pc_mbomendset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mbomendset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTFCODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTFCODSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTFCODSET> pc_prtfcodset(new PC_PRTFCODSET());
			pc_prtfcodset->open(sourceDSN, targetDSN);
			pc_prtfcodset->setRepositoryString(builder->getEnvyConnectionString());
			pc_prtfcodset->setProfileName(profileName);
			pc_prtfcodset->setReplicationOption(eReplicationOption);
			pc_prtfcodset->setDropOption(edropOption);
			pc_prtfcodset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prtfcodset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TRKNOTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TRKNOTREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TRKNOTREC> pc_trknotrec(new PC_TRKNOTREC());
			pc_trknotrec->open(sourceDSN, targetDSN);
			pc_trknotrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_trknotrec->setProfileName(profileName);
			pc_trknotrec->setReplicationOption(eReplicationOption);
			pc_trknotrec->setDropOption(edropOption);
			pc_trknotrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_trknotrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TRKTRKNOTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TRKTRKNOTSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TRKTRKNOTSET> pc_trktrknotset(new PC_TRKTRKNOTSET());
			pc_trktrknotset->open(sourceDSN, targetDSN);
			pc_trktrknotset->setRepositoryString(builder->getEnvyConnectionString());
			pc_trktrknotset->setProfileName(profileName);
			pc_trktrknotset->setReplicationOption(eReplicationOption);
			pc_trktrknotset->setDropOption(edropOption);
			pc_trktrknotset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_trktrknotset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_ALTHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_ALTHREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_ALTHREC> pc_althrec(new PC_ALTHREC());
			pc_althrec->open(sourceDSN, targetDSN);
			pc_althrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_althrec->setProfileName(profileName);
			pc_althrec->setReplicationOption(eReplicationOption);
			pc_althrec->setDropOption(edropOption);
			pc_althrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_althrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_STEPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_STEPREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_STEPREC> pc_steprec(new PC_STEPREC());
			pc_steprec->open(sourceDSN, targetDSN);
			pc_steprec->setRepositoryString(builder->getEnvyConnectionString());
			pc_steprec->setProfileName(profileName);
			pc_steprec->setReplicationOption(eReplicationOption);
			pc_steprec->setDropOption(edropOption);
			pc_steprec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_steprec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MBOMBODESSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MBOMBODESSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MBOMBODESSET> pc_mbombodesset(new PC_MBOMBODESSET());
			pc_mbombodesset->open(sourceDSN, targetDSN);
			pc_mbombodesset->setRepositoryString(builder->getEnvyConnectionString());
			pc_mbombodesset->setProfileName(profileName);
			pc_mbombodesset->setReplicationOption(eReplicationOption);
			pc_mbombodesset->setDropOption(edropOption);
			pc_mbombodesset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mbombodesset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_SUBPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_SUBPREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_SUBPREC> pc_subprec(new PC_SUBPREC());
			pc_subprec->open(sourceDSN, targetDSN);
			pc_subprec->setRepositoryString(builder->getEnvyConnectionString());
			pc_subprec->setProfileName(profileName);
			pc_subprec->setReplicationOption(eReplicationOption);
			pc_subprec->setDropOption(edropOption);
			pc_subprec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_subprec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FRMHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FRMHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FRMHSHSET> pc_frmhshset(new PC_FRMHSHSET());
			pc_frmhshset->open(sourceDSN, targetDSN);
			pc_frmhshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_frmhshset->setProfileName(profileName);
			pc_frmhshset->setReplicationOption(eReplicationOption);
			pc_frmhshset->setDropOption(edropOption);
			pc_frmhshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_frmhshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_WKCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_WKCREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_WKCREC> pc_wkcrec(new PC_WKCREC());
			pc_wkcrec->open(sourceDSN, targetDSN);
			pc_wkcrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_wkcrec->setProfileName(profileName);
			pc_wkcrec->setReplicationOption(eReplicationOption);
			pc_wkcrec->setDropOption(edropOption);
			pc_wkcrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_wkcrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TOOREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TOOREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TOOREC> pc_toorec(new PC_TOOREC());
			pc_toorec->open(sourceDSN, targetDSN);
			pc_toorec->setRepositoryString(builder->getEnvyConnectionString());
			pc_toorec->setProfileName(profileName);
			pc_toorec->setReplicationOption(eReplicationOption);
			pc_toorec->setDropOption(edropOption);
			pc_toorec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_toorec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PIDESREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PIDESREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PIDESREC> pc_pidesrec(new PC_PIDESREC());
			pc_pidesrec->open(sourceDSN, targetDSN);
			pc_pidesrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_pidesrec->setProfileName(profileName);
			pc_pidesrec->setReplicationOption(eReplicationOption);
			pc_pidesrec->setDropOption(edropOption);
			pc_pidesrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_pidesrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_SLFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_SLFREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_SLFREC> pc_slfrec(new PC_SLFREC());
			pc_slfrec->open(sourceDSN, targetDSN);
			pc_slfrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_slfrec->setProfileName(profileName);
			pc_slfrec->setReplicationOption(eReplicationOption);
			pc_slfrec->setDropOption(edropOption);
			pc_slfrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_slfrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MINGMIDESSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MINGMIDESSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MINGMIDESSET> pc_mingmidesset(new PC_MINGMIDESSET());
			pc_mingmidesset->open(sourceDSN, targetDSN);
			pc_mingmidesset->setRepositoryString(builder->getEnvyConnectionString());
			pc_mingmidesset->setProfileName(profileName);
			pc_mingmidesset->setReplicationOption(eReplicationOption);
			pc_mingmidesset->setDropOption(edropOption);
			pc_mingmidesset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mingmidesset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_USRHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_USRHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_USRHSHSET> pc_usrhshset(new PC_USRHSHSET());
			pc_usrhshset->open(sourceDSN, targetDSN);
			pc_usrhshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_usrhshset->setProfileName(profileName);
			pc_usrhshset->setReplicationOption(eReplicationOption);
			pc_usrhshset->setDropOption(edropOption);
			pc_usrhshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_usrhshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTSLFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTSLFSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTSLFSET> pc_prtslfset(new PC_PRTSLFSET());
			pc_prtslfset->open(sourceDSN, targetDSN);
			pc_prtslfset->setRepositoryString(builder->getEnvyConnectionString());
			pc_prtslfset->setProfileName(profileName);
			pc_prtslfset->setReplicationOption(eReplicationOption);
			pc_prtslfset->setDropOption(edropOption);
			pc_prtslfset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prtslfset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MBOHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MBOHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MBOHSHSET> pc_mbohshset(new PC_MBOHSHSET());
			pc_mbohshset->open(sourceDSN, targetDSN);
			pc_mbohshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_mbohshset->setProfileName(profileName);
			pc_mbohshset->setReplicationOption(eReplicationOption);
			pc_mbohshset->setDropOption(edropOption);
			pc_mbohshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mbohshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_CHGDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_CHGDREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_CHGDREC> pc_chgdrec(new PC_CHGDREC());
			pc_chgdrec->open(sourceDSN, targetDSN);
			pc_chgdrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_chgdrec->setProfileName(profileName);
			pc_chgdrec->setReplicationOption(eReplicationOption);
			pc_chgdrec->setDropOption(edropOption);
			pc_chgdrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_chgdrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_INGSIFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_INGSIFSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_INGSIFSET> pc_ingsifset(new PC_INGSIFSET());
			pc_ingsifset->open(sourceDSN, targetDSN);
			pc_ingsifset->setRepositoryString(builder->getEnvyConnectionString());
			pc_ingsifset->setProfileName(profileName);
			pc_ingsifset->setReplicationOption(eReplicationOption);
			pc_ingsifset->setDropOption(edropOption);
			pc_ingsifset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_ingsifset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_HDESREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_HDESREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_HDESREC> pc_hdesrec(new PC_HDESREC());
			pc_hdesrec->open(sourceDSN, targetDSN);
			pc_hdesrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_hdesrec->setProfileName(profileName);
			pc_hdesrec->setReplicationOption(eReplicationOption);
			pc_hdesrec->setDropOption(edropOption);
			pc_hdesrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_hdesrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_APITAPIDESSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_APITAPIDESSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_APITAPIDESSET> pc_apitapidesset(new PC_APITAPIDESSET());
			pc_apitapidesset->open(sourceDSN, targetDSN);
			pc_apitapidesset->setRepositoryString(builder->getEnvyConnectionString());
			pc_apitapidesset->setProfileName(profileName);
			pc_apitapidesset->setReplicationOption(eReplicationOption);
			pc_apitapidesset->setDropOption(edropOption);
			pc_apitapidesset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_apitapidesset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_ALTHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_ALTHHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_ALTHHSHSET> pc_althhshset(new PC_ALTHHSHSET());
			pc_althhshset->open(sourceDSN, targetDSN);
			pc_althhshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_althhshset->setProfileName(profileName);
			pc_althhshset->setReplicationOption(eReplicationOption);
			pc_althhshset->setDropOption(edropOption);
			pc_althhshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_althhshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_CATHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_CATHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_CATHSHSET> pc_cathshset(new PC_CATHSHSET());
			pc_cathshset->open(sourceDSN, targetDSN);
			pc_cathshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_cathshset->setProfileName(profileName);
			pc_cathshset->setReplicationOption(eReplicationOption);
			pc_cathshset->setDropOption(edropOption);
			pc_cathshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_cathshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TWUREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TWUREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TWUREC> pc_twurec(new PC_TWUREC());
			pc_twurec->open(sourceDSN, targetDSN);
			pc_twurec->setRepositoryString(builder->getEnvyConnectionString());
			pc_twurec->setProfileName(profileName);
			pc_twurec->setReplicationOption(eReplicationOption);
			pc_twurec->setDropOption(edropOption);
			pc_twurec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_twurec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FCOHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FCOHREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FCOHREC> pc_fcohrec(new PC_FCOHREC());
			pc_fcohrec->open(sourceDSN, targetDSN);
			pc_fcohrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_fcohrec->setProfileName(profileName);
			pc_fcohrec->setReplicationOption(eReplicationOption);
			pc_fcohrec->setDropOption(edropOption);
			pc_fcohrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_fcohrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TEXTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TEXTREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TEXTREC> pc_textrec(new PC_TEXTREC());
			pc_textrec->open(sourceDSN, targetDSN);
			pc_textrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_textrec->setProfileName(profileName);
			pc_textrec->setReplicationOption(eReplicationOption);
			pc_textrec->setDropOption(edropOption);
			pc_textrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_textrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_APIHAPIFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_APIHAPIFSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_APIHAPIFSET> pc_apihapifset(new PC_APIHAPIFSET());
			pc_apihapifset->open(sourceDSN, targetDSN);
			pc_apihapifset->setRepositoryString(builder->getEnvyConnectionString());
			pc_apihapifset->setProfileName(profileName);
			pc_apihapifset->setReplicationOption(eReplicationOption);
			pc_apihapifset->setDropOption(edropOption);
			pc_apihapifset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_apihapifset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_APISAFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_APISAFREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_APISAFREC> pc_apisafrec(new PC_APISAFREC());
			pc_apisafrec->open(sourceDSN, targetDSN);
			pc_apisafrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_apisafrec->setProfileName(profileName);
			pc_apisafrec->setReplicationOption(eReplicationOption);
			pc_apisafrec->setDropOption(edropOption);
			pc_apisafrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_apisafrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_SLTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_SLTREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_SLTREC> pc_sltrec(new PC_SLTREC());
			pc_sltrec->open(sourceDSN, targetDSN);
			pc_sltrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_sltrec->setProfileName(profileName);
			pc_sltrec->setReplicationOption(eReplicationOption);
			pc_sltrec->setDropOption(edropOption);
			pc_sltrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_sltrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_CATIXSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_CATIXSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_CATIXSET> pc_catixset(new PC_CATIXSET());
			pc_catixset->open(sourceDSN, targetDSN);
			pc_catixset->setRepositoryString(builder->getEnvyConnectionString());
			pc_catixset->setProfileName(profileName);
			pc_catixset->setReplicationOption(eReplicationOption);
			pc_catixset->setDropOption(edropOption);
			pc_catixset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_catixset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TRKREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TRKREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TRKREC> pc_trkrec(new PC_TRKREC());
			pc_trkrec->open(sourceDSN, targetDSN);
			pc_trkrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_trkrec->setProfileName(profileName);
			pc_trkrec->setReplicationOption(eReplicationOption);
			pc_trkrec->setDropOption(edropOption);
			pc_trkrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_trkrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TEXTTEXDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TEXTTEXDSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TEXTTEXDSET> pc_texttexdset(new PC_TEXTTEXDSET());
			pc_texttexdset->open(sourceDSN, targetDSN);
			pc_texttexdset->setRepositoryString(builder->getEnvyConnectionString());
			pc_texttexdset->setProfileName(profileName);
			pc_texttexdset->setReplicationOption(eReplicationOption);
			pc_texttexdset->setDropOption(edropOption);
			pc_texttexdset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_texttexdset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTHSHSET> pc_prthshset(new PC_PRTHSHSET());
			pc_prthshset->open(sourceDSN, targetDSN);
			pc_prthshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_prthshset->setProfileName(profileName);
			pc_prthshset->setReplicationOption(eReplicationOption);
			pc_prthshset->setDropOption(edropOption);
			pc_prthshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prthshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTMBOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTMBOSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTMBOSET> pc_prtmboset(new PC_PRTMBOSET());
			pc_prtmboset->open(sourceDSN, targetDSN);
			pc_prtmboset->setRepositoryString(builder->getEnvyConnectionString());
			pc_prtmboset->setProfileName(profileName);
			pc_prtmboset->setReplicationOption(eReplicationOption);
			pc_prtmboset->setDropOption(edropOption);
			pc_prtmboset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prtmboset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_ADTADTDESSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_ADTADTDESSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_ADTADTDESSET> pc_adtadtdesset(new PC_ADTADTDESSET());
			pc_adtadtdesset->open(sourceDSN, targetDSN);
			pc_adtadtdesset->setRepositoryString(builder->getEnvyConnectionString());
			pc_adtadtdesset->setProfileName(profileName);
			pc_adtadtdesset->setReplicationOption(eReplicationOption);
			pc_adtadtdesset->setDropOption(edropOption);
			pc_adtadtdesset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_adtadtdesset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MCSTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MCSTREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MCSTREC> pc_mcstrec(new PC_MCSTREC());
			pc_mcstrec->open(sourceDSN, targetDSN);
			pc_mcstrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_mcstrec->setProfileName(profileName);
			pc_mcstrec->setReplicationOption(eReplicationOption);
			pc_mcstrec->setDropOption(edropOption);
			pc_mcstrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mcstrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TOOTWUSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TOOTWUSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TOOTWUSET> pc_tootwuset(new PC_TOOTWUSET());
			pc_tootwuset->open(sourceDSN, targetDSN);
			pc_tootwuset->setRepositoryString(builder->getEnvyConnectionString());
			pc_tootwuset->setProfileName(profileName);
			pc_tootwuset->setReplicationOption(eReplicationOption);
			pc_tootwuset->setDropOption(edropOption);
			pc_tootwuset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_tootwuset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_ADTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_ADTREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_ADTREC> pc_adtrec(new PC_ADTREC());
			pc_adtrec->open(sourceDSN, targetDSN);
			pc_adtrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_adtrec->setProfileName(profileName);
			pc_adtrec->setReplicationOption(eReplicationOption);
			pc_adtrec->setDropOption(edropOption);
			pc_adtrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_adtrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_APITAPISAFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_APITAPISAFSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_APITAPISAFSET> pc_apitapisafset(new PC_APITAPISAFSET());
			pc_apitapisafset->open(sourceDSN, targetDSN);
			pc_apitapisafset->setRepositoryString(builder->getEnvyConnectionString());
			pc_apitapisafset->setProfileName(profileName);
			pc_apitapisafset->setReplicationOption(eReplicationOption);
			pc_apitapisafset->setDropOption(edropOption);
			pc_apitapisafset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_apitapisafset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_ALTHADFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_ALTHADFSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_ALTHADFSET> pc_althadfset(new PC_ALTHADFSET());
			pc_althadfset->open(sourceDSN, targetDSN);
			pc_althadfset->setRepositoryString(builder->getEnvyConnectionString());
			pc_althadfset->setProfileName(profileName);
			pc_althadfset->setReplicationOption(eReplicationOption);
			pc_althadfset->setDropOption(edropOption);
			pc_althadfset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_althadfset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MPIDESREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MPIDESREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MPIDESREC> pc_mpidesrec(new PC_MPIDESREC());
			pc_mpidesrec->open(sourceDSN, targetDSN);
			pc_mpidesrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_mpidesrec->setProfileName(profileName);
			pc_mpidesrec->setReplicationOption(eReplicationOption);
			pc_mpidesrec->setDropOption(edropOption);
			pc_mpidesrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mpidesrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_APIDESREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_APIDESREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_APIDESREC> pc_apidesrec(new PC_APIDESREC());
			pc_apidesrec->open(sourceDSN, targetDSN);
			pc_apidesrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_apidesrec->setProfileName(profileName);
			pc_apidesrec->setReplicationOption(eReplicationOption);
			pc_apidesrec->setDropOption(edropOption);
			pc_apidesrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_apidesrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MBOMPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MBOMPISET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MBOMPISET> pc_mbompiset(new PC_MBOMPISET());
			pc_mbompiset->open(sourceDSN, targetDSN);
			pc_mbompiset->setRepositoryString(builder->getEnvyConnectionString());
			pc_mbompiset->setProfileName(profileName);
			pc_mbompiset->setReplicationOption(eReplicationOption);
			pc_mbompiset->setDropOption(edropOption);
			pc_mbompiset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mbompiset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTMENDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTMENDSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTMENDSET> pc_prtmendset(new PC_PRTMENDSET());
			pc_prtmendset->open(sourceDSN, targetDSN);
			pc_prtmendset->setRepositoryString(builder->getEnvyConnectionString());
			pc_prtmendset->setProfileName(profileName);
			pc_prtmendset->setReplicationOption(eReplicationOption);
			pc_prtmendset->setDropOption(edropOption);
			pc_prtmendset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prtmendset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_APIHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_APIHREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_APIHREC> pc_apihrec(new PC_APIHREC());
			pc_apihrec->open(sourceDSN, targetDSN);
			pc_apihrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_apihrec->setProfileName(profileName);
			pc_apihrec->setReplicationOption(eReplicationOption);
			pc_apihrec->setDropOption(edropOption);
			pc_apihrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_apihrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_APIFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_APIFREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_APIFREC> pc_apifrec(new PC_APIFREC());
			pc_apifrec->open(sourceDSN, targetDSN);
			pc_apifrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_apifrec->setProfileName(profileName);
			pc_apifrec->setReplicationOption(eReplicationOption);
			pc_apifrec->setDropOption(edropOption);
			pc_apifrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_apifrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTSLTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTSLTSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTSLTSET> pc_prtsltset(new PC_PRTSLTSET());
			pc_prtsltset->open(sourceDSN, targetDSN);
			pc_prtsltset->setRepositoryString(builder->getEnvyConnectionString());
			pc_prtsltset->setProfileName(profileName);
			pc_prtsltset->setReplicationOption(eReplicationOption);
			pc_prtsltset->setDropOption(edropOption);
			pc_prtsltset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prtsltset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_SIFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_SIFREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_SIFREC> pc_sifrec(new PC_SIFREC());
			pc_sifrec->open(sourceDSN, targetDSN);
			pc_sifrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_sifrec->setProfileName(profileName);
			pc_sifrec->setReplicationOption(eReplicationOption);
			pc_sifrec->setDropOption(edropOption);
			pc_sifrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_sifrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MBODESREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MBODESREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MBODESREC> pc_mbodesrec(new PC_MBODESREC());
			pc_mbodesrec->open(sourceDSN, targetDSN);
			pc_mbodesrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_mbodesrec->setProfileName(profileName);
			pc_mbodesrec->setReplicationOption(eReplicationOption);
			pc_mbodesrec->setDropOption(edropOption);
			pc_mbodesrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mbodesrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MPIMPISAFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MPIMPISAFSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MPIMPISAFSET> pc_mpimpisafset(new PC_MPIMPISAFSET());
			pc_mpimpisafset->open(sourceDSN, targetDSN);
			pc_mpimpisafset->setRepositoryString(builder->getEnvyConnectionString());
			pc_mpimpisafset->setProfileName(profileName);
			pc_mpimpisafset->setReplicationOption(eReplicationOption);
			pc_mpimpisafset->setDropOption(edropOption);
			pc_mpimpisafset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mpimpisafset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_WOHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_WOHREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_WOHREC> pc_wohrec(new PC_WOHREC());
			pc_wohrec->open(sourceDSN, targetDSN);
			pc_wohrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_wohrec->setProfileName(profileName);
			pc_wohrec->setReplicationOption(eReplicationOption);
			pc_wohrec->setDropOption(edropOption);
			pc_wohrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_wohrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TRKNOTRKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TRKNOTRKSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TRKNOTRKSET> pc_trknotrkset(new PC_TRKNOTRKSET());
			pc_trknotrkset->open(sourceDSN, targetDSN);
			pc_trknotrkset->setRepositoryString(builder->getEnvyConnectionString());
			pc_trknotrkset->setProfileName(profileName);
			pc_trknotrkset->setReplicationOption(eReplicationOption);
			pc_trknotrkset->setDropOption(edropOption);
			pc_trknotrkset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_trknotrkset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_APITTWUSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_APITTWUSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_APITTWUSET> pc_apittwuset(new PC_APITTWUSET());
			pc_apittwuset->open(sourceDSN, targetDSN);
			pc_apittwuset->setRepositoryString(builder->getEnvyConnectionString());
			pc_apittwuset->setProfileName(profileName);
			pc_apittwuset->setReplicationOption(eReplicationOption);
			pc_apittwuset->setDropOption(edropOption);
			pc_apittwuset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_apittwuset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_CATFRMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_CATFRMSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_CATFRMSET> pc_catfrmset(new PC_CATFRMSET());
			pc_catfrmset->open(sourceDSN, targetDSN);
			pc_catfrmset->setRepositoryString(builder->getEnvyConnectionString());
			pc_catfrmset->setProfileName(profileName);
			pc_catfrmset->setReplicationOption(eReplicationOption);
			pc_catfrmset->setDropOption(edropOption);
			pc_catfrmset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_catfrmset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTINGSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTINGSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTINGSET> pc_prtingset(new PC_PRTINGSET());
			pc_prtingset->open(sourceDSN, targetDSN);
			pc_prtingset->setRepositoryString(builder->getEnvyConnectionString());
			pc_prtingset->setProfileName(profileName);
			pc_prtingset->setReplicationOption(eReplicationOption);
			pc_prtingset->setDropOption(edropOption);
			pc_prtingset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prtingset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PITWUSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PITWUSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PITWUSET> pc_pitwuset(new PC_PITWUSET());
			pc_pitwuset->open(sourceDSN, targetDSN);
			pc_pitwuset->setRepositoryString(builder->getEnvyConnectionString());
			pc_pitwuset->setProfileName(profileName);
			pc_pitwuset->setReplicationOption(eReplicationOption);
			pc_pitwuset->setDropOption(edropOption);
			pc_pitwuset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_pitwuset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PRTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PRTREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PRTREC> pc_prtrec(new PC_PRTREC());
			pc_prtrec->open(sourceDSN, targetDSN);
			pc_prtrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_prtrec->setProfileName(profileName);
			pc_prtrec->setReplicationOption(eReplicationOption);
			pc_prtrec->setDropOption(edropOption);
			pc_prtrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_prtrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PIREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PIREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PIREC> pc_pirec(new PC_PIREC());
			pc_pirec->open(sourceDSN, targetDSN);
			pc_pirec->setRepositoryString(builder->getEnvyConnectionString());
			pc_pirec->setProfileName(profileName);
			pc_pirec->setReplicationOption(eReplicationOption);
			pc_pirec->setDropOption(edropOption);
			pc_pirec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_pirec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MPIMPIDESSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MPIMPIDESSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MPIMPIDESSET> pc_mpimpidesset(new PC_MPIMPIDESSET());
			pc_mpimpidesset->open(sourceDSN, targetDSN);
			pc_mpimpidesset->setRepositoryString(builder->getEnvyConnectionString());
			pc_mpimpidesset->setProfileName(profileName);
			pc_mpimpidesset->setReplicationOption(eReplicationOption);
			pc_mpimpidesset->setDropOption(edropOption);
			pc_mpimpidesset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mpimpidesset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_ADTASTPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_ADTASTPSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_ADTASTPSET> pc_adtastpset(new PC_ADTASTPSET());
			pc_adtastpset->open(sourceDSN, targetDSN);
			pc_adtastpset->setRepositoryString(builder->getEnvyConnectionString());
			pc_adtastpset->setProfileName(profileName);
			pc_adtastpset->setReplicationOption(eReplicationOption);
			pc_adtastpset->setDropOption(edropOption);
			pc_adtastpset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_adtastpset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FRMPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FRMPISET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FRMPISET> pc_frmpiset(new PC_FRMPISET());
			pc_frmpiset->open(sourceDSN, targetDSN);
			pc_frmpiset->setRepositoryString(builder->getEnvyConnectionString());
			pc_frmpiset->setProfileName(profileName);
			pc_frmpiset->setReplicationOption(eReplicationOption);
			pc_frmpiset->setDropOption(edropOption);
			pc_frmpiset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_frmpiset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_IXHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_IXHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_IXHSHSET> pc_ixhshset(new PC_IXHSHSET());
			pc_ixhshset->open(sourceDSN, targetDSN);
			pc_ixhshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_ixhshset->setProfileName(profileName);
			pc_ixhshset->setReplicationOption(eReplicationOption);
			pc_ixhshset->setDropOption(edropOption);
			pc_ixhshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_ixhshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_FRMPVREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_FRMPVREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_FRMPVREC> pc_frmpvrec(new PC_FRMPVREC());
			pc_frmpvrec->open(sourceDSN, targetDSN);
			pc_frmpvrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_frmpvrec->setProfileName(profileName);
			pc_frmpvrec->setReplicationOption(eReplicationOption);
			pc_frmpvrec->setDropOption(edropOption);
			pc_frmpvrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_frmpvrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PISUBPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PISUBPSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PISUBPSET> pc_pisubpset(new PC_PISUBPSET());
			pc_pisubpset->open(sourceDSN, targetDSN);
			pc_pisubpset->setRepositoryString(builder->getEnvyConnectionString());
			pc_pisubpset->setProfileName(profileName);
			pc_pisubpset->setReplicationOption(eReplicationOption);
			pc_pisubpset->setDropOption(edropOption);
			pc_pisubpset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_pisubpset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MIDESREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MIDESREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MIDESREC> pc_midesrec(new PC_MIDESREC());
			pc_midesrec->open(sourceDSN, targetDSN);
			pc_midesrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_midesrec->setProfileName(profileName);
			pc_midesrec->setReplicationOption(eReplicationOption);
			pc_midesrec->setDropOption(edropOption);
			pc_midesrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_midesrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_PIPIDESSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_PIPIDESSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_PIPIDESSET> pc_pipidesset(new PC_PIPIDESSET());
			pc_pipidesset->open(sourceDSN, targetDSN);
			pc_pipidesset->setRepositoryString(builder->getEnvyConnectionString());
			pc_pipidesset->setProfileName(profileName);
			pc_pipidesset->setReplicationOption(eReplicationOption);
			pc_pipidesset->setDropOption(edropOption);
			pc_pipidesset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_pipidesset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_ASTPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_ASTPREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_ASTPREC> pc_astprec(new PC_ASTPREC());
			pc_astprec->open(sourceDSN, targetDSN);
			pc_astprec->setRepositoryString(builder->getEnvyConnectionString());
			pc_astprec->setProfileName(profileName);
			pc_astprec->setReplicationOption(eReplicationOption);
			pc_astprec->setDropOption(edropOption);
			pc_astprec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_astprec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_MENDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_MENDREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_MENDREC> pc_mendrec(new PC_MENDREC());
			pc_mendrec->open(sourceDSN, targetDSN);
			pc_mendrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_mendrec->setProfileName(profileName);
			pc_mendrec->setReplicationOption(eReplicationOption);
			pc_mendrec->setDropOption(edropOption);
			pc_mendrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_mendrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_TOOHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_TOOHSHSET");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_TOOHSHSET> pc_toohshset(new PC_TOOHSHSET());
			pc_toohshset->open(sourceDSN, targetDSN);
			pc_toohshset->setRepositoryString(builder->getEnvyConnectionString());
			pc_toohshset->setProfileName(profileName);
			pc_toohshset->setReplicationOption(eReplicationOption);
			pc_toohshset->setDropOption(edropOption);
			pc_toohshset->setOdbcAttributes(builder->getOdbcAttributes());
			pc_toohshset->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPC_INGREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers * nt = new vcNvTransfers;
			clsRowsToDeleteCleanup * nRtd = new clsRowsToDeleteCleanup;
			checkSumTables *n = new checkSumTables();
			n->initialize();
			n->setSourceConnectionString(sourceDSN);
			n->setTargetConnectionString(targetDSN);
			n->setProfileName(profileName.toUpper());
			n->setTableName(tableName);
			nt->setSourceDSN(sourceDSN);
			nt->setTableName("PC_INGREC");
			nt->setProfileName("PRCDB100");
			nt->UpdateNvTransfersFromLastAttempted();
			nt->setAutoDelete(true);
			nRtd->initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd->deleteRtdFromTarget();
			QScopedPointer<PC_INGREC> pc_ingrec(new PC_INGREC());
			pc_ingrec->open(sourceDSN, targetDSN);
			pc_ingrec->setRepositoryString(builder->getEnvyConnectionString());
			pc_ingrec->setProfileName(profileName);
			pc_ingrec->setReplicationOption(eReplicationOption);
			pc_ingrec->setDropOption(edropOption);
			pc_ingrec->setOdbcAttributes(builder->getOdbcAttributes());
			pc_ingrec->process(1);
// send the Update
			QThreadPool::globalInstance()->start(nRtd, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(nt, (int)QThread::HighPriority);
			QThreadPool::globalInstance()->start(n, (int)QThread::LowPriority);
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
	}
}
#pragma endregion
