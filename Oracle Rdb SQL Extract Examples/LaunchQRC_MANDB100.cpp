/*H**********************************************************************
* FILENAME :        Launcher_MANDB100.cpp            DESIGN REF: 
*
* DESCRIPTION :
*       This class configures a container to interact with the QThreadPool
*       data replications. This class is the main class to access core 
*       functions for the replication process. 
*
*        Rdb schema.
*
*    THIS FILE IS AN AUTO-GENERATED INCLUDE FILE
*
* PUBLIC FUNCTIONS :
*       None
*      
* NOTES :
*   
*
*       Copyright (c) Timothy Peer, eNVy Systems, Inc. 2015 -2018.  All rights reserved.
* 
* AUTHOR :    Timothy Peer        START DATE :    10 Nov 2018
*
* CHANGES :
*
* REF NO  VERSION DATE    WHO     DETAIL
*
*H*/


#pragma region hashMap MANDB100
#include "LaunchQRC_MANDB100.h"
#include <QLoggingCategory>
#include "connectionstringbuilder.h"
#include "clsrowstodeletecleanup.h" 
#include "tableEnumerations_MANDB100.h"
#pragma region table includes
#include "ClassLibQ_MANDB100.h"
#include "vcnvtransfers.h" 

#pragma endregion table includes
launchQRC_MANDB100::launchQRC_MANDB100(QObject * parent) : QObject(parent) {
	 workerPool = new QThreadPool(this);
}

launchQRC_MANDB100::~launchQRC_MANDB100() {
	m_HashedMap_MANDB100.clear();
}

void launchQRC_MANDB100::initialize(const QString _profileName, const QString _tableName, const QString _sourceDSN, const QString _targetDSN, DropOption dropOption, ReplicationOption replicationOption)
{
	tables.clear();
	tableName = _tableName;
	targetDSN = _targetDSN;
	sourceDSN = _sourceDSN;
	profileName = _profileName;
// 	QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder());
	// 	envyRepositoryString = builder->getEnvyConnectionString();
	setDropOption(dropOption);
	setReplicationOption(replicationOption);
# pragma region HashedMap_MANDB100
	schemaField * AP_VNDVENSET_Field = new schemaField(this);
	schemaField * MRHREC_Field = new schemaField(this);
	schemaField * GL_ACCTHSHSET_Field = new schemaField(this);
	schemaField * MA_BILSHPSET_Field = new schemaField(this);
	schemaField * FRTREC_Field = new schemaField(this);
	schemaField * WIPYLDSET_Field = new schemaField(this);
	schemaField * WKCREC_Field = new schemaField(this);
	schemaField * MA_SHPQUOHSET_Field = new schemaField(this);
	schemaField * MA_RSNCHGHSET_Field = new schemaField(this);
	schemaField * BOLOPENSET_Field = new schemaField(this);
	schemaField * AP_VATREC_Field = new schemaField(this);
	schemaField * MA_PFAMREC_Field = new schemaField(this);
	schemaField * FSCCALHSHSET_Field = new schemaField(this);
	schemaField * AP_DEFACCTSET_Field = new schemaField(this);
	schemaField * MA_BILPOSTSET_Field = new schemaField(this);
	schemaField * AP_HDRVNDSET_Field = new schemaField(this);
	schemaField * AP_SEARCHREC_Field = new schemaField(this);
	schemaField * MA_SHPSOHSET_Field = new schemaField(this);
	schemaField * DRVARSET_Field = new schemaField(this);
	schemaField * MA_COMCREC_Field = new schemaField(this);
	schemaField * MA_PRCTREC_Field = new schemaField(this);
	schemaField * MA_SODINDSET_Field = new schemaField(this);
	schemaField * MA_INHDMHSET_Field = new schemaField(this);
	schemaField * MA_STATEREC_Field = new schemaField(this);
	schemaField * PRTFORSET_Field = new schemaField(this);
	schemaField * MA_PRTTOPSET_Field = new schemaField(this);
	schemaField * PAYSET_Field = new schemaField(this);
	schemaField * WOHEALSET_Field = new schemaField(this);
	schemaField * MA_GLCTTABSET_Field = new schemaField(this);
	schemaField * AP_BATCHHSHSET_Field = new schemaField(this);
	schemaField * MA_PRPTPRODSET_Field = new schemaField(this);
	schemaField * AP_BNKVCHSET_Field = new schemaField(this);
	schemaField * MA_FRTHSHSET_Field = new schemaField(this);
	schemaField * MA_RSNCMHSET_Field = new schemaField(this);
	schemaField * POHPRHSET_Field = new schemaField(this);
	schemaField * AP_VENHOLDSET_Field = new schemaField(this);
	schemaField * GL_FP_NREC_Field = new schemaField(this);
	schemaField * WARINTSET_Field = new schemaField(this);
	schemaField * GL_FPTOPCTSET_Field = new schemaField(this);
	schemaField * ED_AUDREC_Field = new schemaField(this);
	schemaField * VENREC_Field = new schemaField(this);
	schemaField * MA_PRPTHSHSET_Field = new schemaField(this);
	schemaField * MA_SOHPBSET_Field = new schemaField(this);
	schemaField * GL_LINKREC_Field = new schemaField(this);
	schemaField * AP_RECNOTEREC_Field = new schemaField(this);
	schemaField * GL_BATCHSET_Field = new schemaField(this);
	schemaField * OPCREC_Field = new schemaField(this);
	schemaField * AP_VNDCHKSET_Field = new schemaField(this);
	schemaField * POMREC_Field = new schemaField(this);
	schemaField * GL_VPDEN_DREC_Field = new schemaField(this);
	schemaField * WOHREC_Field = new schemaField(this);
	schemaField * GL_PRPT_NREC_Field = new schemaField(this);
	schemaField * MA_PNOTHSHSET_Field = new schemaField(this);
	schemaField * GL_FPTOACCTSET_Field = new schemaField(this);
	schemaField * WIPEFFSET_Field = new schemaField(this);
	schemaField * GL_ISBSHSHSET_Field = new schemaField(this);
	schemaField * AP_POPSET_Field = new schemaField(this);
	schemaField * MA_FCPRTABREC_Field = new schemaField(this);
	schemaField * MA_QUOHSPISET_Field = new schemaField(this);
	schemaField * MA_SOCATREC_Field = new schemaField(this);
	schemaField * AP_VENVCHSET_Field = new schemaField(this);
	schemaField * INDFHSHSET_Field = new schemaField(this);
	schemaField * GL_REAMTSET_Field = new schemaField(this);
	schemaField * RQHRQDSET_Field = new schemaField(this);
	schemaField * GL_ARPT_DREC_Field = new schemaField(this);
	schemaField * MA_INHAPCPOSTSET_Field = new schemaField(this);
	schemaField * MA_COMOREC_Field = new schemaField(this);
	schemaField * AP_VNDHSHSET_Field = new schemaField(this);
	schemaField * CRVARSET_Field = new schemaField(this);
	schemaField * MA_PRCTFCPRTABSET_Field = new schemaField(this);
	schemaField * WOHHSHSET_Field = new schemaField(this);
	schemaField * MA_INDSPNLSET_Field = new schemaField(this);
	schemaField * PODIRCTSET_Field = new schemaField(this);
	schemaField * MA_BILFCPRTABSET_Field = new schemaField(this);
	schemaField * SOHREC_Field = new schemaField(this);
	schemaField * AP_BCHVCHSET_Field = new schemaField(this);
	schemaField * ACTHSHSET_Field = new schemaField(this);
	schemaField * AP_HDRREC_Field = new schemaField(this);
	schemaField * GL_VPDESCSET_Field = new schemaField(this);
	schemaField * PRTIRCTSET_Field = new schemaField(this);
	schemaField * GENPRTSET_Field = new schemaField(this);
	schemaField * WARLOCSET_Field = new schemaField(this);
	schemaField * RTDREC_Field = new schemaField(this);
	schemaField * MA_DMHDMHLSET_Field = new schemaField(this);
	schemaField * AP_RECPAYCHNSET_Field = new schemaField(this);
	schemaField * IRCTSET_Field = new schemaField(this);
	schemaField * GL_PROJRPTSET_Field = new schemaField(this);
	schemaField * AP_RECPOSTREC_Field = new schemaField(this);
	schemaField * PRTYLDSET_Field = new schemaField(this);
	schemaField * POHRCTSET_Field = new schemaField(this);
	schemaField * MA_INHSHHSET_Field = new schemaField(this);
	schemaField * RCTHSHSET_Field = new schemaField(this);
	schemaField * VENBILSET_Field = new schemaField(this);
	schemaField * MA_APCSPISET_Field = new schemaField(this);
	schemaField * INTREC_Field = new schemaField(this);
	schemaField * MA_SHHREC_Field = new schemaField(this);
	schemaField * MA_ACCTSRTSET_Field = new schemaField(this);
	schemaField * MA_COMOCLREC_Field = new schemaField(this);
	schemaField * MA_SHDSERSET_Field = new schemaField(this);
	schemaField * ENGREC_Field = new schemaField(this);
	schemaField * FA_ACCTHSHSET_Field = new schemaField(this);
	schemaField * WIPMATSET_Field = new schemaField(this);
	schemaField * MA_SHPHSHSET_Field = new schemaField(this);
	schemaField * DELREC_Field = new schemaField(this);
	schemaField * MA_TXRTHSHSET_Field = new schemaField(this);
	schemaField * FSCSET_Field = new schemaField(this);
	schemaField * AP_BATCHREC_Field = new schemaField(this);
	schemaField * DRMTRSET_Field = new schemaField(this);
	schemaField * MA_SODSPNLSET_Field = new schemaField(this);
	schemaField * MA_BILPRTABSET_Field = new schemaField(this);
	schemaField * WKCRTGSET_Field = new schemaField(this);
	schemaField * GL_OOLINKSET_Field = new schemaField(this);
	schemaField * DELRCTSET_Field = new schemaField(this);
	schemaField * ACSTREC_Field = new schemaField(this);
	schemaField * WIPREC_Field = new schemaField(this);
	schemaField * MA_PNOTINVREC_Field = new schemaField(this);
	schemaField * AP_VNDREC_Field = new schemaField(this);
	schemaField * WIPWOHSET_Field = new schemaField(this);
	schemaField * MA_STERSAMSET_Field = new schemaField(this);
	schemaField * AP_BCHHOLDSET_Field = new schemaField(this);
	schemaField * GL_ACCTREC_Field = new schemaField(this);
	schemaField * ACTOPSET_Field = new schemaField(this);
	schemaField * WOHVARSET_Field = new schemaField(this);
	schemaField * MA_FLDREC_Field = new schemaField(this);
	schemaField * GL_VPFRSET_Field = new schemaField(this);
	schemaField * MA_INDREC_Field = new schemaField(this);
	schemaField * PRTFAMSET_Field = new schemaField(this);
	schemaField * CDLCONSET_Field = new schemaField(this);
	schemaField * FLDSET_Field = new schemaField(this);
	schemaField * MA_COMOCOMOCLSET_Field = new schemaField(this);
	schemaField * FA_PROJREC_Field = new schemaField(this);
	schemaField * MA_RSNHSHSET_Field = new schemaField(this);
	schemaField * MA_INHPOSTSET_Field = new schemaField(this);
	schemaField * MA_QUOHQUODSET_Field = new schemaField(this);
	schemaField * MA_CMHSPNLSET_Field = new schemaField(this);
	schemaField * ED_TPREC_Field = new schemaField(this);
	schemaField * WIPMETSET_Field = new schemaField(this);
	schemaField * AP_PROJHSHSET_Field = new schemaField(this);
	schemaField * TRKREC_Field = new schemaField(this);
	schemaField * MA_SODREC_Field = new schemaField(this);
	schemaField * AP_VNOTEREC_Field = new schemaField(this);
	schemaField * SODREC_Field = new schemaField(this);
	schemaField * MA_ACCTPOSTSET_Field = new schemaField(this);
	schemaField * AP_VCHPOSTSET_Field = new schemaField(this);
	schemaField * AP_SEARCHHSHSET_Field = new schemaField(this);
	schemaField * GL_PROJAPSET_Field = new schemaField(this);
	schemaField * EMPLABPYSET_Field = new schemaField(this);
	schemaField * RTGREC_Field = new schemaField(this);
	schemaField * MA_DMHREC_Field = new schemaField(this);
	schemaField * MA_STERREC_Field = new schemaField(this);
	schemaField * FA_PROJHSHSET_Field = new schemaField(this);
	schemaField * MA_PRPTFCPRTABSET_Field = new schemaField(this);
	schemaField * POHPODSET_Field = new schemaField(this);
	schemaField * GL_PROJAMTSET_Field = new schemaField(this);
	schemaField * RESHSHSET_Field = new schemaField(this);
	schemaField * MA_SHPCOMCSET_Field = new schemaField(this);
	schemaField * GL_ACCTDESCSET_Field = new schemaField(this);
	schemaField * AP_PNOTHSHSET_Field = new schemaField(this);
	schemaField * GL_FPFRSET_Field = new schemaField(this);
	schemaField * MRLMRHSET_Field = new schemaField(this);
	schemaField * GL_ARPT_HREC_Field = new schemaField(this);
	schemaField * MA_TXINHSET_Field = new schemaField(this);
	schemaField * MA_CHGDCOMOCLSET_Field = new schemaField(this);
	schemaField * GL_ABUDREC_Field = new schemaField(this);
	schemaField * BYDREC_Field = new schemaField(this);
	schemaField * ACTREC_Field = new schemaField(this);
	schemaField * MA_INHPRTSET_Field = new schemaField(this);
	schemaField * MA_SHDPREC_Field = new schemaField(this);
	schemaField * GL_FPOFFPROJSET_Field = new schemaField(this);
	schemaField * MA_POSTHSHSET_Field = new schemaField(this);
	schemaField * GL_JVREC_Field = new schemaField(this);
	schemaField * AP_SEARCHSRTSET_Field = new schemaField(this);
	schemaField * MA_PRODCOMOSET_Field = new schemaField(this);
	schemaField * PRTQOHSET_Field = new schemaField(this);
	schemaField * PONREC_Field = new schemaField(this);
	schemaField * BORREC_Field = new schemaField(this);
	schemaField * MA_PARTREC_Field = new schemaField(this);
	schemaField * ECCREC_Field = new schemaField(this);
	schemaField * MA_SODQUODSET_Field = new schemaField(this);
	schemaField * MA_CMDMREC_Field = new schemaField(this);
	schemaField * AP_VNDVCHSET_Field = new schemaField(this);
	schemaField * PRTHSHSET_Field = new schemaField(this);
	schemaField * MA_STGHSHSET_Field = new schemaField(this);
	schemaField * GL_FPOFFACCTSET_Field = new schemaField(this);
	schemaField * MA_PARTOPTSET_Field = new schemaField(this);
	schemaField * FRTHSHSET_Field = new schemaField(this);
	schemaField * GL_CLEARSET_Field = new schemaField(this);
	schemaField * OPCPRTSET_Field = new schemaField(this);
	schemaField * LOTHSHSET_Field = new schemaField(this);
	schemaField * MA_SOCATHSHSET_Field = new schemaField(this);
	schemaField * GL_OPLINKSET_Field = new schemaField(this);
	schemaField * CURREC_Field = new schemaField(this);
	schemaField * MA_FRTREC_Field = new schemaField(this);
	schemaField * MA_CMHDMHLSET_Field = new schemaField(this);
	schemaField * GL_VPHSHSET_Field = new schemaField(this);
	schemaField * PODPOPSET_Field = new schemaField(this);
	schemaField * ED_ENTAUDSET_Field = new schemaField(this);
	schemaField * CDLCOPSET_Field = new schemaField(this);
	schemaField * WOHACLSET_Field = new schemaField(this);
	schemaField * INVLOCSET_Field = new schemaField(this);
	schemaField * MA_INHWOPOSTSET_Field = new schemaField(this);
	schemaField * MA_DMHSPISET_Field = new schemaField(this);
	schemaField * MA_BILCMHSET_Field = new schemaField(this);
	schemaField * CPRREC_Field = new schemaField(this);
	schemaField * RCTMREC_Field = new schemaField(this);
	schemaField * MA_PRODGLTABSET_Field = new schemaField(this);
	schemaField * MA_INHHSHSET_Field = new schemaField(this);
	schemaField * COHHSHSET_Field = new schemaField(this);
	schemaField * GL_LINKDESCSET_Field = new schemaField(this);
	schemaField * WIPRATSET_Field = new schemaField(this);
	schemaField * VMCHSHSET_Field = new schemaField(this);
	schemaField * PRTSRTSET_Field = new schemaField(this);
	schemaField * LOTACSTSET_Field = new schemaField(this);
	schemaField * MA_CHGDCOMCLSET_Field = new schemaField(this);
	schemaField * ED_ENTPRDXRFSET_Field = new schemaField(this);
	schemaField * FA_ACCTREC_Field = new schemaField(this);
	schemaField * MFGSET_Field = new schemaField(this);
	schemaField * MA_APCREC_Field = new schemaField(this);
	schemaField * PODDELSET_Field = new schemaField(this);
	schemaField * ECOSET_Field = new schemaField(this);
	schemaField * CDAREC_Field = new schemaField(this);
	schemaField * MA_PLINPRODSET_Field = new schemaField(this);
	schemaField * MA_CHGHHSHSET_Field = new schemaField(this);
	schemaField * AP_POPREC_Field = new schemaField(this);
	schemaField * AP_PROJPOSTSET_Field = new schemaField(this);
	schemaField * MA_PFAMPLINSET_Field = new schemaField(this);
	schemaField * WARREC_Field = new schemaField(this);
	schemaField * CUREXREC_Field = new schemaField(this);
	schemaField * RQDREC_Field = new schemaField(this);
	schemaField * POHHSHSET_Field = new schemaField(this);
	schemaField * PRTREC_Field = new schemaField(this);
	schemaField * AP_BNKHSHSET_Field = new schemaField(this);
	schemaField * ACTPOSET_Field = new schemaField(this);
	schemaField * MA_BILSREC_Field = new schemaField(this);
	schemaField * MTRREC_Field = new schemaField(this);
	schemaField * AP_POHPOHSET_Field = new schemaField(this);
	schemaField * SPDSET_Field = new schemaField(this);
	schemaField * MA_BILINHSET_Field = new schemaField(this);
	schemaField * MA_FRTTREC_Field = new schemaField(this);
	schemaField * MA_DMHSPNLSET_Field = new schemaField(this);
	schemaField * EMPHSHSET_Field = new schemaField(this);
	schemaField * ACTDLSET_Field = new schemaField(this);
	schemaField * GL_FPTOPROJSET_Field = new schemaField(this);
	schemaField * MA_INTHSHSET_Field = new schemaField(this);
	schemaField * GL_VPNUMSET_Field = new schemaField(this);
	schemaField * GL_PROJPOSTSET_Field = new schemaField(this);
	schemaField * POHBOLLSET_Field = new schemaField(this);
	schemaField * GL_MOLINKSET_Field = new schemaField(this);
	schemaField * MA_SERHSHSET_Field = new schemaField(this);
	schemaField * BOLHSHSET_Field = new schemaField(this);
	schemaField * ED_PRDXRFREC_Field = new schemaField(this);
	schemaField * GL_FOLINKSET_Field = new schemaField(this);
	schemaField * MA_PRODHSHSET_Field = new schemaField(this);
	schemaField * AP_BNKOPENSET_Field = new schemaField(this);
	schemaField * DRLABSET_Field = new schemaField(this);
	schemaField * MA_CHGDREC_Field = new schemaField(this);
	schemaField * AP_INVRCTSET_Field = new schemaField(this);
	schemaField * SOHHSH2SET_Field = new schemaField(this);
	schemaField * BOLLREC_Field = new schemaField(this);
	schemaField * MA_DMHHSHSET_Field = new schemaField(this);
	schemaField * PRTMATSET_Field = new schemaField(this);
	schemaField * MA_BILCTBILSET_Field = new schemaField(this);
	schemaField * REFREC_Field = new schemaField(this);
	schemaField * COHCDLSET_Field = new schemaField(this);
	schemaField * IDHSHSET_Field = new schemaField(this);
	schemaField * GENREC_Field = new schemaField(this);
	schemaField * ENGHSHSET_Field = new schemaField(this);
	schemaField * COHREC_Field = new schemaField(this);
	schemaField * RQHHSHSET_Field = new schemaField(this);
	schemaField * ACTOOSET_Field = new schemaField(this);
	schemaField * AP_INVREC_Field = new schemaField(this);
	schemaField * ACTDFASET_Field = new schemaField(this);
	schemaField * MA_TXLREC_Field = new schemaField(this);
	schemaField * AP_VCHPNOTVCHSET_Field = new schemaField(this);
	schemaField * AP_SEARCHVNDSET_Field = new schemaField(this);
	schemaField * MA_CMDCOMOSET_Field = new schemaField(this);
	schemaField * OPNPOHSET_Field = new schemaField(this);
	schemaField * MA_INTREC_Field = new schemaField(this);
	schemaField * ECOHSHSET_Field = new schemaField(this);
	schemaField * MA_PFAMHSHSET_Field = new schemaField(this);
	schemaField * AP_ACCTREC_Field = new schemaField(this);
	schemaField * PRHREC_Field = new schemaField(this);
	schemaField * WIPJOBSET_Field = new schemaField(this);
	schemaField * MA_SHDREC_Field = new schemaField(this);
	schemaField * ENGENDSET_Field = new schemaField(this);
	schemaField * VENPRHSET_Field = new schemaField(this);
	schemaField * CDLREC_Field = new schemaField(this);
	schemaField * CDACDPSET_Field = new schemaField(this);
	schemaField * GL_PRPTDESCSET_Field = new schemaField(this);
	schemaField * MA_SHDSPISET_Field = new schemaField(this);
	schemaField * INVREC_Field = new schemaField(this);
	schemaField * MA_CHGHREC_Field = new schemaField(this);
	schemaField * GL_REPROJSET_Field = new schemaField(this);
	schemaField * WIPHSHSET_Field = new schemaField(this);
	schemaField * PRTPRDSET_Field = new schemaField(this);
	schemaField * PRTSODSET_Field = new schemaField(this);
	schemaField * MA_SPNREC_Field = new schemaField(this);
	schemaField * LOCREC_Field = new schemaField(this);
	schemaField * AP_CHKNOTSET_Field = new schemaField(this);
	schemaField * MA_CMHINHLSET_Field = new schemaField(this);
	schemaField * WIPSET_Field = new schemaField(this);
	schemaField * GL_VPTOACCTSET_Field = new schemaField(this);
	schemaField * IDPRHSET_Field = new schemaField(this);
	schemaField * MA_SERREC_Field = new schemaField(this);
	schemaField * MA_SODOPTSET_Field = new schemaField(this);
	schemaField * MA_GLPTHSHSET_Field = new schemaField(this);
	schemaField * MA_SHPREC_Field = new schemaField(this);
	schemaField * MFGREC_Field = new schemaField(this);
	schemaField * PRTINTSET_Field = new schemaField(this);
	schemaField * MA_SHDPSERSET_Field = new schemaField(this);
	schemaField * MA_TXCMHSET_Field = new schemaField(this);
	schemaField * MA_ACCTPPDSET_Field = new schemaField(this);
	schemaField * GL_REHSHSET_Field = new schemaField(this);
	schemaField * AP_PAYPLTSET_Field = new schemaField(this);
	schemaField * MA_BILREC_Field = new schemaField(this);
	schemaField * SPDREC_Field = new schemaField(this);
	schemaField * PAYHSHSET_Field = new schemaField(this);
	schemaField * MA_CMHREC_Field = new schemaField(this);
	schemaField * MA_CMDSPISET_Field = new schemaField(this);
	schemaField * OPCHSHSET_Field = new schemaField(this);
	schemaField * MRQREC_Field = new schemaField(this);
	schemaField * MA_PAYTDREC_Field = new schemaField(this);
	schemaField * GL_ACCTAMTSET_Field = new schemaField(this);
	schemaField * MA_RSNREC_Field = new schemaField(this);
	schemaField * LABREC_Field = new schemaField(this);
	schemaField * MA_CMHHSHSET_Field = new schemaField(this);
	schemaField * PRTDESSET_Field = new schemaField(this);
	schemaField * GL_PRPT_DREC_Field = new schemaField(this);
	schemaField * MA_INHUPDSET_Field = new schemaField(this);
	schemaField * GL_PROJBUDSET_Field = new schemaField(this);
	schemaField * MA_ACCTPRVARSET_Field = new schemaField(this);
	schemaField * EMPLABSET_Field = new schemaField(this);
	schemaField * GL_JVDESCSET_Field = new schemaField(this);
	schemaField * AP_RECPAYPOSTSET_Field = new schemaField(this);
	schemaField * PRHPONSET_Field = new schemaField(this);
	schemaField * MA_ACTSTGSET_Field = new schemaField(this);
	schemaField * MA_COMCLREC_Field = new schemaField(this);
	schemaField * FLGREC_Field = new schemaField(this);
	schemaField * MA_SOHHSHSET_Field = new schemaField(this);
	schemaField * MA_SHPCOMOSET_Field = new schemaField(this);
	schemaField * AP_RECPAYHSHSET_Field = new schemaField(this);
	schemaField * GL_FISCHSHSET_Field = new schemaField(this);
	schemaField * MA_ACCTLINDSET_Field = new schemaField(this);
	schemaField * MA_SOHINHSET_Field = new schemaField(this);
	schemaField * AP_BNKVNDSET_Field = new schemaField(this);
	schemaField * AP_INVVCHSET_Field = new schemaField(this);
	schemaField * MA_SHHSODSET_Field = new schemaField(this);
	schemaField * GL_VPBATSET_Field = new schemaField(this);
	schemaField * GL_FP_DREC_Field = new schemaField(this);
	schemaField * GL_VPDENACCTSET_Field = new schemaField(this);
	schemaField * GL_ARPTDESCSET_Field = new schemaField(this);
	schemaField * GL_PROJMASET_Field = new schemaField(this);
	schemaField * MA_SHPSHPSSET_Field = new schemaField(this);
	schemaField * MA_SODSTGPSET_Field = new schemaField(this);
	schemaField * PRTMRHSET_Field = new schemaField(this);
	schemaField * MA_PRTABREC_Field = new schemaField(this);
	schemaField * PFAMREC_Field = new schemaField(this);
	schemaField * AP_1099REC_Field = new schemaField(this);
	schemaField * GL_TRDESCSET_Field = new schemaField(this);
	schemaField * TOOHSHSET_Field = new schemaField(this);
	schemaField * GL_ACCTBUDSET_Field = new schemaField(this);
	schemaField * AP_POHHSHSET_Field = new schemaField(this);
	schemaField * MA_PROJHSHSET_Field = new schemaField(this);
	schemaField * ENCREC_Field = new schemaField(this);
	schemaField * ED_ENTDOCSET_Field = new schemaField(this);
	schemaField * MA_TXSOHSET_Field = new schemaField(this);
	schemaField * PRHCPRSET_Field = new schemaField(this);
	schemaField * ECCSET_Field = new schemaField(this);
	schemaField * MA_CMDSPNLSET_Field = new schemaField(this);
	schemaField * GL_PROJHSHSET_Field = new schemaField(this);
	schemaField * LOCSET_Field = new schemaField(this);
	schemaField * GL_BATCHSHSET_Field = new schemaField(this);
	schemaField * MA_ACCTHSHSET_Field = new schemaField(this);
	schemaField * GL_MCLINKSET_Field = new schemaField(this);
	schemaField * USGREC_Field = new schemaField(this);
	schemaField * MA_BILDMHSET_Field = new schemaField(this);
	schemaField * MA_SOHCOMCSET_Field = new schemaField(this);
	schemaField * MA_SPNHSHSET_Field = new schemaField(this);
	schemaField * MA_SAMSAMSSET_Field = new schemaField(this);
	schemaField * MA_BILBILSSET_Field = new schemaField(this);
	schemaField * MA_QUODHSHSET_Field = new schemaField(this);
	schemaField * AP_VATPOST2SET_Field = new schemaField(this);
	schemaField * GL_JVHSHSET_Field = new schemaField(this);
	schemaField * AP_BEFTPMTSET_Field = new schemaField(this);
	schemaField * ACTLOCSET_Field = new schemaField(this);
	schemaField * AP_HDRSET_Field = new schemaField(this);
	schemaField * MISREC_Field = new schemaField(this);
	schemaField * MA_ACCTREC_Field = new schemaField(this);
	schemaField * AP_VCHPOHSET_Field = new schemaField(this);
	schemaField * AP_ACCTTYPEREC_Field = new schemaField(this);
	schemaField * BOLBOLLSET_Field = new schemaField(this);
	schemaField * AP_VATHSHSET_Field = new schemaField(this);
	schemaField * GL_ARPTSET_Field = new schemaField(this);
	schemaField * AP_RECPAYNOTESET_Field = new schemaField(this);
	schemaField * MA_INHLREC_Field = new schemaField(this);
	schemaField * MA_CMHPOSTSET_Field = new schemaField(this);
	schemaField * GL_VPOFFPROJSET_Field = new schemaField(this);
	schemaField * AP_CHKPOSTSET_Field = new schemaField(this);
	schemaField * MA_TXTHSHSET_Field = new schemaField(this);
	schemaField * MA_INDMCMDMSET_Field = new schemaField(this);
	schemaField * GL_FPHSHSET_Field = new schemaField(this);
	schemaField * MA_INHAPCSET_Field = new schemaField(this);
	schemaField * GL_ARPT_NREC_Field = new schemaField(this);
	schemaField * MA_QUOHHSHSET_Field = new schemaField(this);
	schemaField * MA_STGPREC_Field = new schemaField(this);
	schemaField * FLDREC_Field = new schemaField(this);
	schemaField * RESBORSET_Field = new schemaField(this);
	schemaField * VENSHPSET_Field = new schemaField(this);
	schemaField * MA_PRCTPRTABSET_Field = new schemaField(this);
	schemaField * MA_PRODPRODSSET_Field = new schemaField(this);
	schemaField * CODREC_Field = new schemaField(this);
	schemaField * MA_QUODOPTSET_Field = new schemaField(this);
	schemaField * MA_CPOREC_Field = new schemaField(this);
	schemaField * MA_CMHCMDSET_Field = new schemaField(this);
	schemaField * ED_AUDDOCSET_Field = new schemaField(this);
	schemaField * WKCTRKSET_Field = new schemaField(this);
	schemaField * MA_OPTREC_Field = new schemaField(this);
	schemaField * GL_ACCTMASET_Field = new schemaField(this);
	schemaField * MA_PRPTPRTABSET_Field = new schemaField(this);
	schemaField * MA_INDCOMOSET_Field = new schemaField(this);
	schemaField * PRTMTRSET_Field = new schemaField(this);
	schemaField * MA_ACCTCOGSSET_Field = new schemaField(this);
	schemaField * MA_INHSPNLSET_Field = new schemaField(this);
	schemaField * SOHSODSET_Field = new schemaField(this);
	schemaField * MA_SVINDREC_Field = new schemaField(this);
	schemaField * CRLABSET_Field = new schemaField(this);
	schemaField * GENHSHSET_Field = new schemaField(this);
	schemaField * TOOTWUSET_Field = new schemaField(this);
	schemaField * MA_ACCTTRASET_Field = new schemaField(this);
	schemaField * ED_AUDHSHSET_Field = new schemaField(this);
	schemaField * MA_SOHSHHSET_Field = new schemaField(this);
	schemaField * GL_PAMTREC_Field = new schemaField(this);
	schemaField * ED_ENTREC_Field = new schemaField(this);
	schemaField * MA_INHSPISET_Field = new schemaField(this);
	schemaField * GL_LINK_NREC_Field = new schemaField(this);
	schemaField * GL_FPFRACCTSET_Field = new schemaField(this);
	schemaField * AP_POHVCHREC_Field = new schemaField(this);
	schemaField * MA_CTERSHPSET_Field = new schemaField(this);
	schemaField * CSTREC_Field = new schemaField(this);
	schemaField * AP_PPVNDSET_Field = new schemaField(this);
	schemaField * AP_INVHSHSET_Field = new schemaField(this);
	schemaField * IDREC_Field = new schemaField(this);
	schemaField * MA_SHHHSHSET_Field = new schemaField(this);
	schemaField * MA_INHREC_Field = new schemaField(this);
	schemaField * IRCTREC_Field = new schemaField(this);
	schemaField * MA_CPOHSHSET_Field = new schemaField(this);
	schemaField * MA_PLINREC_Field = new schemaField(this);
	schemaField * BOLRCTSET_Field = new schemaField(this);
	schemaField * AP_INVRCTRCTMSET_Field = new schemaField(this);
	schemaField * GL_RE_HREC_Field = new schemaField(this);
	schemaField * MA_STGPHSHSET_Field = new schemaField(this);
	schemaField * GL_ISBSREC_Field = new schemaField(this);
	schemaField * AUTREC_Field = new schemaField(this);
	schemaField * MA_SPNSPNLSET_Field = new schemaField(this);
	schemaField * SPNHSHSET_Field = new schemaField(this);
	schemaField * MA_SPIREC_Field = new schemaField(this);
	schemaField * GL_VPTOSET_Field = new schemaField(this);
	schemaField * MA_INHSVINHSET_Field = new schemaField(this);
	schemaField * MA_ACTCOGSSET_Field = new schemaField(this);
	schemaField * MA_SHDSPNLSET_Field = new schemaField(this);
	schemaField * AP_VNDBOLSET_Field = new schemaField(this);
	schemaField * VENIRCTSET_Field = new schemaField(this);
	schemaField * AP_CNOTEREC_Field = new schemaField(this);
	schemaField * AP_POHREC_Field = new schemaField(this);
	schemaField * AP_PNOTREC_Field = new schemaField(this);
	schemaField * MISMISREFSET_Field = new schemaField(this);
	schemaField * MA_PRODFCPRTABSET_Field = new schemaField(this);
	schemaField * MA_PRODOPTSET_Field = new schemaField(this);
	schemaField * AP_RCTHSHSET_Field = new schemaField(this);
	schemaField * GL_FPFRLINKREC_Field = new schemaField(this);
	schemaField * MA_HLDHSHSET_Field = new schemaField(this);
	schemaField * MA_INDMREC_Field = new schemaField(this);
	schemaField * MA_PAYTHSHSET_Field = new schemaField(this);
	schemaField * MA_POSTREC_Field = new schemaField(this);
	schemaField * GL_ABUDSET_Field = new schemaField(this);
	schemaField * RCTREC_Field = new schemaField(this);
	schemaField * MA_SODCOMOSET_Field = new schemaField(this);
	schemaField * MA_SAMCOMOSET_Field = new schemaField(this);
	schemaField * WKCLABSET_Field = new schemaField(this);
	schemaField * MA_GLPTREC_Field = new schemaField(this);
	schemaField * TRKTRDSET_Field = new schemaField(this);
	schemaField * GL_ARPTHSHSET_Field = new schemaField(this);
	schemaField * MA_GLCTBILSET_Field = new schemaField(this);
	schemaField * PRTPFAMSET_Field = new schemaField(this);
	schemaField * AP_BOLHSHSET_Field = new schemaField(this);
	schemaField * COPREC_Field = new schemaField(this);
	schemaField * VENRCTSET_Field = new schemaField(this);
	schemaField * MA_INHCMHSET_Field = new schemaField(this);
	schemaField * MA_BILCTREC_Field = new schemaField(this);
	schemaField * ED_ENTMMHSHSET_Field = new schemaField(this);
	schemaField * MA_GLPTPRODSET_Field = new schemaField(this);
	schemaField * ED_TPHSHSET_Field = new schemaField(this);
	schemaField * MA_INDCMDSET_Field = new schemaField(this);
	schemaField * MA_BILCIASET_Field = new schemaField(this);
	schemaField * MA_CMHVDPOSTSET_Field = new schemaField(this);
	schemaField * MA_PRODSREC_Field = new schemaField(this);
	schemaField * PRTPODSET_Field = new schemaField(this);
	schemaField * INVLOC2SET_Field = new schemaField(this);
	schemaField * WOHMOVSET_Field = new schemaField(this);
	schemaField * FSCREC_Field = new schemaField(this);
	schemaField * AP_INVRCTMREC_Field = new schemaField(this);
	schemaField * AP_DMVCHREC_Field = new schemaField(this);
	schemaField * GL_ACCTPOSTSET_Field = new schemaField(this);
	schemaField * COMSET_Field = new schemaField(this);
	schemaField * AP_VATPOSTSET_Field = new schemaField(this);
	schemaField * RQHREC_Field = new schemaField(this);
	schemaField * MA_SAMHSHSET_Field = new schemaField(this);
	schemaField * MA_INHINDSET_Field = new schemaField(this);
	schemaField * CURCUREXSET_Field = new schemaField(this);
	schemaField * AP_BTCHEFTREC_Field = new schemaField(this);
	schemaField * PODPRDSET_Field = new schemaField(this);
	schemaField * GL_ISBSACCTSET_Field = new schemaField(this);
	schemaField * GL_VPFRLINKREC_Field = new schemaField(this);
	schemaField * MA_COMCCOMCLSET_Field = new schemaField(this);
	schemaField * PFAMHSHSET_Field = new schemaField(this);
	schemaField * AP_POSTREC_Field = new schemaField(this);
	schemaField * MRHMRQSET_Field = new schemaField(this);
	schemaField * MA_STGSTGPSET_Field = new schemaField(this);
	schemaField * GL_VPNUMACCTSET_Field = new schemaField(this);
	schemaField * AP_BNKCHKSET_Field = new schemaField(this);
	schemaField * GL_RE_NREC_Field = new schemaField(this);
	schemaField * MA_INHINHLSET_Field = new schemaField(this);
	schemaField * WKCHSHSET_Field = new schemaField(this);
	schemaField * MA_INHPNOTINVSET_Field = new schemaField(this);
	schemaField * PODPONSET_Field = new schemaField(this);
	schemaField * AP_CHKHSHSET_Field = new schemaField(this);
	schemaField * GL_PROJ_NREC_Field = new schemaField(this);
	schemaField * CLDPOHSET_Field = new schemaField(this);
	schemaField * AP_VNDHOLDSET_Field = new schemaField(this);
	schemaField * VENHSHSET_Field = new schemaField(this);
	schemaField * ACTFOSET_Field = new schemaField(this);
	schemaField * PRTRCTSET_Field = new schemaField(this);
	schemaField * GL_VPTOPROJSET_Field = new schemaField(this);
	schemaField * MA_SVINDSPNLSET_Field = new schemaField(this);
	schemaField * MA_PRTABHSHSET_Field = new schemaField(this);
	schemaField * GL_VP_HREC_Field = new schemaField(this);
	schemaField * MA_SAMCOMCSET_Field = new schemaField(this);
	schemaField * MA_SOHSPISET_Field = new schemaField(this);
	schemaField * MA_SPNSPNDSET_Field = new schemaField(this);
	schemaField * GL_PBUDREC_Field = new schemaField(this);
	schemaField * MA_SOHPRTSET_Field = new schemaField(this);
	schemaField * EMPSET_Field = new schemaField(this);
	schemaField * MRLREC_Field = new schemaField(this);
	schemaField * AUTPRHSET_Field = new schemaField(this);
	schemaField * GL_VPFRACCTSET_Field = new schemaField(this);
	schemaField * MA_PRODCMDSET_Field = new schemaField(this);
	schemaField * MA_SAMSREC_Field = new schemaField(this);
	schemaField * MA_QUODSPNLSET_Field = new schemaField(this);
	schemaField * MATREC_Field = new schemaField(this);
	schemaField * MA_BILHSHSET_Field = new schemaField(this);
	schemaField * AP_BEFTHSHSET_Field = new schemaField(this);
	schemaField * AP_BOLLREC_Field = new schemaField(this);
	schemaField * MA_QUOHCOMOSET_Field = new schemaField(this);
	schemaField * PODREC_Field = new schemaField(this);
	schemaField * AP_PDCHKSET_Field = new schemaField(this);
	schemaField * CDPCDPLSET_Field = new schemaField(this);
	schemaField * PUNREC_Field = new schemaField(this);
	schemaField * AP_ACCTHSHSET_Field = new schemaField(this);
	schemaField * FSCHSHSET_Field = new schemaField(this);
	schemaField * MA_CIAPOSTSET_Field = new schemaField(this);
	schemaField * AP_VCHREC_Field = new schemaField(this);
	schemaField * MA_QUODSPISET_Field = new schemaField(this);
	schemaField * MA_CMDREC_Field = new schemaField(this);
	schemaField * CDPREC_Field = new schemaField(this);
	schemaField * MA_ACCTUPPDSET_Field = new schemaField(this);
	schemaField * ED_ENTHSHSET_Field = new schemaField(this);
	schemaField * MA_INDMSPISET_Field = new schemaField(this);
	schemaField * GL_JVTRSET_Field = new schemaField(this);
	schemaField * MA_PRODTOPSET_Field = new schemaField(this);
	schemaField * AP_PMTHSHSET_Field = new schemaField(this);
	schemaField * AP_PROJREC_Field = new schemaField(this);
	schemaField * MA_USRFLDSET_Field = new schemaField(this);
	schemaField * PRDPONSET_Field = new schemaField(this);
	schemaField * MA_PRODPRTABSET_Field = new schemaField(this);
	schemaField * MA_PRPTREC_Field = new schemaField(this);
	schemaField * GL_ACCTAPSET_Field = new schemaField(this);
	schemaField * AP_VNDINVSET_Field = new schemaField(this);
	schemaField * GL_AAMTREC_Field = new schemaField(this);
	schemaField * RESREC_Field = new schemaField(this);
	schemaField * BOMREC_Field = new schemaField(this);
	schemaField * POHREC_Field = new schemaField(this);
	schemaField * MA_TXHSHSET_Field = new schemaField(this);
	schemaField * ACTPODSET_Field = new schemaField(this);
	schemaField * MA_INTINHSET_Field = new schemaField(this);
	schemaField * POPREC_Field = new schemaField(this);
	schemaField * GL_VPDENSET_Field = new schemaField(this);
	schemaField * MA_CMDMSPNLSET_Field = new schemaField(this);
	schemaField * POCOHSRTSET_Field = new schemaField(this);
	schemaField * MA_ACCTPRTDSET_Field = new schemaField(this);
	schemaField * GL_TR_NREC_Field = new schemaField(this);
	schemaField * AP_VATVTPSTSET_Field = new schemaField(this);
	schemaField * RCTRCTMSET_Field = new schemaField(this);
	schemaField * AP_PMTREC_Field = new schemaField(this);
	schemaField * MA_SVINHSVINDSET_Field = new schemaField(this);
	schemaField * ED_TPPRDXRFSET_Field = new schemaField(this);
	schemaField * ECOREC_Field = new schemaField(this);
	schemaField * AP_INVRCTREC_Field = new schemaField(this);
	schemaField * MA_SODSPISET_Field = new schemaField(this);
	schemaField * AP_APPOSTSET_Field = new schemaField(this);
	schemaField * WIPCONSET_Field = new schemaField(this);
	schemaField * GL_PROJREC_Field = new schemaField(this);
	schemaField * MA_TXTTXRTSET_Field = new schemaField(this);
	schemaField * GL_FISCTRSET_Field = new schemaField(this);
	schemaField * GL_PRPT_HREC_Field = new schemaField(this);
	schemaField * GL_VOLINKSET_Field = new schemaField(this);
	schemaField * MA_SOHQUOHSET_Field = new schemaField(this);
	schemaField * MA_PLINHSHSET_Field = new schemaField(this);
	schemaField * GL_PRPTSET_Field = new schemaField(this);
	schemaField * WIPMIXSET_Field = new schemaField(this);
	schemaField * VENVMCSET_Field = new schemaField(this);
	schemaField * GL_LINKMFGSET_Field = new schemaField(this);
	schemaField * MA_GLCTREC_Field = new schemaField(this);
	schemaField * MA_PRCTHSHSET_Field = new schemaField(this);
	schemaField * FRTBOLSET_Field = new schemaField(this);
	schemaField * AP_BANKREC_Field = new schemaField(this);
	schemaField * MA_PAYTPAYTDSET_Field = new schemaField(this);
	schemaField * GL_FPDESCSET_Field = new schemaField(this);
	schemaField * AP_VCHHSHSET_Field = new schemaField(this);
	schemaField * WARSET_Field = new schemaField(this);
	schemaField * AP_DMVCHSET_Field = new schemaField(this);
	schemaField * AUTAPPSET_Field = new schemaField(this);
	schemaField * MA_GLTABREC_Field = new schemaField(this);
	schemaField * MA_QUOHREC_Field = new schemaField(this);
	schemaField * PRTMISSET_Field = new schemaField(this);
	schemaField * VENCOHSET_Field = new schemaField(this);
	schemaField * WIPLOTSET_Field = new schemaField(this);
	schemaField * MA_SOHSODSET_Field = new schemaField(this);
	schemaField * AP_RCTINRCSET_Field = new schemaField(this);
	schemaField * AP_CASHBNKSET_Field = new schemaField(this);
	schemaField * MA_TXREC_Field = new schemaField(this);
	schemaField * MA_INHCRPOSTSET_Field = new schemaField(this);
	schemaField * SPNREC_Field = new schemaField(this);
	schemaField * PRTBORSET_Field = new schemaField(this);
	schemaField * MA_QUOHSPNLSET_Field = new schemaField(this);
	schemaField * MA_SOHUPDSET_Field = new schemaField(this);
	schemaField * AP_DISCBNKSET_Field = new schemaField(this);
	schemaField * BYDHSHSET_Field = new schemaField(this);
	schemaField * MA_INHINDMSET_Field = new schemaField(this);
	schemaField * GL_FP_HREC_Field = new schemaField(this);
	schemaField * MA_PARTTOPSET_Field = new schemaField(this);
	schemaField * GL_REDESCSET_Field = new schemaField(this);
	schemaField * GL_VPOFFACCTSET_Field = new schemaField(this);
	schemaField * AP_BOLBOLLSET_Field = new schemaField(this);
	schemaField * MA_SPFREC_Field = new schemaField(this);
	schemaField * BOLREC_Field = new schemaField(this);
	schemaField * CURHSHSET_Field = new schemaField(this);
	schemaField * MA_PRODSODSET_Field = new schemaField(this);
	schemaField * REFSET_Field = new schemaField(this);
	schemaField * MA_INDSPISET_Field = new schemaField(this);
	schemaField * LOTREC_Field = new schemaField(this);
	schemaField * INVHSHSET_Field = new schemaField(this);
	schemaField * MA_QUOHPRTSET_Field = new schemaField(this);
	schemaField * MA_CTERREC_Field = new schemaField(this);
	schemaField * MA_PAKPRTSET_Field = new schemaField(this);
	schemaField * PRHPRDSET_Field = new schemaField(this);
	schemaField * MSCREC_Field = new schemaField(this);
	schemaField * WOHMISSET_Field = new schemaField(this);
	schemaField * AP_PAYOR1099REC_Field = new schemaField(this);
	schemaField * MA_DMHLREC_Field = new schemaField(this);
	schemaField * CCSRTSET_Field = new schemaField(this);
	schemaField * CODHSHSET_Field = new schemaField(this);
	schemaField * AP_RCTREC_Field = new schemaField(this);
	schemaField * GL_REACCTSET_Field = new schemaField(this);
	schemaField * MA_GLCTHSHSET_Field = new schemaField(this);
	schemaField * ED_TPENTSET_Field = new schemaField(this);
	schemaField * MA_GLPTTABSET_Field = new schemaField(this);
	schemaField * DFAHSHSET_Field = new schemaField(this);
	schemaField * GL_ACCT_NREC_Field = new schemaField(this);
	schemaField * FSCCALREC_Field = new schemaField(this);
	schemaField * CDPLREC_Field = new schemaField(this);
	schemaField * AP_RCTSET_Field = new schemaField(this);
	schemaField * RTGTRKSET_Field = new schemaField(this);
	schemaField * CDLCDASET_Field = new schemaField(this);
	schemaField * MA_STATETXSET_Field = new schemaField(this);
	schemaField * MA_SHHSHDSET_Field = new schemaField(this);
	schemaField * TOOREC_Field = new schemaField(this);
	schemaField * ACTPCSET_Field = new schemaField(this);
	schemaField * MA_PAYTREC_Field = new schemaField(this);
	schemaField * AP_APVNDSET_Field = new schemaField(this);
	schemaField * RTDSET_Field = new schemaField(this);
	schemaField * MA_SOHSPNLSET_Field = new schemaField(this);
	schemaField * PRTRQDSET_Field = new schemaField(this);
	schemaField * ACTMOSET_Field = new schemaField(this);
	schemaField * AP_PLTREC_Field = new schemaField(this);
	schemaField * GL_LINKHSHSET_Field = new schemaField(this);
	schemaField * AP_PMTNOTTRANSSET_Field = new schemaField(this);
	schemaField * AP_VND1099SET_Field = new schemaField(this);
	schemaField * MA_PROJREC_Field = new schemaField(this);
	schemaField * MA_REMREC_Field = new schemaField(this);
	schemaField * AP_POHVCHSET_Field = new schemaField(this);
	schemaField * SODINTSET_Field = new schemaField(this);
	schemaField * CSTSET_Field = new schemaField(this);
	schemaField * MA_SODSHDSET_Field = new schemaField(this);
	schemaField * FORREC_Field = new schemaField(this);
	schemaField * BOMSET_Field = new schemaField(this);
	schemaField * TRDREC_Field = new schemaField(this);
	schemaField * RTGTWUSET_Field = new schemaField(this);
	schemaField * MA_PARTHSHSET_Field = new schemaField(this);
	schemaField * POHPRNTSET_Field = new schemaField(this);
	schemaField * MA_SHPSREC_Field = new schemaField(this);
	schemaField * MA_STGREC_Field = new schemaField(this);
	schemaField * MRLHSHSET_Field = new schemaField(this);
	schemaField * AP_PAYOR1099HSHSET_Field = new schemaField(this);
	schemaField * GL_FPBATSET_Field = new schemaField(this);
	schemaField * PRTCDLSET_Field = new schemaField(this);
	schemaField * MA_FRTTHSHSET_Field = new schemaField(this);
	schemaField * MA_CMHPRTSET_Field = new schemaField(this);
	schemaField * GL_BATCHREC_Field = new schemaField(this);
	schemaField * MA_POSTSPISET_Field = new schemaField(this);
	schemaField * MA_CPOSOHSET_Field = new schemaField(this);
	schemaField * MA_USRREC_Field = new schemaField(this);
	schemaField * MA_TXRTTXLSET_Field = new schemaField(this);
	schemaField * MA_QUODREC_Field = new schemaField(this);
	schemaField * WOHMSCSET_Field = new schemaField(this);
	schemaField * MA_CIAAPCSET_Field = new schemaField(this);
	schemaField * MA_BILCTHSHSET_Field = new schemaField(this);
	schemaField * MA_SPFHSHSET_Field = new schemaField(this);
	schemaField * MA_TXTREC_Field = new schemaField(this);
	schemaField * MA_CMHCMDMSET_Field = new schemaField(this);
	schemaField * MA_PRTSTGPSET_Field = new schemaField(this);
	schemaField * MA_BILSODSET_Field = new schemaField(this);
	schemaField * AP_ACCTTYPESET_Field = new schemaField(this);
	schemaField * MA_SAMREC_Field = new schemaField(this);
	schemaField * DESREC_Field = new schemaField(this);
	schemaField * COHCONSET_Field = new schemaField(this);
	schemaField * ENDREC_Field = new schemaField(this);
	schemaField * WARHSHSET_Field = new schemaField(this);
	schemaField * MA_PNOTREC_Field = new schemaField(this);
	schemaField * WOHTRKSET_Field = new schemaField(this);
	schemaField * MA_SPNLREC_Field = new schemaField(this);
	schemaField * CRMTRSET_Field = new schemaField(this);
	schemaField * MA_CHGHCHGDSET_Field = new schemaField(this);
	schemaField * GL_ABUDHSHSET_Field = new schemaField(this);
	schemaField * DFAREC_Field = new schemaField(this);
	schemaField * PRTPUNSET_Field = new schemaField(this);
	schemaField * MA_SHDSHDPSET_Field = new schemaField(this);
	schemaField * EMPREC_Field = new schemaField(this);
	schemaField * ED_PRDHSHSET_Field = new schemaField(this);
	schemaField * MISREFREC_Field = new schemaField(this);
	schemaField * LOCLOTSET_Field = new schemaField(this);
	schemaField * GL_ACCTFASET_Field = new schemaField(this);
	schemaField * PRTVMCSET_Field = new schemaField(this);
	schemaField * MA_USRHSHSET_Field = new schemaField(this);
	schemaField * QOHREC_Field = new schemaField(this);
	schemaField * AP_RECPAYVCHSET_Field = new schemaField(this);
	schemaField * GL_DLLINKSET_Field = new schemaField(this);
	schemaField * MA_SVINHREC_Field = new schemaField(this);
	schemaField * MA_INHCOMCSET_Field = new schemaField(this);
	schemaField * INDFREC_Field = new schemaField(this);
	schemaField * PODPOMSET_Field = new schemaField(this);
	schemaField * GL_TRREC_Field = new schemaField(this);
	schemaField * MA_PRODREC_Field = new schemaField(this);
	schemaField * MA_ACCTRETSET_Field = new schemaField(this);
	schemaField * AP_PNOTVCHREC_Field = new schemaField(this);
	schemaField * SODFAMSET_Field = new schemaField(this);
	schemaField * AP_VTPSTREC_Field = new schemaField(this);
	schemaField * SOHHSHSET_Field = new schemaField(this);
	schemaField * PRDREC_Field = new schemaField(this);
	schemaField * GL_RE_DREC_Field = new schemaField(this);
	schemaField * FLGHSHSET_Field = new schemaField(this);
	schemaField * GL_ACCTRPTSET_Field = new schemaField(this);
	schemaField * MA_CPOINHSET_Field = new schemaField(this);
	schemaField * MA_TXRTREC_Field = new schemaField(this);
	schemaField * MA_CMHSPISET_Field = new schemaField(this);
	schemaField * MA_TXTXLSET_Field = new schemaField(this);
	schemaField * ACTMCSET_Field = new schemaField(this);
	schemaField * MA_STERHSHSET_Field = new schemaField(this);
	schemaField * AP_PAYPLTREC_Field = new schemaField(this);
	schemaField * GL_PROJDESCSET_Field = new schemaField(this);
	schemaField * GL_REBATSET_Field = new schemaField(this);
	schemaField * AP_VCHVTPSTSET_Field = new schemaField(this);
	schemaField * PRTUSGSET_Field = new schemaField(this);
	schemaField * AUTHSHSET_Field = new schemaField(this);
	schemaField * WIPMBOSET_Field = new schemaField(this);
	schemaField * GL_TRHSHSET_Field = new schemaField(this);
	schemaField * MA_INHVDPOSTSET_Field = new schemaField(this);
	schemaField * MA_DMHCMHSET_Field = new schemaField(this);
	schemaField * MA_STATEHSHSET_Field = new schemaField(this);
	schemaField * VMCREC_Field = new schemaField(this);
	schemaField * AP_PDCHKREC_Field = new schemaField(this);
	schemaField * GL_PRPTHSHSET_Field = new schemaField(this);
	schemaField * APPREC_Field = new schemaField(this);
	schemaField * AP_VCHCHKSET_Field = new schemaField(this);
	schemaField * RCTNOHSHSET_Field = new schemaField(this);
	schemaField * GL_VPNUM_DREC_Field = new schemaField(this);
	schemaField * MA_PNOTPNOTINVSET_Field = new schemaField(this);
	schemaField * POHCPRSET_Field = new schemaField(this);
	schemaField * AP_VCHNOTSET_Field = new schemaField(this);
	schemaField * WIPBYPSET_Field = new schemaField(this);
	schemaField * MA_HLDREC_Field = new schemaField(this);
	schemaField * AP_VNDPLTSET_Field = new schemaField(this);
	schemaField * PRTMRPSET_Field = new schemaField(this);
	schemaField * GL_ABUDNUMSET_Field = new schemaField(this);
	schemaField * ENGENCSET_Field = new schemaField(this);
	schemaField * POHPOPSET_Field = new schemaField(this);
	schemaField * MA_CMDMSPISET_Field = new schemaField(this);
	schemaField * AP_BOLREC_Field = new schemaField(this);
	schemaField * GL_VP_DREC_Field = new schemaField(this);
	schemaField * GL_PROJFASET_Field = new schemaField(this);
	schemaField * ACTVOSET_Field = new schemaField(this);
	schemaField * MA_SODCHGDSET_Field = new schemaField(this);
	schemaField * INTSET_Field = new schemaField(this);
	schemaField * MA_SHHSPISET_Field = new schemaField(this);
	schemaField * MA_FCPRTABHSHSET_Field = new schemaField(this);
	schemaField * MA_INDMSPNLSET_Field = new schemaField(this);
	schemaField * WARQOHSET_Field = new schemaField(this);
	schemaField * PRHAPPSET_Field = new schemaField(this);
	schemaField * AP_VCHDMSET_Field = new schemaField(this);
	schemaField * GL_VP_NREC_Field = new schemaField(this);
	schemaField * MA_SVINDSPISET_Field = new schemaField(this);
	schemaField * PRTRTGSET_Field = new schemaField(this);
	schemaField * PRHHSHSET_Field = new schemaField(this);
	schemaField * AP_RECPAYREC_Field = new schemaField(this);
	schemaField * MA_SHHPRTSET_Field = new schemaField(this);
	schemaField * PRTENDSET_Field = new schemaField(this);
	schemaField * MA_SOHREC_Field = new schemaField(this);
	schemaField * ED_DOCXRFREC_Field = new schemaField(this);
	schemaField * MA_SHHSPNLSET_Field = new schemaField(this);
	schemaField * CONREC_Field = new schemaField(this);
	schemaField * GL_ABUDNUMREC_Field = new schemaField(this);
	schemaField * AP_CHKREC_Field = new schemaField(this);
	schemaField * TWUREC_Field = new schemaField(this);
	schemaField * MA_QUOHUPDSET_Field = new schemaField(this);
	schemaField * MA_CTERHSHSET_Field = new schemaField(this);
	schemaField * PODRCTSET_Field = new schemaField(this);
	schemaField * MA_CIAREC_Field = new schemaField(this);
	schemaField * GL_TRPOSTSET_Field = new schemaField(this);
	schemaField * MA_ACCTSALESET_Field = new schemaField(this);
	schemaField * MA_PROJPOSTSET_Field = new schemaField(this);
	schemaField * PRTWOHSET_Field = new schemaField(this);
	schemaField * MA_WARSTGSET_Field = new schemaField(this);
	schemaField * GL_POSTREC_Field = new schemaField(this);
	schemaField * AP_VCHBOLLSET_Field = new schemaField(this);
	schemaField * GL_JV_NREC_Field = new schemaField(this);
	schemaField * MA_PRCTBILSET_Field = new schemaField(this);
	schemaField * AP_ACCTSET_Field = new schemaField(this);
	schemaField * AP_PNOTPNOTVCHSET_Field = new schemaField(this);
	schemaField * VARREC_Field = new schemaField(this);
	schemaField * GL_FISCREC_Field = new schemaField(this);
	schemaField * FSCCALSET_Field = new schemaField(this);
	schemaField * MA_PRODCHGDSET_Field = new schemaField(this);
	schemaField * POHPONSET_Field = new schemaField(this);
	schemaField * MA_TOPREC_Field = new schemaField(this);
	schemaField * MA_GLTABHSHSET_Field = new schemaField(this);
	schemaField * PAYREC_Field = new schemaField(this);
	schemaField * MA_SPNDREC_Field = new schemaField(this);
	schemaField * MA_REMHSHSET_Field = new schemaField(this);
	AP_VNDVENSET_Field->setSchemaField("AP_VNDVENSET",enumAP_VNDVENSET);
	MRHREC_Field->setSchemaField("MRHREC",enumMRHREC);
	GL_ACCTHSHSET_Field->setSchemaField("GL_ACCTHSHSET",enumGL_ACCTHSHSET);
	MA_BILSHPSET_Field->setSchemaField("MA_BILSHPSET",enumMA_BILSHPSET);
	FRTREC_Field->setSchemaField("FRTREC",enumFRTREC);
	WIPYLDSET_Field->setSchemaField("WIPYLDSET",enumWIPYLDSET);
	WKCREC_Field->setSchemaField("WKCREC",enumWKCREC);
	MA_SHPQUOHSET_Field->setSchemaField("MA_SHPQUOHSET",enumMA_SHPQUOHSET);
	MA_RSNCHGHSET_Field->setSchemaField("MA_RSNCHGHSET",enumMA_RSNCHGHSET);
	BOLOPENSET_Field->setSchemaField("BOLOPENSET",enumBOLOPENSET);
	AP_VATREC_Field->setSchemaField("AP_VATREC",enumAP_VATREC);
	MA_PFAMREC_Field->setSchemaField("MA_PFAMREC",enumMA_PFAMREC);
	FSCCALHSHSET_Field->setSchemaField("FSCCALHSHSET",enumFSCCALHSHSET);
	AP_DEFACCTSET_Field->setSchemaField("AP_DEFACCTSET",enumAP_DEFACCTSET);
	MA_BILPOSTSET_Field->setSchemaField("MA_BILPOSTSET",enumMA_BILPOSTSET);
	AP_HDRVNDSET_Field->setSchemaField("AP_HDRVNDSET",enumAP_HDRVNDSET);
	AP_SEARCHREC_Field->setSchemaField("AP_SEARCHREC",enumAP_SEARCHREC);
	MA_SHPSOHSET_Field->setSchemaField("MA_SHPSOHSET",enumMA_SHPSOHSET);
	DRVARSET_Field->setSchemaField("DRVARSET",enumDRVARSET);
	MA_COMCREC_Field->setSchemaField("MA_COMCREC",enumMA_COMCREC);
	MA_PRCTREC_Field->setSchemaField("MA_PRCTREC",enumMA_PRCTREC);
	MA_SODINDSET_Field->setSchemaField("MA_SODINDSET",enumMA_SODINDSET);
	MA_INHDMHSET_Field->setSchemaField("MA_INHDMHSET",enumMA_INHDMHSET);
	MA_STATEREC_Field->setSchemaField("MA_STATEREC",enumMA_STATEREC);
	PRTFORSET_Field->setSchemaField("PRTFORSET",enumPRTFORSET);
	MA_PRTTOPSET_Field->setSchemaField("MA_PRTTOPSET",enumMA_PRTTOPSET);
	PAYSET_Field->setSchemaField("PAYSET",enumPAYSET);
	WOHEALSET_Field->setSchemaField("WOHEALSET",enumWOHEALSET);
	MA_GLCTTABSET_Field->setSchemaField("MA_GLCTTABSET",enumMA_GLCTTABSET);
	AP_BATCHHSHSET_Field->setSchemaField("AP_BATCHHSHSET",enumAP_BATCHHSHSET);
	MA_PRPTPRODSET_Field->setSchemaField("MA_PRPTPRODSET",enumMA_PRPTPRODSET);
	AP_BNKVCHSET_Field->setSchemaField("AP_BNKVCHSET",enumAP_BNKVCHSET);
	MA_FRTHSHSET_Field->setSchemaField("MA_FRTHSHSET",enumMA_FRTHSHSET);
	MA_RSNCMHSET_Field->setSchemaField("MA_RSNCMHSET",enumMA_RSNCMHSET);
	POHPRHSET_Field->setSchemaField("POHPRHSET",enumPOHPRHSET);
	AP_VENHOLDSET_Field->setSchemaField("AP_VENHOLDSET",enumAP_VENHOLDSET);
	GL_FP_NREC_Field->setSchemaField("GL_FP_NREC",enumGL_FP_NREC);
	WARINTSET_Field->setSchemaField("WARINTSET",enumWARINTSET);
	GL_FPTOPCTSET_Field->setSchemaField("GL_FPTOPCTSET",enumGL_FPTOPCTSET);
	ED_AUDREC_Field->setSchemaField("ED_AUDREC",enumED_AUDREC);
	VENREC_Field->setSchemaField("VENREC",enumVENREC);
	MA_PRPTHSHSET_Field->setSchemaField("MA_PRPTHSHSET",enumMA_PRPTHSHSET);
	MA_SOHPBSET_Field->setSchemaField("MA_SOHPBSET",enumMA_SOHPBSET);
	GL_LINKREC_Field->setSchemaField("GL_LINKREC",enumGL_LINKREC);
	AP_RECNOTEREC_Field->setSchemaField("AP_RECNOTEREC",enumAP_RECNOTEREC);
	GL_BATCHSET_Field->setSchemaField("GL_BATCHSET",enumGL_BATCHSET);
	OPCREC_Field->setSchemaField("OPCREC",enumOPCREC);
	AP_VNDCHKSET_Field->setSchemaField("AP_VNDCHKSET",enumAP_VNDCHKSET);
	POMREC_Field->setSchemaField("POMREC",enumPOMREC);
	GL_VPDEN_DREC_Field->setSchemaField("GL_VPDEN_DREC",enumGL_VPDEN_DREC);
	WOHREC_Field->setSchemaField("WOHREC",enumWOHREC);
	GL_PRPT_NREC_Field->setSchemaField("GL_PRPT_NREC",enumGL_PRPT_NREC);
	MA_PNOTHSHSET_Field->setSchemaField("MA_PNOTHSHSET",enumMA_PNOTHSHSET);
	GL_FPTOACCTSET_Field->setSchemaField("GL_FPTOACCTSET",enumGL_FPTOACCTSET);
	WIPEFFSET_Field->setSchemaField("WIPEFFSET",enumWIPEFFSET);
	GL_ISBSHSHSET_Field->setSchemaField("GL_ISBSHSHSET",enumGL_ISBSHSHSET);
	AP_POPSET_Field->setSchemaField("AP_POPSET",enumAP_POPSET);
	MA_FCPRTABREC_Field->setSchemaField("MA_FCPRTABREC",enumMA_FCPRTABREC);
	MA_QUOHSPISET_Field->setSchemaField("MA_QUOHSPISET",enumMA_QUOHSPISET);
	MA_SOCATREC_Field->setSchemaField("MA_SOCATREC",enumMA_SOCATREC);
	AP_VENVCHSET_Field->setSchemaField("AP_VENVCHSET",enumAP_VENVCHSET);
	INDFHSHSET_Field->setSchemaField("INDFHSHSET",enumINDFHSHSET);
	GL_REAMTSET_Field->setSchemaField("GL_REAMTSET",enumGL_REAMTSET);
	RQHRQDSET_Field->setSchemaField("RQHRQDSET",enumRQHRQDSET);
	GL_ARPT_DREC_Field->setSchemaField("GL_ARPT_DREC",enumGL_ARPT_DREC);
	MA_INHAPCPOSTSET_Field->setSchemaField("MA_INHAPCPOSTSET",enumMA_INHAPCPOSTSET);
	MA_COMOREC_Field->setSchemaField("MA_COMOREC",enumMA_COMOREC);
	AP_VNDHSHSET_Field->setSchemaField("AP_VNDHSHSET",enumAP_VNDHSHSET);
	CRVARSET_Field->setSchemaField("CRVARSET",enumCRVARSET);
	MA_PRCTFCPRTABSET_Field->setSchemaField("MA_PRCTFCPRTABSET",enumMA_PRCTFCPRTABSET);
	WOHHSHSET_Field->setSchemaField("WOHHSHSET",enumWOHHSHSET);
	MA_INDSPNLSET_Field->setSchemaField("MA_INDSPNLSET",enumMA_INDSPNLSET);
	PODIRCTSET_Field->setSchemaField("PODIRCTSET",enumPODIRCTSET);
	MA_BILFCPRTABSET_Field->setSchemaField("MA_BILFCPRTABSET",enumMA_BILFCPRTABSET);
	SOHREC_Field->setSchemaField("SOHREC",enumSOHREC);
	AP_BCHVCHSET_Field->setSchemaField("AP_BCHVCHSET",enumAP_BCHVCHSET);
	ACTHSHSET_Field->setSchemaField("ACTHSHSET",enumACTHSHSET);
	AP_HDRREC_Field->setSchemaField("AP_HDRREC",enumAP_HDRREC);
	GL_VPDESCSET_Field->setSchemaField("GL_VPDESCSET",enumGL_VPDESCSET);
	PRTIRCTSET_Field->setSchemaField("PRTIRCTSET",enumPRTIRCTSET);
	GENPRTSET_Field->setSchemaField("GENPRTSET",enumGENPRTSET);
	WARLOCSET_Field->setSchemaField("WARLOCSET",enumWARLOCSET);
	RTDREC_Field->setSchemaField("RTDREC",enumRTDREC);
	MA_DMHDMHLSET_Field->setSchemaField("MA_DMHDMHLSET",enumMA_DMHDMHLSET);
	AP_RECPAYCHNSET_Field->setSchemaField("AP_RECPAYCHNSET",enumAP_RECPAYCHNSET);
	IRCTSET_Field->setSchemaField("IRCTSET",enumIRCTSET);
	GL_PROJRPTSET_Field->setSchemaField("GL_PROJRPTSET",enumGL_PROJRPTSET);
	AP_RECPOSTREC_Field->setSchemaField("AP_RECPOSTREC",enumAP_RECPOSTREC);
	PRTYLDSET_Field->setSchemaField("PRTYLDSET",enumPRTYLDSET);
	POHRCTSET_Field->setSchemaField("POHRCTSET",enumPOHRCTSET);
	MA_INHSHHSET_Field->setSchemaField("MA_INHSHHSET",enumMA_INHSHHSET);
	RCTHSHSET_Field->setSchemaField("RCTHSHSET",enumRCTHSHSET);
	VENBILSET_Field->setSchemaField("VENBILSET",enumVENBILSET);
	MA_APCSPISET_Field->setSchemaField("MA_APCSPISET",enumMA_APCSPISET);
	INTREC_Field->setSchemaField("INTREC",enumINTREC);
	MA_SHHREC_Field->setSchemaField("MA_SHHREC",enumMA_SHHREC);
	MA_ACCTSRTSET_Field->setSchemaField("MA_ACCTSRTSET",enumMA_ACCTSRTSET);
	MA_COMOCLREC_Field->setSchemaField("MA_COMOCLREC",enumMA_COMOCLREC);
	MA_SHDSERSET_Field->setSchemaField("MA_SHDSERSET",enumMA_SHDSERSET);
	ENGREC_Field->setSchemaField("ENGREC",enumENGREC);
	FA_ACCTHSHSET_Field->setSchemaField("FA_ACCTHSHSET",enumFA_ACCTHSHSET);
	WIPMATSET_Field->setSchemaField("WIPMATSET",enumWIPMATSET);
	MA_SHPHSHSET_Field->setSchemaField("MA_SHPHSHSET",enumMA_SHPHSHSET);
	DELREC_Field->setSchemaField("DELREC",enumDELREC);
	MA_TXRTHSHSET_Field->setSchemaField("MA_TXRTHSHSET",enumMA_TXRTHSHSET);
	FSCSET_Field->setSchemaField("FSCSET",enumFSCSET);
	AP_BATCHREC_Field->setSchemaField("AP_BATCHREC",enumAP_BATCHREC);
	DRMTRSET_Field->setSchemaField("DRMTRSET",enumDRMTRSET);
	MA_SODSPNLSET_Field->setSchemaField("MA_SODSPNLSET",enumMA_SODSPNLSET);
	MA_BILPRTABSET_Field->setSchemaField("MA_BILPRTABSET",enumMA_BILPRTABSET);
	WKCRTGSET_Field->setSchemaField("WKCRTGSET",enumWKCRTGSET);
	GL_OOLINKSET_Field->setSchemaField("GL_OOLINKSET",enumGL_OOLINKSET);
	DELRCTSET_Field->setSchemaField("DELRCTSET",enumDELRCTSET);
	ACSTREC_Field->setSchemaField("ACSTREC",enumACSTREC);
	WIPREC_Field->setSchemaField("WIPREC",enumWIPREC);
	MA_PNOTINVREC_Field->setSchemaField("MA_PNOTINVREC",enumMA_PNOTINVREC);
	AP_VNDREC_Field->setSchemaField("AP_VNDREC",enumAP_VNDREC);
	WIPWOHSET_Field->setSchemaField("WIPWOHSET",enumWIPWOHSET);
	MA_STERSAMSET_Field->setSchemaField("MA_STERSAMSET",enumMA_STERSAMSET);
	AP_BCHHOLDSET_Field->setSchemaField("AP_BCHHOLDSET",enumAP_BCHHOLDSET);
	GL_ACCTREC_Field->setSchemaField("GL_ACCTREC",enumGL_ACCTREC);
	ACTOPSET_Field->setSchemaField("ACTOPSET",enumACTOPSET);
	WOHVARSET_Field->setSchemaField("WOHVARSET",enumWOHVARSET);
	MA_FLDREC_Field->setSchemaField("MA_FLDREC",enumMA_FLDREC);
	GL_VPFRSET_Field->setSchemaField("GL_VPFRSET",enumGL_VPFRSET);
	MA_INDREC_Field->setSchemaField("MA_INDREC",enumMA_INDREC);
	PRTFAMSET_Field->setSchemaField("PRTFAMSET",enumPRTFAMSET);
	CDLCONSET_Field->setSchemaField("CDLCONSET",enumCDLCONSET);
	FLDSET_Field->setSchemaField("FLDSET",enumFLDSET);
	MA_COMOCOMOCLSET_Field->setSchemaField("MA_COMOCOMOCLSET",enumMA_COMOCOMOCLSET);
	FA_PROJREC_Field->setSchemaField("FA_PROJREC",enumFA_PROJREC);
	MA_RSNHSHSET_Field->setSchemaField("MA_RSNHSHSET",enumMA_RSNHSHSET);
	MA_INHPOSTSET_Field->setSchemaField("MA_INHPOSTSET",enumMA_INHPOSTSET);
	MA_QUOHQUODSET_Field->setSchemaField("MA_QUOHQUODSET",enumMA_QUOHQUODSET);
	MA_CMHSPNLSET_Field->setSchemaField("MA_CMHSPNLSET",enumMA_CMHSPNLSET);
	ED_TPREC_Field->setSchemaField("ED_TPREC",enumED_TPREC);
	WIPMETSET_Field->setSchemaField("WIPMETSET",enumWIPMETSET);
	AP_PROJHSHSET_Field->setSchemaField("AP_PROJHSHSET",enumAP_PROJHSHSET);
	TRKREC_Field->setSchemaField("TRKREC",enumTRKREC);
	MA_SODREC_Field->setSchemaField("MA_SODREC",enumMA_SODREC);
	AP_VNOTEREC_Field->setSchemaField("AP_VNOTEREC",enumAP_VNOTEREC);
	SODREC_Field->setSchemaField("SODREC",enumSODREC);
	MA_ACCTPOSTSET_Field->setSchemaField("MA_ACCTPOSTSET",enumMA_ACCTPOSTSET);
	AP_VCHPOSTSET_Field->setSchemaField("AP_VCHPOSTSET",enumAP_VCHPOSTSET);
	AP_SEARCHHSHSET_Field->setSchemaField("AP_SEARCHHSHSET",enumAP_SEARCHHSHSET);
	GL_PROJAPSET_Field->setSchemaField("GL_PROJAPSET",enumGL_PROJAPSET);
	EMPLABPYSET_Field->setSchemaField("EMPLABPYSET",enumEMPLABPYSET);
	RTGREC_Field->setSchemaField("RTGREC",enumRTGREC);
	MA_DMHREC_Field->setSchemaField("MA_DMHREC",enumMA_DMHREC);
	MA_STERREC_Field->setSchemaField("MA_STERREC",enumMA_STERREC);
	FA_PROJHSHSET_Field->setSchemaField("FA_PROJHSHSET",enumFA_PROJHSHSET);
	MA_PRPTFCPRTABSET_Field->setSchemaField("MA_PRPTFCPRTABSET",enumMA_PRPTFCPRTABSET);
	POHPODSET_Field->setSchemaField("POHPODSET",enumPOHPODSET);
	GL_PROJAMTSET_Field->setSchemaField("GL_PROJAMTSET",enumGL_PROJAMTSET);
	RESHSHSET_Field->setSchemaField("RESHSHSET",enumRESHSHSET);
	MA_SHPCOMCSET_Field->setSchemaField("MA_SHPCOMCSET",enumMA_SHPCOMCSET);
	GL_ACCTDESCSET_Field->setSchemaField("GL_ACCTDESCSET",enumGL_ACCTDESCSET);
	AP_PNOTHSHSET_Field->setSchemaField("AP_PNOTHSHSET",enumAP_PNOTHSHSET);
	GL_FPFRSET_Field->setSchemaField("GL_FPFRSET",enumGL_FPFRSET);
	MRLMRHSET_Field->setSchemaField("MRLMRHSET",enumMRLMRHSET);
	GL_ARPT_HREC_Field->setSchemaField("GL_ARPT_HREC",enumGL_ARPT_HREC);
	MA_TXINHSET_Field->setSchemaField("MA_TXINHSET",enumMA_TXINHSET);
	MA_CHGDCOMOCLSET_Field->setSchemaField("MA_CHGDCOMOCLSET",enumMA_CHGDCOMOCLSET);
	GL_ABUDREC_Field->setSchemaField("GL_ABUDREC",enumGL_ABUDREC);
	BYDREC_Field->setSchemaField("BYDREC",enumBYDREC);
	ACTREC_Field->setSchemaField("ACTREC",enumACTREC);
	MA_INHPRTSET_Field->setSchemaField("MA_INHPRTSET",enumMA_INHPRTSET);
	MA_SHDPREC_Field->setSchemaField("MA_SHDPREC",enumMA_SHDPREC);
	GL_FPOFFPROJSET_Field->setSchemaField("GL_FPOFFPROJSET",enumGL_FPOFFPROJSET);
	MA_POSTHSHSET_Field->setSchemaField("MA_POSTHSHSET",enumMA_POSTHSHSET);
	GL_JVREC_Field->setSchemaField("GL_JVREC",enumGL_JVREC);
	AP_SEARCHSRTSET_Field->setSchemaField("AP_SEARCHSRTSET",enumAP_SEARCHSRTSET);
	MA_PRODCOMOSET_Field->setSchemaField("MA_PRODCOMOSET",enumMA_PRODCOMOSET);
	PRTQOHSET_Field->setSchemaField("PRTQOHSET",enumPRTQOHSET);
	PONREC_Field->setSchemaField("PONREC",enumPONREC);
	BORREC_Field->setSchemaField("BORREC",enumBORREC);
	MA_PARTREC_Field->setSchemaField("MA_PARTREC",enumMA_PARTREC);
	ECCREC_Field->setSchemaField("ECCREC",enumECCREC);
	MA_SODQUODSET_Field->setSchemaField("MA_SODQUODSET",enumMA_SODQUODSET);
	MA_CMDMREC_Field->setSchemaField("MA_CMDMREC",enumMA_CMDMREC);
	AP_VNDVCHSET_Field->setSchemaField("AP_VNDVCHSET",enumAP_VNDVCHSET);
	PRTHSHSET_Field->setSchemaField("PRTHSHSET",enumPRTHSHSET);
	MA_STGHSHSET_Field->setSchemaField("MA_STGHSHSET",enumMA_STGHSHSET);
	GL_FPOFFACCTSET_Field->setSchemaField("GL_FPOFFACCTSET",enumGL_FPOFFACCTSET);
	MA_PARTOPTSET_Field->setSchemaField("MA_PARTOPTSET",enumMA_PARTOPTSET);
	FRTHSHSET_Field->setSchemaField("FRTHSHSET",enumFRTHSHSET);
	GL_CLEARSET_Field->setSchemaField("GL_CLEARSET",enumGL_CLEARSET);
	OPCPRTSET_Field->setSchemaField("OPCPRTSET",enumOPCPRTSET);
	LOTHSHSET_Field->setSchemaField("LOTHSHSET",enumLOTHSHSET);
	MA_SOCATHSHSET_Field->setSchemaField("MA_SOCATHSHSET",enumMA_SOCATHSHSET);
	GL_OPLINKSET_Field->setSchemaField("GL_OPLINKSET",enumGL_OPLINKSET);
	CURREC_Field->setSchemaField("CURREC",enumCURREC);
	MA_FRTREC_Field->setSchemaField("MA_FRTREC",enumMA_FRTREC);
	MA_CMHDMHLSET_Field->setSchemaField("MA_CMHDMHLSET",enumMA_CMHDMHLSET);
	GL_VPHSHSET_Field->setSchemaField("GL_VPHSHSET",enumGL_VPHSHSET);
	PODPOPSET_Field->setSchemaField("PODPOPSET",enumPODPOPSET);
	ED_ENTAUDSET_Field->setSchemaField("ED_ENTAUDSET",enumED_ENTAUDSET);
	CDLCOPSET_Field->setSchemaField("CDLCOPSET",enumCDLCOPSET);
	WOHACLSET_Field->setSchemaField("WOHACLSET",enumWOHACLSET);
	INVLOCSET_Field->setSchemaField("INVLOCSET",enumINVLOCSET);
	MA_INHWOPOSTSET_Field->setSchemaField("MA_INHWOPOSTSET",enumMA_INHWOPOSTSET);
	MA_DMHSPISET_Field->setSchemaField("MA_DMHSPISET",enumMA_DMHSPISET);
	MA_BILCMHSET_Field->setSchemaField("MA_BILCMHSET",enumMA_BILCMHSET);
	CPRREC_Field->setSchemaField("CPRREC",enumCPRREC);
	RCTMREC_Field->setSchemaField("RCTMREC",enumRCTMREC);
	MA_PRODGLTABSET_Field->setSchemaField("MA_PRODGLTABSET",enumMA_PRODGLTABSET);
	MA_INHHSHSET_Field->setSchemaField("MA_INHHSHSET",enumMA_INHHSHSET);
	COHHSHSET_Field->setSchemaField("COHHSHSET",enumCOHHSHSET);
	GL_LINKDESCSET_Field->setSchemaField("GL_LINKDESCSET",enumGL_LINKDESCSET);
	WIPRATSET_Field->setSchemaField("WIPRATSET",enumWIPRATSET);
	VMCHSHSET_Field->setSchemaField("VMCHSHSET",enumVMCHSHSET);
	PRTSRTSET_Field->setSchemaField("PRTSRTSET",enumPRTSRTSET);
	LOTACSTSET_Field->setSchemaField("LOTACSTSET",enumLOTACSTSET);
	MA_CHGDCOMCLSET_Field->setSchemaField("MA_CHGDCOMCLSET",enumMA_CHGDCOMCLSET);
	ED_ENTPRDXRFSET_Field->setSchemaField("ED_ENTPRDXRFSET",enumED_ENTPRDXRFSET);
	FA_ACCTREC_Field->setSchemaField("FA_ACCTREC",enumFA_ACCTREC);
	MFGSET_Field->setSchemaField("MFGSET",enumMFGSET);
	MA_APCREC_Field->setSchemaField("MA_APCREC",enumMA_APCREC);
	PODDELSET_Field->setSchemaField("PODDELSET",enumPODDELSET);
	ECOSET_Field->setSchemaField("ECOSET",enumECOSET);
	CDAREC_Field->setSchemaField("CDAREC",enumCDAREC);
	MA_PLINPRODSET_Field->setSchemaField("MA_PLINPRODSET",enumMA_PLINPRODSET);
	MA_CHGHHSHSET_Field->setSchemaField("MA_CHGHHSHSET",enumMA_CHGHHSHSET);
	AP_POPREC_Field->setSchemaField("AP_POPREC",enumAP_POPREC);
	AP_PROJPOSTSET_Field->setSchemaField("AP_PROJPOSTSET",enumAP_PROJPOSTSET);
	MA_PFAMPLINSET_Field->setSchemaField("MA_PFAMPLINSET",enumMA_PFAMPLINSET);
	WARREC_Field->setSchemaField("WARREC",enumWARREC);
	CUREXREC_Field->setSchemaField("CUREXREC",enumCUREXREC);
	RQDREC_Field->setSchemaField("RQDREC",enumRQDREC);
	POHHSHSET_Field->setSchemaField("POHHSHSET",enumPOHHSHSET);
	PRTREC_Field->setSchemaField("PRTREC",enumPRTREC);
	AP_BNKHSHSET_Field->setSchemaField("AP_BNKHSHSET",enumAP_BNKHSHSET);
	ACTPOSET_Field->setSchemaField("ACTPOSET",enumACTPOSET);
	MA_BILSREC_Field->setSchemaField("MA_BILSREC",enumMA_BILSREC);
	MTRREC_Field->setSchemaField("MTRREC",enumMTRREC);
	AP_POHPOHSET_Field->setSchemaField("AP_POHPOHSET",enumAP_POHPOHSET);
	SPDSET_Field->setSchemaField("SPDSET",enumSPDSET);
	MA_BILINHSET_Field->setSchemaField("MA_BILINHSET",enumMA_BILINHSET);
	MA_FRTTREC_Field->setSchemaField("MA_FRTTREC",enumMA_FRTTREC);
	MA_DMHSPNLSET_Field->setSchemaField("MA_DMHSPNLSET",enumMA_DMHSPNLSET);
	EMPHSHSET_Field->setSchemaField("EMPHSHSET",enumEMPHSHSET);
	ACTDLSET_Field->setSchemaField("ACTDLSET",enumACTDLSET);
	GL_FPTOPROJSET_Field->setSchemaField("GL_FPTOPROJSET",enumGL_FPTOPROJSET);
	MA_INTHSHSET_Field->setSchemaField("MA_INTHSHSET",enumMA_INTHSHSET);
	GL_VPNUMSET_Field->setSchemaField("GL_VPNUMSET",enumGL_VPNUMSET);
	GL_PROJPOSTSET_Field->setSchemaField("GL_PROJPOSTSET",enumGL_PROJPOSTSET);
	POHBOLLSET_Field->setSchemaField("POHBOLLSET",enumPOHBOLLSET);
	GL_MOLINKSET_Field->setSchemaField("GL_MOLINKSET",enumGL_MOLINKSET);
	MA_SERHSHSET_Field->setSchemaField("MA_SERHSHSET",enumMA_SERHSHSET);
	BOLHSHSET_Field->setSchemaField("BOLHSHSET",enumBOLHSHSET);
	ED_PRDXRFREC_Field->setSchemaField("ED_PRDXRFREC",enumED_PRDXRFREC);
	GL_FOLINKSET_Field->setSchemaField("GL_FOLINKSET",enumGL_FOLINKSET);
	MA_PRODHSHSET_Field->setSchemaField("MA_PRODHSHSET",enumMA_PRODHSHSET);
	AP_BNKOPENSET_Field->setSchemaField("AP_BNKOPENSET",enumAP_BNKOPENSET);
	DRLABSET_Field->setSchemaField("DRLABSET",enumDRLABSET);
	MA_CHGDREC_Field->setSchemaField("MA_CHGDREC",enumMA_CHGDREC);
	AP_INVRCTSET_Field->setSchemaField("AP_INVRCTSET",enumAP_INVRCTSET);
	SOHHSH2SET_Field->setSchemaField("SOHHSH2SET",enumSOHHSH2SET);
	BOLLREC_Field->setSchemaField("BOLLREC",enumBOLLREC);
	MA_DMHHSHSET_Field->setSchemaField("MA_DMHHSHSET",enumMA_DMHHSHSET);
	PRTMATSET_Field->setSchemaField("PRTMATSET",enumPRTMATSET);
	MA_BILCTBILSET_Field->setSchemaField("MA_BILCTBILSET",enumMA_BILCTBILSET);
	REFREC_Field->setSchemaField("REFREC",enumREFREC);
	COHCDLSET_Field->setSchemaField("COHCDLSET",enumCOHCDLSET);
	IDHSHSET_Field->setSchemaField("IDHSHSET",enumIDHSHSET);
	GENREC_Field->setSchemaField("GENREC",enumGENREC);
	ENGHSHSET_Field->setSchemaField("ENGHSHSET",enumENGHSHSET);
	COHREC_Field->setSchemaField("COHREC",enumCOHREC);
	RQHHSHSET_Field->setSchemaField("RQHHSHSET",enumRQHHSHSET);
	ACTOOSET_Field->setSchemaField("ACTOOSET",enumACTOOSET);
	AP_INVREC_Field->setSchemaField("AP_INVREC",enumAP_INVREC);
	ACTDFASET_Field->setSchemaField("ACTDFASET",enumACTDFASET);
	MA_TXLREC_Field->setSchemaField("MA_TXLREC",enumMA_TXLREC);
	AP_VCHPNOTVCHSET_Field->setSchemaField("AP_VCHPNOTVCHSET",enumAP_VCHPNOTVCHSET);
	AP_SEARCHVNDSET_Field->setSchemaField("AP_SEARCHVNDSET",enumAP_SEARCHVNDSET);
	MA_CMDCOMOSET_Field->setSchemaField("MA_CMDCOMOSET",enumMA_CMDCOMOSET);
	OPNPOHSET_Field->setSchemaField("OPNPOHSET",enumOPNPOHSET);
	MA_INTREC_Field->setSchemaField("MA_INTREC",enumMA_INTREC);
	ECOHSHSET_Field->setSchemaField("ECOHSHSET",enumECOHSHSET);
	MA_PFAMHSHSET_Field->setSchemaField("MA_PFAMHSHSET",enumMA_PFAMHSHSET);
	AP_ACCTREC_Field->setSchemaField("AP_ACCTREC",enumAP_ACCTREC);
	PRHREC_Field->setSchemaField("PRHREC",enumPRHREC);
	WIPJOBSET_Field->setSchemaField("WIPJOBSET",enumWIPJOBSET);
	MA_SHDREC_Field->setSchemaField("MA_SHDREC",enumMA_SHDREC);
	ENGENDSET_Field->setSchemaField("ENGENDSET",enumENGENDSET);
	VENPRHSET_Field->setSchemaField("VENPRHSET",enumVENPRHSET);
	CDLREC_Field->setSchemaField("CDLREC",enumCDLREC);
	CDACDPSET_Field->setSchemaField("CDACDPSET",enumCDACDPSET);
	GL_PRPTDESCSET_Field->setSchemaField("GL_PRPTDESCSET",enumGL_PRPTDESCSET);
	MA_SHDSPISET_Field->setSchemaField("MA_SHDSPISET",enumMA_SHDSPISET);
	INVREC_Field->setSchemaField("INVREC",enumINVREC);
	MA_CHGHREC_Field->setSchemaField("MA_CHGHREC",enumMA_CHGHREC);
	GL_REPROJSET_Field->setSchemaField("GL_REPROJSET",enumGL_REPROJSET);
	WIPHSHSET_Field->setSchemaField("WIPHSHSET",enumWIPHSHSET);
	PRTPRDSET_Field->setSchemaField("PRTPRDSET",enumPRTPRDSET);
	PRTSODSET_Field->setSchemaField("PRTSODSET",enumPRTSODSET);
	MA_SPNREC_Field->setSchemaField("MA_SPNREC",enumMA_SPNREC);
	LOCREC_Field->setSchemaField("LOCREC",enumLOCREC);
	AP_CHKNOTSET_Field->setSchemaField("AP_CHKNOTSET",enumAP_CHKNOTSET);
	MA_CMHINHLSET_Field->setSchemaField("MA_CMHINHLSET",enumMA_CMHINHLSET);
	WIPSET_Field->setSchemaField("WIPSET",enumWIPSET);
	GL_VPTOACCTSET_Field->setSchemaField("GL_VPTOACCTSET",enumGL_VPTOACCTSET);
	IDPRHSET_Field->setSchemaField("IDPRHSET",enumIDPRHSET);
	MA_SERREC_Field->setSchemaField("MA_SERREC",enumMA_SERREC);
	MA_SODOPTSET_Field->setSchemaField("MA_SODOPTSET",enumMA_SODOPTSET);
	MA_GLPTHSHSET_Field->setSchemaField("MA_GLPTHSHSET",enumMA_GLPTHSHSET);
	MA_SHPREC_Field->setSchemaField("MA_SHPREC",enumMA_SHPREC);
	MFGREC_Field->setSchemaField("MFGREC",enumMFGREC);
	PRTINTSET_Field->setSchemaField("PRTINTSET",enumPRTINTSET);
	MA_SHDPSERSET_Field->setSchemaField("MA_SHDPSERSET",enumMA_SHDPSERSET);
	MA_TXCMHSET_Field->setSchemaField("MA_TXCMHSET",enumMA_TXCMHSET);
	MA_ACCTPPDSET_Field->setSchemaField("MA_ACCTPPDSET",enumMA_ACCTPPDSET);
	GL_REHSHSET_Field->setSchemaField("GL_REHSHSET",enumGL_REHSHSET);
	AP_PAYPLTSET_Field->setSchemaField("AP_PAYPLTSET",enumAP_PAYPLTSET);
	MA_BILREC_Field->setSchemaField("MA_BILREC",enumMA_BILREC);
	SPDREC_Field->setSchemaField("SPDREC",enumSPDREC);
	PAYHSHSET_Field->setSchemaField("PAYHSHSET",enumPAYHSHSET);
	MA_CMHREC_Field->setSchemaField("MA_CMHREC",enumMA_CMHREC);
	MA_CMDSPISET_Field->setSchemaField("MA_CMDSPISET",enumMA_CMDSPISET);
	OPCHSHSET_Field->setSchemaField("OPCHSHSET",enumOPCHSHSET);
	MRQREC_Field->setSchemaField("MRQREC",enumMRQREC);
	MA_PAYTDREC_Field->setSchemaField("MA_PAYTDREC",enumMA_PAYTDREC);
	GL_ACCTAMTSET_Field->setSchemaField("GL_ACCTAMTSET",enumGL_ACCTAMTSET);
	MA_RSNREC_Field->setSchemaField("MA_RSNREC",enumMA_RSNREC);
	LABREC_Field->setSchemaField("LABREC",enumLABREC);
	MA_CMHHSHSET_Field->setSchemaField("MA_CMHHSHSET",enumMA_CMHHSHSET);
	PRTDESSET_Field->setSchemaField("PRTDESSET",enumPRTDESSET);
	GL_PRPT_DREC_Field->setSchemaField("GL_PRPT_DREC",enumGL_PRPT_DREC);
	MA_INHUPDSET_Field->setSchemaField("MA_INHUPDSET",enumMA_INHUPDSET);
	GL_PROJBUDSET_Field->setSchemaField("GL_PROJBUDSET",enumGL_PROJBUDSET);
	MA_ACCTPRVARSET_Field->setSchemaField("MA_ACCTPRVARSET",enumMA_ACCTPRVARSET);
	EMPLABSET_Field->setSchemaField("EMPLABSET",enumEMPLABSET);
	GL_JVDESCSET_Field->setSchemaField("GL_JVDESCSET",enumGL_JVDESCSET);
	AP_RECPAYPOSTSET_Field->setSchemaField("AP_RECPAYPOSTSET",enumAP_RECPAYPOSTSET);
	PRHPONSET_Field->setSchemaField("PRHPONSET",enumPRHPONSET);
	MA_ACTSTGSET_Field->setSchemaField("MA_ACTSTGSET",enumMA_ACTSTGSET);
	MA_COMCLREC_Field->setSchemaField("MA_COMCLREC",enumMA_COMCLREC);
	FLGREC_Field->setSchemaField("FLGREC",enumFLGREC);
	MA_SOHHSHSET_Field->setSchemaField("MA_SOHHSHSET",enumMA_SOHHSHSET);
	MA_SHPCOMOSET_Field->setSchemaField("MA_SHPCOMOSET",enumMA_SHPCOMOSET);
	AP_RECPAYHSHSET_Field->setSchemaField("AP_RECPAYHSHSET",enumAP_RECPAYHSHSET);
	GL_FISCHSHSET_Field->setSchemaField("GL_FISCHSHSET",enumGL_FISCHSHSET);
	MA_ACCTLINDSET_Field->setSchemaField("MA_ACCTLINDSET",enumMA_ACCTLINDSET);
	MA_SOHINHSET_Field->setSchemaField("MA_SOHINHSET",enumMA_SOHINHSET);
	AP_BNKVNDSET_Field->setSchemaField("AP_BNKVNDSET",enumAP_BNKVNDSET);
	AP_INVVCHSET_Field->setSchemaField("AP_INVVCHSET",enumAP_INVVCHSET);
	MA_SHHSODSET_Field->setSchemaField("MA_SHHSODSET",enumMA_SHHSODSET);
	GL_VPBATSET_Field->setSchemaField("GL_VPBATSET",enumGL_VPBATSET);
	GL_FP_DREC_Field->setSchemaField("GL_FP_DREC",enumGL_FP_DREC);
	GL_VPDENACCTSET_Field->setSchemaField("GL_VPDENACCTSET",enumGL_VPDENACCTSET);
	GL_ARPTDESCSET_Field->setSchemaField("GL_ARPTDESCSET",enumGL_ARPTDESCSET);
	GL_PROJMASET_Field->setSchemaField("GL_PROJMASET",enumGL_PROJMASET);
	MA_SHPSHPSSET_Field->setSchemaField("MA_SHPSHPSSET",enumMA_SHPSHPSSET);
	MA_SODSTGPSET_Field->setSchemaField("MA_SODSTGPSET",enumMA_SODSTGPSET);
	PRTMRHSET_Field->setSchemaField("PRTMRHSET",enumPRTMRHSET);
	MA_PRTABREC_Field->setSchemaField("MA_PRTABREC",enumMA_PRTABREC);
	PFAMREC_Field->setSchemaField("PFAMREC",enumPFAMREC);
	AP_1099REC_Field->setSchemaField("AP_1099REC",enumAP_1099REC);
	GL_TRDESCSET_Field->setSchemaField("GL_TRDESCSET",enumGL_TRDESCSET);
	TOOHSHSET_Field->setSchemaField("TOOHSHSET",enumTOOHSHSET);
	GL_ACCTBUDSET_Field->setSchemaField("GL_ACCTBUDSET",enumGL_ACCTBUDSET);
	AP_POHHSHSET_Field->setSchemaField("AP_POHHSHSET",enumAP_POHHSHSET);
	MA_PROJHSHSET_Field->setSchemaField("MA_PROJHSHSET",enumMA_PROJHSHSET);
	ENCREC_Field->setSchemaField("ENCREC",enumENCREC);
	ED_ENTDOCSET_Field->setSchemaField("ED_ENTDOCSET",enumED_ENTDOCSET);
	MA_TXSOHSET_Field->setSchemaField("MA_TXSOHSET",enumMA_TXSOHSET);
	PRHCPRSET_Field->setSchemaField("PRHCPRSET",enumPRHCPRSET);
	ECCSET_Field->setSchemaField("ECCSET",enumECCSET);
	MA_CMDSPNLSET_Field->setSchemaField("MA_CMDSPNLSET",enumMA_CMDSPNLSET);
	GL_PROJHSHSET_Field->setSchemaField("GL_PROJHSHSET",enumGL_PROJHSHSET);
	LOCSET_Field->setSchemaField("LOCSET",enumLOCSET);
	GL_BATCHSHSET_Field->setSchemaField("GL_BATCHSHSET",enumGL_BATCHSHSET);
	MA_ACCTHSHSET_Field->setSchemaField("MA_ACCTHSHSET",enumMA_ACCTHSHSET);
	GL_MCLINKSET_Field->setSchemaField("GL_MCLINKSET",enumGL_MCLINKSET);
	USGREC_Field->setSchemaField("USGREC",enumUSGREC);
	MA_BILDMHSET_Field->setSchemaField("MA_BILDMHSET",enumMA_BILDMHSET);
	MA_SOHCOMCSET_Field->setSchemaField("MA_SOHCOMCSET",enumMA_SOHCOMCSET);
	MA_SPNHSHSET_Field->setSchemaField("MA_SPNHSHSET",enumMA_SPNHSHSET);
	MA_SAMSAMSSET_Field->setSchemaField("MA_SAMSAMSSET",enumMA_SAMSAMSSET);
	MA_BILBILSSET_Field->setSchemaField("MA_BILBILSSET",enumMA_BILBILSSET);
	MA_QUODHSHSET_Field->setSchemaField("MA_QUODHSHSET",enumMA_QUODHSHSET);
	AP_VATPOST2SET_Field->setSchemaField("AP_VATPOST2SET",enumAP_VATPOST2SET);
	GL_JVHSHSET_Field->setSchemaField("GL_JVHSHSET",enumGL_JVHSHSET);
	AP_BEFTPMTSET_Field->setSchemaField("AP_BEFTPMTSET",enumAP_BEFTPMTSET);
	ACTLOCSET_Field->setSchemaField("ACTLOCSET",enumACTLOCSET);
	AP_HDRSET_Field->setSchemaField("AP_HDRSET",enumAP_HDRSET);
	MISREC_Field->setSchemaField("MISREC",enumMISREC);
	MA_ACCTREC_Field->setSchemaField("MA_ACCTREC",enumMA_ACCTREC);
	AP_VCHPOHSET_Field->setSchemaField("AP_VCHPOHSET",enumAP_VCHPOHSET);
	AP_ACCTTYPEREC_Field->setSchemaField("AP_ACCTTYPEREC",enumAP_ACCTTYPEREC);
	BOLBOLLSET_Field->setSchemaField("BOLBOLLSET",enumBOLBOLLSET);
	AP_VATHSHSET_Field->setSchemaField("AP_VATHSHSET",enumAP_VATHSHSET);
	GL_ARPTSET_Field->setSchemaField("GL_ARPTSET",enumGL_ARPTSET);
	AP_RECPAYNOTESET_Field->setSchemaField("AP_RECPAYNOTESET",enumAP_RECPAYNOTESET);
	MA_INHLREC_Field->setSchemaField("MA_INHLREC",enumMA_INHLREC);
	MA_CMHPOSTSET_Field->setSchemaField("MA_CMHPOSTSET",enumMA_CMHPOSTSET);
	GL_VPOFFPROJSET_Field->setSchemaField("GL_VPOFFPROJSET",enumGL_VPOFFPROJSET);
	AP_CHKPOSTSET_Field->setSchemaField("AP_CHKPOSTSET",enumAP_CHKPOSTSET);
	MA_TXTHSHSET_Field->setSchemaField("MA_TXTHSHSET",enumMA_TXTHSHSET);
	MA_INDMCMDMSET_Field->setSchemaField("MA_INDMCMDMSET",enumMA_INDMCMDMSET);
	GL_FPHSHSET_Field->setSchemaField("GL_FPHSHSET",enumGL_FPHSHSET);
	MA_INHAPCSET_Field->setSchemaField("MA_INHAPCSET",enumMA_INHAPCSET);
	GL_ARPT_NREC_Field->setSchemaField("GL_ARPT_NREC",enumGL_ARPT_NREC);
	MA_QUOHHSHSET_Field->setSchemaField("MA_QUOHHSHSET",enumMA_QUOHHSHSET);
	MA_STGPREC_Field->setSchemaField("MA_STGPREC",enumMA_STGPREC);
	FLDREC_Field->setSchemaField("FLDREC",enumFLDREC);
	RESBORSET_Field->setSchemaField("RESBORSET",enumRESBORSET);
	VENSHPSET_Field->setSchemaField("VENSHPSET",enumVENSHPSET);
	MA_PRCTPRTABSET_Field->setSchemaField("MA_PRCTPRTABSET",enumMA_PRCTPRTABSET);
	MA_PRODPRODSSET_Field->setSchemaField("MA_PRODPRODSSET",enumMA_PRODPRODSSET);
	CODREC_Field->setSchemaField("CODREC",enumCODREC);
	MA_QUODOPTSET_Field->setSchemaField("MA_QUODOPTSET",enumMA_QUODOPTSET);
	MA_CPOREC_Field->setSchemaField("MA_CPOREC",enumMA_CPOREC);
	MA_CMHCMDSET_Field->setSchemaField("MA_CMHCMDSET",enumMA_CMHCMDSET);
	ED_AUDDOCSET_Field->setSchemaField("ED_AUDDOCSET",enumED_AUDDOCSET);
	WKCTRKSET_Field->setSchemaField("WKCTRKSET",enumWKCTRKSET);
	MA_OPTREC_Field->setSchemaField("MA_OPTREC",enumMA_OPTREC);
	GL_ACCTMASET_Field->setSchemaField("GL_ACCTMASET",enumGL_ACCTMASET);
	MA_PRPTPRTABSET_Field->setSchemaField("MA_PRPTPRTABSET",enumMA_PRPTPRTABSET);
	MA_INDCOMOSET_Field->setSchemaField("MA_INDCOMOSET",enumMA_INDCOMOSET);
	PRTMTRSET_Field->setSchemaField("PRTMTRSET",enumPRTMTRSET);
	MA_ACCTCOGSSET_Field->setSchemaField("MA_ACCTCOGSSET",enumMA_ACCTCOGSSET);
	MA_INHSPNLSET_Field->setSchemaField("MA_INHSPNLSET",enumMA_INHSPNLSET);
	SOHSODSET_Field->setSchemaField("SOHSODSET",enumSOHSODSET);
	MA_SVINDREC_Field->setSchemaField("MA_SVINDREC",enumMA_SVINDREC);
	CRLABSET_Field->setSchemaField("CRLABSET",enumCRLABSET);
	GENHSHSET_Field->setSchemaField("GENHSHSET",enumGENHSHSET);
	TOOTWUSET_Field->setSchemaField("TOOTWUSET",enumTOOTWUSET);
	MA_ACCTTRASET_Field->setSchemaField("MA_ACCTTRASET",enumMA_ACCTTRASET);
	ED_AUDHSHSET_Field->setSchemaField("ED_AUDHSHSET",enumED_AUDHSHSET);
	MA_SOHSHHSET_Field->setSchemaField("MA_SOHSHHSET",enumMA_SOHSHHSET);
	GL_PAMTREC_Field->setSchemaField("GL_PAMTREC",enumGL_PAMTREC);
	ED_ENTREC_Field->setSchemaField("ED_ENTREC",enumED_ENTREC);
	MA_INHSPISET_Field->setSchemaField("MA_INHSPISET",enumMA_INHSPISET);
	GL_LINK_NREC_Field->setSchemaField("GL_LINK_NREC",enumGL_LINK_NREC);
	GL_FPFRACCTSET_Field->setSchemaField("GL_FPFRACCTSET",enumGL_FPFRACCTSET);
	AP_POHVCHREC_Field->setSchemaField("AP_POHVCHREC",enumAP_POHVCHREC);
	MA_CTERSHPSET_Field->setSchemaField("MA_CTERSHPSET",enumMA_CTERSHPSET);
	CSTREC_Field->setSchemaField("CSTREC",enumCSTREC);
	AP_PPVNDSET_Field->setSchemaField("AP_PPVNDSET",enumAP_PPVNDSET);
	AP_INVHSHSET_Field->setSchemaField("AP_INVHSHSET",enumAP_INVHSHSET);
	IDREC_Field->setSchemaField("IDREC",enumIDREC);
	MA_SHHHSHSET_Field->setSchemaField("MA_SHHHSHSET",enumMA_SHHHSHSET);
	MA_INHREC_Field->setSchemaField("MA_INHREC",enumMA_INHREC);
	IRCTREC_Field->setSchemaField("IRCTREC",enumIRCTREC);
	MA_CPOHSHSET_Field->setSchemaField("MA_CPOHSHSET",enumMA_CPOHSHSET);
	MA_PLINREC_Field->setSchemaField("MA_PLINREC",enumMA_PLINREC);
	BOLRCTSET_Field->setSchemaField("BOLRCTSET",enumBOLRCTSET);
	AP_INVRCTRCTMSET_Field->setSchemaField("AP_INVRCTRCTMSET",enumAP_INVRCTRCTMSET);
	GL_RE_HREC_Field->setSchemaField("GL_RE_HREC",enumGL_RE_HREC);
	MA_STGPHSHSET_Field->setSchemaField("MA_STGPHSHSET",enumMA_STGPHSHSET);
	GL_ISBSREC_Field->setSchemaField("GL_ISBSREC",enumGL_ISBSREC);
	AUTREC_Field->setSchemaField("AUTREC",enumAUTREC);
	MA_SPNSPNLSET_Field->setSchemaField("MA_SPNSPNLSET",enumMA_SPNSPNLSET);
	SPNHSHSET_Field->setSchemaField("SPNHSHSET",enumSPNHSHSET);
	MA_SPIREC_Field->setSchemaField("MA_SPIREC",enumMA_SPIREC);
	GL_VPTOSET_Field->setSchemaField("GL_VPTOSET",enumGL_VPTOSET);
	MA_INHSVINHSET_Field->setSchemaField("MA_INHSVINHSET",enumMA_INHSVINHSET);
	MA_ACTCOGSSET_Field->setSchemaField("MA_ACTCOGSSET",enumMA_ACTCOGSSET);
	MA_SHDSPNLSET_Field->setSchemaField("MA_SHDSPNLSET",enumMA_SHDSPNLSET);
	AP_VNDBOLSET_Field->setSchemaField("AP_VNDBOLSET",enumAP_VNDBOLSET);
	VENIRCTSET_Field->setSchemaField("VENIRCTSET",enumVENIRCTSET);
	AP_CNOTEREC_Field->setSchemaField("AP_CNOTEREC",enumAP_CNOTEREC);
	AP_POHREC_Field->setSchemaField("AP_POHREC",enumAP_POHREC);
	AP_PNOTREC_Field->setSchemaField("AP_PNOTREC",enumAP_PNOTREC);
	MISMISREFSET_Field->setSchemaField("MISMISREFSET",enumMISMISREFSET);
	MA_PRODFCPRTABSET_Field->setSchemaField("MA_PRODFCPRTABSET",enumMA_PRODFCPRTABSET);
	MA_PRODOPTSET_Field->setSchemaField("MA_PRODOPTSET",enumMA_PRODOPTSET);
	AP_RCTHSHSET_Field->setSchemaField("AP_RCTHSHSET",enumAP_RCTHSHSET);
	GL_FPFRLINKREC_Field->setSchemaField("GL_FPFRLINKREC",enumGL_FPFRLINKREC);
	MA_HLDHSHSET_Field->setSchemaField("MA_HLDHSHSET",enumMA_HLDHSHSET);
	MA_INDMREC_Field->setSchemaField("MA_INDMREC",enumMA_INDMREC);
	MA_PAYTHSHSET_Field->setSchemaField("MA_PAYTHSHSET",enumMA_PAYTHSHSET);
	MA_POSTREC_Field->setSchemaField("MA_POSTREC",enumMA_POSTREC);
	GL_ABUDSET_Field->setSchemaField("GL_ABUDSET",enumGL_ABUDSET);
	RCTREC_Field->setSchemaField("RCTREC",enumRCTREC);
	MA_SODCOMOSET_Field->setSchemaField("MA_SODCOMOSET",enumMA_SODCOMOSET);
	MA_SAMCOMOSET_Field->setSchemaField("MA_SAMCOMOSET",enumMA_SAMCOMOSET);
	WKCLABSET_Field->setSchemaField("WKCLABSET",enumWKCLABSET);
	MA_GLPTREC_Field->setSchemaField("MA_GLPTREC",enumMA_GLPTREC);
	TRKTRDSET_Field->setSchemaField("TRKTRDSET",enumTRKTRDSET);
	GL_ARPTHSHSET_Field->setSchemaField("GL_ARPTHSHSET",enumGL_ARPTHSHSET);
	MA_GLCTBILSET_Field->setSchemaField("MA_GLCTBILSET",enumMA_GLCTBILSET);
	PRTPFAMSET_Field->setSchemaField("PRTPFAMSET",enumPRTPFAMSET);
	AP_BOLHSHSET_Field->setSchemaField("AP_BOLHSHSET",enumAP_BOLHSHSET);
	COPREC_Field->setSchemaField("COPREC",enumCOPREC);
	VENRCTSET_Field->setSchemaField("VENRCTSET",enumVENRCTSET);
	MA_INHCMHSET_Field->setSchemaField("MA_INHCMHSET",enumMA_INHCMHSET);
	MA_BILCTREC_Field->setSchemaField("MA_BILCTREC",enumMA_BILCTREC);
	ED_ENTMMHSHSET_Field->setSchemaField("ED_ENTMMHSHSET",enumED_ENTMMHSHSET);
	MA_GLPTPRODSET_Field->setSchemaField("MA_GLPTPRODSET",enumMA_GLPTPRODSET);
	ED_TPHSHSET_Field->setSchemaField("ED_TPHSHSET",enumED_TPHSHSET);
	MA_INDCMDSET_Field->setSchemaField("MA_INDCMDSET",enumMA_INDCMDSET);
	MA_BILCIASET_Field->setSchemaField("MA_BILCIASET",enumMA_BILCIASET);
	MA_CMHVDPOSTSET_Field->setSchemaField("MA_CMHVDPOSTSET",enumMA_CMHVDPOSTSET);
	MA_PRODSREC_Field->setSchemaField("MA_PRODSREC",enumMA_PRODSREC);
	PRTPODSET_Field->setSchemaField("PRTPODSET",enumPRTPODSET);
	INVLOC2SET_Field->setSchemaField("INVLOC2SET",enumINVLOC2SET);
	WOHMOVSET_Field->setSchemaField("WOHMOVSET",enumWOHMOVSET);
	FSCREC_Field->setSchemaField("FSCREC",enumFSCREC);
	AP_INVRCTMREC_Field->setSchemaField("AP_INVRCTMREC",enumAP_INVRCTMREC);
	AP_DMVCHREC_Field->setSchemaField("AP_DMVCHREC",enumAP_DMVCHREC);
	GL_ACCTPOSTSET_Field->setSchemaField("GL_ACCTPOSTSET",enumGL_ACCTPOSTSET);
	COMSET_Field->setSchemaField("COMSET",enumCOMSET);
	AP_VATPOSTSET_Field->setSchemaField("AP_VATPOSTSET",enumAP_VATPOSTSET);
	RQHREC_Field->setSchemaField("RQHREC",enumRQHREC);
	MA_SAMHSHSET_Field->setSchemaField("MA_SAMHSHSET",enumMA_SAMHSHSET);
	MA_INHINDSET_Field->setSchemaField("MA_INHINDSET",enumMA_INHINDSET);
	CURCUREXSET_Field->setSchemaField("CURCUREXSET",enumCURCUREXSET);
	AP_BTCHEFTREC_Field->setSchemaField("AP_BTCHEFTREC",enumAP_BTCHEFTREC);
	PODPRDSET_Field->setSchemaField("PODPRDSET",enumPODPRDSET);
	GL_ISBSACCTSET_Field->setSchemaField("GL_ISBSACCTSET",enumGL_ISBSACCTSET);
	GL_VPFRLINKREC_Field->setSchemaField("GL_VPFRLINKREC",enumGL_VPFRLINKREC);
	MA_COMCCOMCLSET_Field->setSchemaField("MA_COMCCOMCLSET",enumMA_COMCCOMCLSET);
	PFAMHSHSET_Field->setSchemaField("PFAMHSHSET",enumPFAMHSHSET);
	AP_POSTREC_Field->setSchemaField("AP_POSTREC",enumAP_POSTREC);
	MRHMRQSET_Field->setSchemaField("MRHMRQSET",enumMRHMRQSET);
	MA_STGSTGPSET_Field->setSchemaField("MA_STGSTGPSET",enumMA_STGSTGPSET);
	GL_VPNUMACCTSET_Field->setSchemaField("GL_VPNUMACCTSET",enumGL_VPNUMACCTSET);
	AP_BNKCHKSET_Field->setSchemaField("AP_BNKCHKSET",enumAP_BNKCHKSET);
	GL_RE_NREC_Field->setSchemaField("GL_RE_NREC",enumGL_RE_NREC);
	MA_INHINHLSET_Field->setSchemaField("MA_INHINHLSET",enumMA_INHINHLSET);
	WKCHSHSET_Field->setSchemaField("WKCHSHSET",enumWKCHSHSET);
	MA_INHPNOTINVSET_Field->setSchemaField("MA_INHPNOTINVSET",enumMA_INHPNOTINVSET);
	PODPONSET_Field->setSchemaField("PODPONSET",enumPODPONSET);
	AP_CHKHSHSET_Field->setSchemaField("AP_CHKHSHSET",enumAP_CHKHSHSET);
	GL_PROJ_NREC_Field->setSchemaField("GL_PROJ_NREC",enumGL_PROJ_NREC);
	CLDPOHSET_Field->setSchemaField("CLDPOHSET",enumCLDPOHSET);
	AP_VNDHOLDSET_Field->setSchemaField("AP_VNDHOLDSET",enumAP_VNDHOLDSET);
	VENHSHSET_Field->setSchemaField("VENHSHSET",enumVENHSHSET);
	ACTFOSET_Field->setSchemaField("ACTFOSET",enumACTFOSET);
	PRTRCTSET_Field->setSchemaField("PRTRCTSET",enumPRTRCTSET);
	GL_VPTOPROJSET_Field->setSchemaField("GL_VPTOPROJSET",enumGL_VPTOPROJSET);
	MA_SVINDSPNLSET_Field->setSchemaField("MA_SVINDSPNLSET",enumMA_SVINDSPNLSET);
	MA_PRTABHSHSET_Field->setSchemaField("MA_PRTABHSHSET",enumMA_PRTABHSHSET);
	GL_VP_HREC_Field->setSchemaField("GL_VP_HREC",enumGL_VP_HREC);
	MA_SAMCOMCSET_Field->setSchemaField("MA_SAMCOMCSET",enumMA_SAMCOMCSET);
	MA_SOHSPISET_Field->setSchemaField("MA_SOHSPISET",enumMA_SOHSPISET);
	MA_SPNSPNDSET_Field->setSchemaField("MA_SPNSPNDSET",enumMA_SPNSPNDSET);
	GL_PBUDREC_Field->setSchemaField("GL_PBUDREC",enumGL_PBUDREC);
	MA_SOHPRTSET_Field->setSchemaField("MA_SOHPRTSET",enumMA_SOHPRTSET);
	EMPSET_Field->setSchemaField("EMPSET",enumEMPSET);
	MRLREC_Field->setSchemaField("MRLREC",enumMRLREC);
	AUTPRHSET_Field->setSchemaField("AUTPRHSET",enumAUTPRHSET);
	GL_VPFRACCTSET_Field->setSchemaField("GL_VPFRACCTSET",enumGL_VPFRACCTSET);
	MA_PRODCMDSET_Field->setSchemaField("MA_PRODCMDSET",enumMA_PRODCMDSET);
	MA_SAMSREC_Field->setSchemaField("MA_SAMSREC",enumMA_SAMSREC);
	MA_QUODSPNLSET_Field->setSchemaField("MA_QUODSPNLSET",enumMA_QUODSPNLSET);
	MATREC_Field->setSchemaField("MATREC",enumMATREC);
	MA_BILHSHSET_Field->setSchemaField("MA_BILHSHSET",enumMA_BILHSHSET);
	AP_BEFTHSHSET_Field->setSchemaField("AP_BEFTHSHSET",enumAP_BEFTHSHSET);
	AP_BOLLREC_Field->setSchemaField("AP_BOLLREC",enumAP_BOLLREC);
	MA_QUOHCOMOSET_Field->setSchemaField("MA_QUOHCOMOSET",enumMA_QUOHCOMOSET);
	PODREC_Field->setSchemaField("PODREC",enumPODREC);
	AP_PDCHKSET_Field->setSchemaField("AP_PDCHKSET",enumAP_PDCHKSET);
	CDPCDPLSET_Field->setSchemaField("CDPCDPLSET",enumCDPCDPLSET);
	PUNREC_Field->setSchemaField("PUNREC",enumPUNREC);
	AP_ACCTHSHSET_Field->setSchemaField("AP_ACCTHSHSET",enumAP_ACCTHSHSET);
	FSCHSHSET_Field->setSchemaField("FSCHSHSET",enumFSCHSHSET);
	MA_CIAPOSTSET_Field->setSchemaField("MA_CIAPOSTSET",enumMA_CIAPOSTSET);
	AP_VCHREC_Field->setSchemaField("AP_VCHREC",enumAP_VCHREC);
	MA_QUODSPISET_Field->setSchemaField("MA_QUODSPISET",enumMA_QUODSPISET);
	MA_CMDREC_Field->setSchemaField("MA_CMDREC",enumMA_CMDREC);
	CDPREC_Field->setSchemaField("CDPREC",enumCDPREC);
	MA_ACCTUPPDSET_Field->setSchemaField("MA_ACCTUPPDSET",enumMA_ACCTUPPDSET);
	ED_ENTHSHSET_Field->setSchemaField("ED_ENTHSHSET",enumED_ENTHSHSET);
	MA_INDMSPISET_Field->setSchemaField("MA_INDMSPISET",enumMA_INDMSPISET);
	GL_JVTRSET_Field->setSchemaField("GL_JVTRSET",enumGL_JVTRSET);
	MA_PRODTOPSET_Field->setSchemaField("MA_PRODTOPSET",enumMA_PRODTOPSET);
	AP_PMTHSHSET_Field->setSchemaField("AP_PMTHSHSET",enumAP_PMTHSHSET);
	AP_PROJREC_Field->setSchemaField("AP_PROJREC",enumAP_PROJREC);
	MA_USRFLDSET_Field->setSchemaField("MA_USRFLDSET",enumMA_USRFLDSET);
	PRDPONSET_Field->setSchemaField("PRDPONSET",enumPRDPONSET);
	MA_PRODPRTABSET_Field->setSchemaField("MA_PRODPRTABSET",enumMA_PRODPRTABSET);
	MA_PRPTREC_Field->setSchemaField("MA_PRPTREC",enumMA_PRPTREC);
	GL_ACCTAPSET_Field->setSchemaField("GL_ACCTAPSET",enumGL_ACCTAPSET);
	AP_VNDINVSET_Field->setSchemaField("AP_VNDINVSET",enumAP_VNDINVSET);
	GL_AAMTREC_Field->setSchemaField("GL_AAMTREC",enumGL_AAMTREC);
	RESREC_Field->setSchemaField("RESREC",enumRESREC);
	BOMREC_Field->setSchemaField("BOMREC",enumBOMREC);
	POHREC_Field->setSchemaField("POHREC",enumPOHREC);
	MA_TXHSHSET_Field->setSchemaField("MA_TXHSHSET",enumMA_TXHSHSET);
	ACTPODSET_Field->setSchemaField("ACTPODSET",enumACTPODSET);
	MA_INTINHSET_Field->setSchemaField("MA_INTINHSET",enumMA_INTINHSET);
	POPREC_Field->setSchemaField("POPREC",enumPOPREC);
	GL_VPDENSET_Field->setSchemaField("GL_VPDENSET",enumGL_VPDENSET);
	MA_CMDMSPNLSET_Field->setSchemaField("MA_CMDMSPNLSET",enumMA_CMDMSPNLSET);
	POCOHSRTSET_Field->setSchemaField("POCOHSRTSET",enumPOCOHSRTSET);
	MA_ACCTPRTDSET_Field->setSchemaField("MA_ACCTPRTDSET",enumMA_ACCTPRTDSET);
	GL_TR_NREC_Field->setSchemaField("GL_TR_NREC",enumGL_TR_NREC);
	AP_VATVTPSTSET_Field->setSchemaField("AP_VATVTPSTSET",enumAP_VATVTPSTSET);
	RCTRCTMSET_Field->setSchemaField("RCTRCTMSET",enumRCTRCTMSET);
	AP_PMTREC_Field->setSchemaField("AP_PMTREC",enumAP_PMTREC);
	MA_SVINHSVINDSET_Field->setSchemaField("MA_SVINHSVINDSET",enumMA_SVINHSVINDSET);
	ED_TPPRDXRFSET_Field->setSchemaField("ED_TPPRDXRFSET",enumED_TPPRDXRFSET);
	ECOREC_Field->setSchemaField("ECOREC",enumECOREC);
	AP_INVRCTREC_Field->setSchemaField("AP_INVRCTREC",enumAP_INVRCTREC);
	MA_SODSPISET_Field->setSchemaField("MA_SODSPISET",enumMA_SODSPISET);
	AP_APPOSTSET_Field->setSchemaField("AP_APPOSTSET",enumAP_APPOSTSET);
	WIPCONSET_Field->setSchemaField("WIPCONSET",enumWIPCONSET);
	GL_PROJREC_Field->setSchemaField("GL_PROJREC",enumGL_PROJREC);
	MA_TXTTXRTSET_Field->setSchemaField("MA_TXTTXRTSET",enumMA_TXTTXRTSET);
	GL_FISCTRSET_Field->setSchemaField("GL_FISCTRSET",enumGL_FISCTRSET);
	GL_PRPT_HREC_Field->setSchemaField("GL_PRPT_HREC",enumGL_PRPT_HREC);
	GL_VOLINKSET_Field->setSchemaField("GL_VOLINKSET",enumGL_VOLINKSET);
	MA_SOHQUOHSET_Field->setSchemaField("MA_SOHQUOHSET",enumMA_SOHQUOHSET);
	MA_PLINHSHSET_Field->setSchemaField("MA_PLINHSHSET",enumMA_PLINHSHSET);
	GL_PRPTSET_Field->setSchemaField("GL_PRPTSET",enumGL_PRPTSET);
	WIPMIXSET_Field->setSchemaField("WIPMIXSET",enumWIPMIXSET);
	VENVMCSET_Field->setSchemaField("VENVMCSET",enumVENVMCSET);
	GL_LINKMFGSET_Field->setSchemaField("GL_LINKMFGSET",enumGL_LINKMFGSET);
	MA_GLCTREC_Field->setSchemaField("MA_GLCTREC",enumMA_GLCTREC);
	MA_PRCTHSHSET_Field->setSchemaField("MA_PRCTHSHSET",enumMA_PRCTHSHSET);
	FRTBOLSET_Field->setSchemaField("FRTBOLSET",enumFRTBOLSET);
	AP_BANKREC_Field->setSchemaField("AP_BANKREC",enumAP_BANKREC);
	MA_PAYTPAYTDSET_Field->setSchemaField("MA_PAYTPAYTDSET",enumMA_PAYTPAYTDSET);
	GL_FPDESCSET_Field->setSchemaField("GL_FPDESCSET",enumGL_FPDESCSET);
	AP_VCHHSHSET_Field->setSchemaField("AP_VCHHSHSET",enumAP_VCHHSHSET);
	WARSET_Field->setSchemaField("WARSET",enumWARSET);
	AP_DMVCHSET_Field->setSchemaField("AP_DMVCHSET",enumAP_DMVCHSET);
	AUTAPPSET_Field->setSchemaField("AUTAPPSET",enumAUTAPPSET);
	MA_GLTABREC_Field->setSchemaField("MA_GLTABREC",enumMA_GLTABREC);
	MA_QUOHREC_Field->setSchemaField("MA_QUOHREC",enumMA_QUOHREC);
	PRTMISSET_Field->setSchemaField("PRTMISSET",enumPRTMISSET);
	VENCOHSET_Field->setSchemaField("VENCOHSET",enumVENCOHSET);
	WIPLOTSET_Field->setSchemaField("WIPLOTSET",enumWIPLOTSET);
	MA_SOHSODSET_Field->setSchemaField("MA_SOHSODSET",enumMA_SOHSODSET);
	AP_RCTINRCSET_Field->setSchemaField("AP_RCTINRCSET",enumAP_RCTINRCSET);
	AP_CASHBNKSET_Field->setSchemaField("AP_CASHBNKSET",enumAP_CASHBNKSET);
	MA_TXREC_Field->setSchemaField("MA_TXREC",enumMA_TXREC);
	MA_INHCRPOSTSET_Field->setSchemaField("MA_INHCRPOSTSET",enumMA_INHCRPOSTSET);
	SPNREC_Field->setSchemaField("SPNREC",enumSPNREC);
	PRTBORSET_Field->setSchemaField("PRTBORSET",enumPRTBORSET);
	MA_QUOHSPNLSET_Field->setSchemaField("MA_QUOHSPNLSET",enumMA_QUOHSPNLSET);
	MA_SOHUPDSET_Field->setSchemaField("MA_SOHUPDSET",enumMA_SOHUPDSET);
	AP_DISCBNKSET_Field->setSchemaField("AP_DISCBNKSET",enumAP_DISCBNKSET);
	BYDHSHSET_Field->setSchemaField("BYDHSHSET",enumBYDHSHSET);
	MA_INHINDMSET_Field->setSchemaField("MA_INHINDMSET",enumMA_INHINDMSET);
	GL_FP_HREC_Field->setSchemaField("GL_FP_HREC",enumGL_FP_HREC);
	MA_PARTTOPSET_Field->setSchemaField("MA_PARTTOPSET",enumMA_PARTTOPSET);
	GL_REDESCSET_Field->setSchemaField("GL_REDESCSET",enumGL_REDESCSET);
	GL_VPOFFACCTSET_Field->setSchemaField("GL_VPOFFACCTSET",enumGL_VPOFFACCTSET);
	AP_BOLBOLLSET_Field->setSchemaField("AP_BOLBOLLSET",enumAP_BOLBOLLSET);
	MA_SPFREC_Field->setSchemaField("MA_SPFREC",enumMA_SPFREC);
	BOLREC_Field->setSchemaField("BOLREC",enumBOLREC);
	CURHSHSET_Field->setSchemaField("CURHSHSET",enumCURHSHSET);
	MA_PRODSODSET_Field->setSchemaField("MA_PRODSODSET",enumMA_PRODSODSET);
	REFSET_Field->setSchemaField("REFSET",enumREFSET);
	MA_INDSPISET_Field->setSchemaField("MA_INDSPISET",enumMA_INDSPISET);
	LOTREC_Field->setSchemaField("LOTREC",enumLOTREC);
	INVHSHSET_Field->setSchemaField("INVHSHSET",enumINVHSHSET);
	MA_QUOHPRTSET_Field->setSchemaField("MA_QUOHPRTSET",enumMA_QUOHPRTSET);
	MA_CTERREC_Field->setSchemaField("MA_CTERREC",enumMA_CTERREC);
	MA_PAKPRTSET_Field->setSchemaField("MA_PAKPRTSET",enumMA_PAKPRTSET);
	PRHPRDSET_Field->setSchemaField("PRHPRDSET",enumPRHPRDSET);
	MSCREC_Field->setSchemaField("MSCREC",enumMSCREC);
	WOHMISSET_Field->setSchemaField("WOHMISSET",enumWOHMISSET);
	AP_PAYOR1099REC_Field->setSchemaField("AP_PAYOR1099REC",enumAP_PAYOR1099REC);
	MA_DMHLREC_Field->setSchemaField("MA_DMHLREC",enumMA_DMHLREC);
	CCSRTSET_Field->setSchemaField("CCSRTSET",enumCCSRTSET);
	CODHSHSET_Field->setSchemaField("CODHSHSET",enumCODHSHSET);
	AP_RCTREC_Field->setSchemaField("AP_RCTREC",enumAP_RCTREC);
	GL_REACCTSET_Field->setSchemaField("GL_REACCTSET",enumGL_REACCTSET);
	MA_GLCTHSHSET_Field->setSchemaField("MA_GLCTHSHSET",enumMA_GLCTHSHSET);
	ED_TPENTSET_Field->setSchemaField("ED_TPENTSET",enumED_TPENTSET);
	MA_GLPTTABSET_Field->setSchemaField("MA_GLPTTABSET",enumMA_GLPTTABSET);
	DFAHSHSET_Field->setSchemaField("DFAHSHSET",enumDFAHSHSET);
	GL_ACCT_NREC_Field->setSchemaField("GL_ACCT_NREC",enumGL_ACCT_NREC);
	FSCCALREC_Field->setSchemaField("FSCCALREC",enumFSCCALREC);
	CDPLREC_Field->setSchemaField("CDPLREC",enumCDPLREC);
	AP_RCTSET_Field->setSchemaField("AP_RCTSET",enumAP_RCTSET);
	RTGTRKSET_Field->setSchemaField("RTGTRKSET",enumRTGTRKSET);
	CDLCDASET_Field->setSchemaField("CDLCDASET",enumCDLCDASET);
	MA_STATETXSET_Field->setSchemaField("MA_STATETXSET",enumMA_STATETXSET);
	MA_SHHSHDSET_Field->setSchemaField("MA_SHHSHDSET",enumMA_SHHSHDSET);
	TOOREC_Field->setSchemaField("TOOREC",enumTOOREC);
	ACTPCSET_Field->setSchemaField("ACTPCSET",enumACTPCSET);
	MA_PAYTREC_Field->setSchemaField("MA_PAYTREC",enumMA_PAYTREC);
	AP_APVNDSET_Field->setSchemaField("AP_APVNDSET",enumAP_APVNDSET);
	RTDSET_Field->setSchemaField("RTDSET",enumRTDSET);
	MA_SOHSPNLSET_Field->setSchemaField("MA_SOHSPNLSET",enumMA_SOHSPNLSET);
	PRTRQDSET_Field->setSchemaField("PRTRQDSET",enumPRTRQDSET);
	ACTMOSET_Field->setSchemaField("ACTMOSET",enumACTMOSET);
	AP_PLTREC_Field->setSchemaField("AP_PLTREC",enumAP_PLTREC);
	GL_LINKHSHSET_Field->setSchemaField("GL_LINKHSHSET",enumGL_LINKHSHSET);
	AP_PMTNOTTRANSSET_Field->setSchemaField("AP_PMTNOTTRANSSET",enumAP_PMTNOTTRANSSET);
	AP_VND1099SET_Field->setSchemaField("AP_VND1099SET",enumAP_VND1099SET);
	MA_PROJREC_Field->setSchemaField("MA_PROJREC",enumMA_PROJREC);
	MA_REMREC_Field->setSchemaField("MA_REMREC",enumMA_REMREC);
	AP_POHVCHSET_Field->setSchemaField("AP_POHVCHSET",enumAP_POHVCHSET);
	SODINTSET_Field->setSchemaField("SODINTSET",enumSODINTSET);
	CSTSET_Field->setSchemaField("CSTSET",enumCSTSET);
	MA_SODSHDSET_Field->setSchemaField("MA_SODSHDSET",enumMA_SODSHDSET);
	FORREC_Field->setSchemaField("FORREC",enumFORREC);
	BOMSET_Field->setSchemaField("BOMSET",enumBOMSET);
	TRDREC_Field->setSchemaField("TRDREC",enumTRDREC);
	RTGTWUSET_Field->setSchemaField("RTGTWUSET",enumRTGTWUSET);
	MA_PARTHSHSET_Field->setSchemaField("MA_PARTHSHSET",enumMA_PARTHSHSET);
	POHPRNTSET_Field->setSchemaField("POHPRNTSET",enumPOHPRNTSET);
	MA_SHPSREC_Field->setSchemaField("MA_SHPSREC",enumMA_SHPSREC);
	MA_STGREC_Field->setSchemaField("MA_STGREC",enumMA_STGREC);
	MRLHSHSET_Field->setSchemaField("MRLHSHSET",enumMRLHSHSET);
	AP_PAYOR1099HSHSET_Field->setSchemaField("AP_PAYOR1099HSHSET",enumAP_PAYOR1099HSHSET);
	GL_FPBATSET_Field->setSchemaField("GL_FPBATSET",enumGL_FPBATSET);
	PRTCDLSET_Field->setSchemaField("PRTCDLSET",enumPRTCDLSET);
	MA_FRTTHSHSET_Field->setSchemaField("MA_FRTTHSHSET",enumMA_FRTTHSHSET);
	MA_CMHPRTSET_Field->setSchemaField("MA_CMHPRTSET",enumMA_CMHPRTSET);
	GL_BATCHREC_Field->setSchemaField("GL_BATCHREC",enumGL_BATCHREC);
	MA_POSTSPISET_Field->setSchemaField("MA_POSTSPISET",enumMA_POSTSPISET);
	MA_CPOSOHSET_Field->setSchemaField("MA_CPOSOHSET",enumMA_CPOSOHSET);
	MA_USRREC_Field->setSchemaField("MA_USRREC",enumMA_USRREC);
	MA_TXRTTXLSET_Field->setSchemaField("MA_TXRTTXLSET",enumMA_TXRTTXLSET);
	MA_QUODREC_Field->setSchemaField("MA_QUODREC",enumMA_QUODREC);
	WOHMSCSET_Field->setSchemaField("WOHMSCSET",enumWOHMSCSET);
	MA_CIAAPCSET_Field->setSchemaField("MA_CIAAPCSET",enumMA_CIAAPCSET);
	MA_BILCTHSHSET_Field->setSchemaField("MA_BILCTHSHSET",enumMA_BILCTHSHSET);
	MA_SPFHSHSET_Field->setSchemaField("MA_SPFHSHSET",enumMA_SPFHSHSET);
	MA_TXTREC_Field->setSchemaField("MA_TXTREC",enumMA_TXTREC);
	MA_CMHCMDMSET_Field->setSchemaField("MA_CMHCMDMSET",enumMA_CMHCMDMSET);
	MA_PRTSTGPSET_Field->setSchemaField("MA_PRTSTGPSET",enumMA_PRTSTGPSET);
	MA_BILSODSET_Field->setSchemaField("MA_BILSODSET",enumMA_BILSODSET);
	AP_ACCTTYPESET_Field->setSchemaField("AP_ACCTTYPESET",enumAP_ACCTTYPESET);
	MA_SAMREC_Field->setSchemaField("MA_SAMREC",enumMA_SAMREC);
	DESREC_Field->setSchemaField("DESREC",enumDESREC);
	COHCONSET_Field->setSchemaField("COHCONSET",enumCOHCONSET);
	ENDREC_Field->setSchemaField("ENDREC",enumENDREC);
	WARHSHSET_Field->setSchemaField("WARHSHSET",enumWARHSHSET);
	MA_PNOTREC_Field->setSchemaField("MA_PNOTREC",enumMA_PNOTREC);
	WOHTRKSET_Field->setSchemaField("WOHTRKSET",enumWOHTRKSET);
	MA_SPNLREC_Field->setSchemaField("MA_SPNLREC",enumMA_SPNLREC);
	CRMTRSET_Field->setSchemaField("CRMTRSET",enumCRMTRSET);
	MA_CHGHCHGDSET_Field->setSchemaField("MA_CHGHCHGDSET",enumMA_CHGHCHGDSET);
	GL_ABUDHSHSET_Field->setSchemaField("GL_ABUDHSHSET",enumGL_ABUDHSHSET);
	DFAREC_Field->setSchemaField("DFAREC",enumDFAREC);
	PRTPUNSET_Field->setSchemaField("PRTPUNSET",enumPRTPUNSET);
	MA_SHDSHDPSET_Field->setSchemaField("MA_SHDSHDPSET",enumMA_SHDSHDPSET);
	EMPREC_Field->setSchemaField("EMPREC",enumEMPREC);
	ED_PRDHSHSET_Field->setSchemaField("ED_PRDHSHSET",enumED_PRDHSHSET);
	MISREFREC_Field->setSchemaField("MISREFREC",enumMISREFREC);
	LOCLOTSET_Field->setSchemaField("LOCLOTSET",enumLOCLOTSET);
	GL_ACCTFASET_Field->setSchemaField("GL_ACCTFASET",enumGL_ACCTFASET);
	PRTVMCSET_Field->setSchemaField("PRTVMCSET",enumPRTVMCSET);
	MA_USRHSHSET_Field->setSchemaField("MA_USRHSHSET",enumMA_USRHSHSET);
	QOHREC_Field->setSchemaField("QOHREC",enumQOHREC);
	AP_RECPAYVCHSET_Field->setSchemaField("AP_RECPAYVCHSET",enumAP_RECPAYVCHSET);
	GL_DLLINKSET_Field->setSchemaField("GL_DLLINKSET",enumGL_DLLINKSET);
	MA_SVINHREC_Field->setSchemaField("MA_SVINHREC",enumMA_SVINHREC);
	MA_INHCOMCSET_Field->setSchemaField("MA_INHCOMCSET",enumMA_INHCOMCSET);
	INDFREC_Field->setSchemaField("INDFREC",enumINDFREC);
	PODPOMSET_Field->setSchemaField("PODPOMSET",enumPODPOMSET);
	GL_TRREC_Field->setSchemaField("GL_TRREC",enumGL_TRREC);
	MA_PRODREC_Field->setSchemaField("MA_PRODREC",enumMA_PRODREC);
	MA_ACCTRETSET_Field->setSchemaField("MA_ACCTRETSET",enumMA_ACCTRETSET);
	AP_PNOTVCHREC_Field->setSchemaField("AP_PNOTVCHREC",enumAP_PNOTVCHREC);
	SODFAMSET_Field->setSchemaField("SODFAMSET",enumSODFAMSET);
	AP_VTPSTREC_Field->setSchemaField("AP_VTPSTREC",enumAP_VTPSTREC);
	SOHHSHSET_Field->setSchemaField("SOHHSHSET",enumSOHHSHSET);
	PRDREC_Field->setSchemaField("PRDREC",enumPRDREC);
	GL_RE_DREC_Field->setSchemaField("GL_RE_DREC",enumGL_RE_DREC);
	FLGHSHSET_Field->setSchemaField("FLGHSHSET",enumFLGHSHSET);
	GL_ACCTRPTSET_Field->setSchemaField("GL_ACCTRPTSET",enumGL_ACCTRPTSET);
	MA_CPOINHSET_Field->setSchemaField("MA_CPOINHSET",enumMA_CPOINHSET);
	MA_TXRTREC_Field->setSchemaField("MA_TXRTREC",enumMA_TXRTREC);
	MA_CMHSPISET_Field->setSchemaField("MA_CMHSPISET",enumMA_CMHSPISET);
	MA_TXTXLSET_Field->setSchemaField("MA_TXTXLSET",enumMA_TXTXLSET);
	ACTMCSET_Field->setSchemaField("ACTMCSET",enumACTMCSET);
	MA_STERHSHSET_Field->setSchemaField("MA_STERHSHSET",enumMA_STERHSHSET);
	AP_PAYPLTREC_Field->setSchemaField("AP_PAYPLTREC",enumAP_PAYPLTREC);
	GL_PROJDESCSET_Field->setSchemaField("GL_PROJDESCSET",enumGL_PROJDESCSET);
	GL_REBATSET_Field->setSchemaField("GL_REBATSET",enumGL_REBATSET);
	AP_VCHVTPSTSET_Field->setSchemaField("AP_VCHVTPSTSET",enumAP_VCHVTPSTSET);
	PRTUSGSET_Field->setSchemaField("PRTUSGSET",enumPRTUSGSET);
	AUTHSHSET_Field->setSchemaField("AUTHSHSET",enumAUTHSHSET);
	WIPMBOSET_Field->setSchemaField("WIPMBOSET",enumWIPMBOSET);
	GL_TRHSHSET_Field->setSchemaField("GL_TRHSHSET",enumGL_TRHSHSET);
	MA_INHVDPOSTSET_Field->setSchemaField("MA_INHVDPOSTSET",enumMA_INHVDPOSTSET);
	MA_DMHCMHSET_Field->setSchemaField("MA_DMHCMHSET",enumMA_DMHCMHSET);
	MA_STATEHSHSET_Field->setSchemaField("MA_STATEHSHSET",enumMA_STATEHSHSET);
	VMCREC_Field->setSchemaField("VMCREC",enumVMCREC);
	AP_PDCHKREC_Field->setSchemaField("AP_PDCHKREC",enumAP_PDCHKREC);
	GL_PRPTHSHSET_Field->setSchemaField("GL_PRPTHSHSET",enumGL_PRPTHSHSET);
	APPREC_Field->setSchemaField("APPREC",enumAPPREC);
	AP_VCHCHKSET_Field->setSchemaField("AP_VCHCHKSET",enumAP_VCHCHKSET);
	RCTNOHSHSET_Field->setSchemaField("RCTNOHSHSET",enumRCTNOHSHSET);
	GL_VPNUM_DREC_Field->setSchemaField("GL_VPNUM_DREC",enumGL_VPNUM_DREC);
	MA_PNOTPNOTINVSET_Field->setSchemaField("MA_PNOTPNOTINVSET",enumMA_PNOTPNOTINVSET);
	POHCPRSET_Field->setSchemaField("POHCPRSET",enumPOHCPRSET);
	AP_VCHNOTSET_Field->setSchemaField("AP_VCHNOTSET",enumAP_VCHNOTSET);
	WIPBYPSET_Field->setSchemaField("WIPBYPSET",enumWIPBYPSET);
	MA_HLDREC_Field->setSchemaField("MA_HLDREC",enumMA_HLDREC);
	AP_VNDPLTSET_Field->setSchemaField("AP_VNDPLTSET",enumAP_VNDPLTSET);
	PRTMRPSET_Field->setSchemaField("PRTMRPSET",enumPRTMRPSET);
	GL_ABUDNUMSET_Field->setSchemaField("GL_ABUDNUMSET",enumGL_ABUDNUMSET);
	ENGENCSET_Field->setSchemaField("ENGENCSET",enumENGENCSET);
	POHPOPSET_Field->setSchemaField("POHPOPSET",enumPOHPOPSET);
	MA_CMDMSPISET_Field->setSchemaField("MA_CMDMSPISET",enumMA_CMDMSPISET);
	AP_BOLREC_Field->setSchemaField("AP_BOLREC",enumAP_BOLREC);
	GL_VP_DREC_Field->setSchemaField("GL_VP_DREC",enumGL_VP_DREC);
	GL_PROJFASET_Field->setSchemaField("GL_PROJFASET",enumGL_PROJFASET);
	ACTVOSET_Field->setSchemaField("ACTVOSET",enumACTVOSET);
	MA_SODCHGDSET_Field->setSchemaField("MA_SODCHGDSET",enumMA_SODCHGDSET);
	INTSET_Field->setSchemaField("INTSET",enumINTSET);
	MA_SHHSPISET_Field->setSchemaField("MA_SHHSPISET",enumMA_SHHSPISET);
	MA_FCPRTABHSHSET_Field->setSchemaField("MA_FCPRTABHSHSET",enumMA_FCPRTABHSHSET);
	MA_INDMSPNLSET_Field->setSchemaField("MA_INDMSPNLSET",enumMA_INDMSPNLSET);
	WARQOHSET_Field->setSchemaField("WARQOHSET",enumWARQOHSET);
	PRHAPPSET_Field->setSchemaField("PRHAPPSET",enumPRHAPPSET);
	AP_VCHDMSET_Field->setSchemaField("AP_VCHDMSET",enumAP_VCHDMSET);
	GL_VP_NREC_Field->setSchemaField("GL_VP_NREC",enumGL_VP_NREC);
	MA_SVINDSPISET_Field->setSchemaField("MA_SVINDSPISET",enumMA_SVINDSPISET);
	PRTRTGSET_Field->setSchemaField("PRTRTGSET",enumPRTRTGSET);
	PRHHSHSET_Field->setSchemaField("PRHHSHSET",enumPRHHSHSET);
	AP_RECPAYREC_Field->setSchemaField("AP_RECPAYREC",enumAP_RECPAYREC);
	MA_SHHPRTSET_Field->setSchemaField("MA_SHHPRTSET",enumMA_SHHPRTSET);
	PRTENDSET_Field->setSchemaField("PRTENDSET",enumPRTENDSET);
	MA_SOHREC_Field->setSchemaField("MA_SOHREC",enumMA_SOHREC);
	ED_DOCXRFREC_Field->setSchemaField("ED_DOCXRFREC",enumED_DOCXRFREC);
	MA_SHHSPNLSET_Field->setSchemaField("MA_SHHSPNLSET",enumMA_SHHSPNLSET);
	CONREC_Field->setSchemaField("CONREC",enumCONREC);
	GL_ABUDNUMREC_Field->setSchemaField("GL_ABUDNUMREC",enumGL_ABUDNUMREC);
	AP_CHKREC_Field->setSchemaField("AP_CHKREC",enumAP_CHKREC);
	TWUREC_Field->setSchemaField("TWUREC",enumTWUREC);
	MA_QUOHUPDSET_Field->setSchemaField("MA_QUOHUPDSET",enumMA_QUOHUPDSET);
	MA_CTERHSHSET_Field->setSchemaField("MA_CTERHSHSET",enumMA_CTERHSHSET);
	PODRCTSET_Field->setSchemaField("PODRCTSET",enumPODRCTSET);
	MA_CIAREC_Field->setSchemaField("MA_CIAREC",enumMA_CIAREC);
	GL_TRPOSTSET_Field->setSchemaField("GL_TRPOSTSET",enumGL_TRPOSTSET);
	MA_ACCTSALESET_Field->setSchemaField("MA_ACCTSALESET",enumMA_ACCTSALESET);
	MA_PROJPOSTSET_Field->setSchemaField("MA_PROJPOSTSET",enumMA_PROJPOSTSET);
	PRTWOHSET_Field->setSchemaField("PRTWOHSET",enumPRTWOHSET);
	MA_WARSTGSET_Field->setSchemaField("MA_WARSTGSET",enumMA_WARSTGSET);
	GL_POSTREC_Field->setSchemaField("GL_POSTREC",enumGL_POSTREC);
	AP_VCHBOLLSET_Field->setSchemaField("AP_VCHBOLLSET",enumAP_VCHBOLLSET);
	GL_JV_NREC_Field->setSchemaField("GL_JV_NREC",enumGL_JV_NREC);
	MA_PRCTBILSET_Field->setSchemaField("MA_PRCTBILSET",enumMA_PRCTBILSET);
	AP_ACCTSET_Field->setSchemaField("AP_ACCTSET",enumAP_ACCTSET);
	AP_PNOTPNOTVCHSET_Field->setSchemaField("AP_PNOTPNOTVCHSET",enumAP_PNOTPNOTVCHSET);
	VARREC_Field->setSchemaField("VARREC",enumVARREC);
	GL_FISCREC_Field->setSchemaField("GL_FISCREC",enumGL_FISCREC);
	FSCCALSET_Field->setSchemaField("FSCCALSET",enumFSCCALSET);
	MA_PRODCHGDSET_Field->setSchemaField("MA_PRODCHGDSET",enumMA_PRODCHGDSET);
	POHPONSET_Field->setSchemaField("POHPONSET",enumPOHPONSET);
	MA_TOPREC_Field->setSchemaField("MA_TOPREC",enumMA_TOPREC);
	MA_GLTABHSHSET_Field->setSchemaField("MA_GLTABHSHSET",enumMA_GLTABHSHSET);
	PAYREC_Field->setSchemaField("PAYREC",enumPAYREC);
	MA_SPNDREC_Field->setSchemaField("MA_SPNDREC",enumMA_SPNDREC);
	MA_REMHSHSET_Field->setSchemaField("MA_REMHSHSET",enumMA_REMHSHSET);
	m_HashedMap_MANDB100.insert("AP_VNDVENSET", AP_VNDVENSET_Field);
	m_HashedMap_MANDB100.insert("MRHREC", MRHREC_Field);
	m_HashedMap_MANDB100.insert("GL_ACCTHSHSET", GL_ACCTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILSHPSET", MA_BILSHPSET_Field);
	m_HashedMap_MANDB100.insert("FRTREC", FRTREC_Field);
	m_HashedMap_MANDB100.insert("WIPYLDSET", WIPYLDSET_Field);
	m_HashedMap_MANDB100.insert("WKCREC", WKCREC_Field);
	m_HashedMap_MANDB100.insert("MA_SHPQUOHSET", MA_SHPQUOHSET_Field);
	m_HashedMap_MANDB100.insert("MA_RSNCHGHSET", MA_RSNCHGHSET_Field);
	m_HashedMap_MANDB100.insert("BOLOPENSET", BOLOPENSET_Field);
	m_HashedMap_MANDB100.insert("AP_VATREC", AP_VATREC_Field);
	m_HashedMap_MANDB100.insert("MA_PFAMREC", MA_PFAMREC_Field);
	m_HashedMap_MANDB100.insert("FSCCALHSHSET", FSCCALHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_DEFACCTSET", AP_DEFACCTSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILPOSTSET", MA_BILPOSTSET_Field);
	m_HashedMap_MANDB100.insert("AP_HDRVNDSET", AP_HDRVNDSET_Field);
	m_HashedMap_MANDB100.insert("AP_SEARCHREC", AP_SEARCHREC_Field);
	m_HashedMap_MANDB100.insert("MA_SHPSOHSET", MA_SHPSOHSET_Field);
	m_HashedMap_MANDB100.insert("DRVARSET", DRVARSET_Field);
	m_HashedMap_MANDB100.insert("MA_COMCREC", MA_COMCREC_Field);
	m_HashedMap_MANDB100.insert("MA_PRCTREC", MA_PRCTREC_Field);
	m_HashedMap_MANDB100.insert("MA_SODINDSET", MA_SODINDSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHDMHSET", MA_INHDMHSET_Field);
	m_HashedMap_MANDB100.insert("MA_STATEREC", MA_STATEREC_Field);
	m_HashedMap_MANDB100.insert("PRTFORSET", PRTFORSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRTTOPSET", MA_PRTTOPSET_Field);
	m_HashedMap_MANDB100.insert("PAYSET", PAYSET_Field);
	m_HashedMap_MANDB100.insert("WOHEALSET", WOHEALSET_Field);
	m_HashedMap_MANDB100.insert("MA_GLCTTABSET", MA_GLCTTABSET_Field);
	m_HashedMap_MANDB100.insert("AP_BATCHHSHSET", AP_BATCHHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRPTPRODSET", MA_PRPTPRODSET_Field);
	m_HashedMap_MANDB100.insert("AP_BNKVCHSET", AP_BNKVCHSET_Field);
	m_HashedMap_MANDB100.insert("MA_FRTHSHSET", MA_FRTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_RSNCMHSET", MA_RSNCMHSET_Field);
	m_HashedMap_MANDB100.insert("POHPRHSET", POHPRHSET_Field);
	m_HashedMap_MANDB100.insert("AP_VENHOLDSET", AP_VENHOLDSET_Field);
	m_HashedMap_MANDB100.insert("GL_FP_NREC", GL_FP_NREC_Field);
	m_HashedMap_MANDB100.insert("WARINTSET", WARINTSET_Field);
	m_HashedMap_MANDB100.insert("GL_FPTOPCTSET", GL_FPTOPCTSET_Field);
	m_HashedMap_MANDB100.insert("ED_AUDREC", ED_AUDREC_Field);
	m_HashedMap_MANDB100.insert("VENREC", VENREC_Field);
	m_HashedMap_MANDB100.insert("MA_PRPTHSHSET", MA_PRPTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SOHPBSET", MA_SOHPBSET_Field);
	m_HashedMap_MANDB100.insert("GL_LINKREC", GL_LINKREC_Field);
	m_HashedMap_MANDB100.insert("AP_RECNOTEREC", AP_RECNOTEREC_Field);
	m_HashedMap_MANDB100.insert("GL_BATCHSET", GL_BATCHSET_Field);
	m_HashedMap_MANDB100.insert("OPCREC", OPCREC_Field);
	m_HashedMap_MANDB100.insert("AP_VNDCHKSET", AP_VNDCHKSET_Field);
	m_HashedMap_MANDB100.insert("POMREC", POMREC_Field);
	m_HashedMap_MANDB100.insert("GL_VPDEN_DREC", GL_VPDEN_DREC_Field);
	m_HashedMap_MANDB100.insert("WOHREC", WOHREC_Field);
	m_HashedMap_MANDB100.insert("GL_PRPT_NREC", GL_PRPT_NREC_Field);
	m_HashedMap_MANDB100.insert("MA_PNOTHSHSET", MA_PNOTHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_FPTOACCTSET", GL_FPTOACCTSET_Field);
	m_HashedMap_MANDB100.insert("WIPEFFSET", WIPEFFSET_Field);
	m_HashedMap_MANDB100.insert("GL_ISBSHSHSET", GL_ISBSHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_POPSET", AP_POPSET_Field);
	m_HashedMap_MANDB100.insert("MA_FCPRTABREC", MA_FCPRTABREC_Field);
	m_HashedMap_MANDB100.insert("MA_QUOHSPISET", MA_QUOHSPISET_Field);
	m_HashedMap_MANDB100.insert("MA_SOCATREC", MA_SOCATREC_Field);
	m_HashedMap_MANDB100.insert("AP_VENVCHSET", AP_VENVCHSET_Field);
	m_HashedMap_MANDB100.insert("INDFHSHSET", INDFHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_REAMTSET", GL_REAMTSET_Field);
	m_HashedMap_MANDB100.insert("RQHRQDSET", RQHRQDSET_Field);
	m_HashedMap_MANDB100.insert("GL_ARPT_DREC", GL_ARPT_DREC_Field);
	m_HashedMap_MANDB100.insert("MA_INHAPCPOSTSET", MA_INHAPCPOSTSET_Field);
	m_HashedMap_MANDB100.insert("MA_COMOREC", MA_COMOREC_Field);
	m_HashedMap_MANDB100.insert("AP_VNDHSHSET", AP_VNDHSHSET_Field);
	m_HashedMap_MANDB100.insert("CRVARSET", CRVARSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRCTFCPRTABSET", MA_PRCTFCPRTABSET_Field);
	m_HashedMap_MANDB100.insert("WOHHSHSET", WOHHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INDSPNLSET", MA_INDSPNLSET_Field);
	m_HashedMap_MANDB100.insert("PODIRCTSET", PODIRCTSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILFCPRTABSET", MA_BILFCPRTABSET_Field);
	m_HashedMap_MANDB100.insert("SOHREC", SOHREC_Field);
	m_HashedMap_MANDB100.insert("AP_BCHVCHSET", AP_BCHVCHSET_Field);
	m_HashedMap_MANDB100.insert("ACTHSHSET", ACTHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_HDRREC", AP_HDRREC_Field);
	m_HashedMap_MANDB100.insert("GL_VPDESCSET", GL_VPDESCSET_Field);
	m_HashedMap_MANDB100.insert("PRTIRCTSET", PRTIRCTSET_Field);
	m_HashedMap_MANDB100.insert("GENPRTSET", GENPRTSET_Field);
	m_HashedMap_MANDB100.insert("WARLOCSET", WARLOCSET_Field);
	m_HashedMap_MANDB100.insert("RTDREC", RTDREC_Field);
	m_HashedMap_MANDB100.insert("MA_DMHDMHLSET", MA_DMHDMHLSET_Field);
	m_HashedMap_MANDB100.insert("AP_RECPAYCHNSET", AP_RECPAYCHNSET_Field);
	m_HashedMap_MANDB100.insert("IRCTSET", IRCTSET_Field);
	m_HashedMap_MANDB100.insert("GL_PROJRPTSET", GL_PROJRPTSET_Field);
	m_HashedMap_MANDB100.insert("AP_RECPOSTREC", AP_RECPOSTREC_Field);
	m_HashedMap_MANDB100.insert("PRTYLDSET", PRTYLDSET_Field);
	m_HashedMap_MANDB100.insert("POHRCTSET", POHRCTSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHSHHSET", MA_INHSHHSET_Field);
	m_HashedMap_MANDB100.insert("RCTHSHSET", RCTHSHSET_Field);
	m_HashedMap_MANDB100.insert("VENBILSET", VENBILSET_Field);
	m_HashedMap_MANDB100.insert("MA_APCSPISET", MA_APCSPISET_Field);
	m_HashedMap_MANDB100.insert("INTREC", INTREC_Field);
	m_HashedMap_MANDB100.insert("MA_SHHREC", MA_SHHREC_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTSRTSET", MA_ACCTSRTSET_Field);
	m_HashedMap_MANDB100.insert("MA_COMOCLREC", MA_COMOCLREC_Field);
	m_HashedMap_MANDB100.insert("MA_SHDSERSET", MA_SHDSERSET_Field);
	m_HashedMap_MANDB100.insert("ENGREC", ENGREC_Field);
	m_HashedMap_MANDB100.insert("FA_ACCTHSHSET", FA_ACCTHSHSET_Field);
	m_HashedMap_MANDB100.insert("WIPMATSET", WIPMATSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHPHSHSET", MA_SHPHSHSET_Field);
	m_HashedMap_MANDB100.insert("DELREC", DELREC_Field);
	m_HashedMap_MANDB100.insert("MA_TXRTHSHSET", MA_TXRTHSHSET_Field);
	m_HashedMap_MANDB100.insert("FSCSET", FSCSET_Field);
	m_HashedMap_MANDB100.insert("AP_BATCHREC", AP_BATCHREC_Field);
	m_HashedMap_MANDB100.insert("DRMTRSET", DRMTRSET_Field);
	m_HashedMap_MANDB100.insert("MA_SODSPNLSET", MA_SODSPNLSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILPRTABSET", MA_BILPRTABSET_Field);
	m_HashedMap_MANDB100.insert("WKCRTGSET", WKCRTGSET_Field);
	m_HashedMap_MANDB100.insert("GL_OOLINKSET", GL_OOLINKSET_Field);
	m_HashedMap_MANDB100.insert("DELRCTSET", DELRCTSET_Field);
	m_HashedMap_MANDB100.insert("ACSTREC", ACSTREC_Field);
	m_HashedMap_MANDB100.insert("WIPREC", WIPREC_Field);
	m_HashedMap_MANDB100.insert("MA_PNOTINVREC", MA_PNOTINVREC_Field);
	m_HashedMap_MANDB100.insert("AP_VNDREC", AP_VNDREC_Field);
	m_HashedMap_MANDB100.insert("WIPWOHSET", WIPWOHSET_Field);
	m_HashedMap_MANDB100.insert("MA_STERSAMSET", MA_STERSAMSET_Field);
	m_HashedMap_MANDB100.insert("AP_BCHHOLDSET", AP_BCHHOLDSET_Field);
	m_HashedMap_MANDB100.insert("GL_ACCTREC", GL_ACCTREC_Field);
	m_HashedMap_MANDB100.insert("ACTOPSET", ACTOPSET_Field);
	m_HashedMap_MANDB100.insert("WOHVARSET", WOHVARSET_Field);
	m_HashedMap_MANDB100.insert("MA_FLDREC", MA_FLDREC_Field);
	m_HashedMap_MANDB100.insert("GL_VPFRSET", GL_VPFRSET_Field);
	m_HashedMap_MANDB100.insert("MA_INDREC", MA_INDREC_Field);
	m_HashedMap_MANDB100.insert("PRTFAMSET", PRTFAMSET_Field);
	m_HashedMap_MANDB100.insert("CDLCONSET", CDLCONSET_Field);
	m_HashedMap_MANDB100.insert("FLDSET", FLDSET_Field);
	m_HashedMap_MANDB100.insert("MA_COMOCOMOCLSET", MA_COMOCOMOCLSET_Field);
	m_HashedMap_MANDB100.insert("FA_PROJREC", FA_PROJREC_Field);
	m_HashedMap_MANDB100.insert("MA_RSNHSHSET", MA_RSNHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHPOSTSET", MA_INHPOSTSET_Field);
	m_HashedMap_MANDB100.insert("MA_QUOHQUODSET", MA_QUOHQUODSET_Field);
	m_HashedMap_MANDB100.insert("MA_CMHSPNLSET", MA_CMHSPNLSET_Field);
	m_HashedMap_MANDB100.insert("ED_TPREC", ED_TPREC_Field);
	m_HashedMap_MANDB100.insert("WIPMETSET", WIPMETSET_Field);
	m_HashedMap_MANDB100.insert("AP_PROJHSHSET", AP_PROJHSHSET_Field);
	m_HashedMap_MANDB100.insert("TRKREC", TRKREC_Field);
	m_HashedMap_MANDB100.insert("MA_SODREC", MA_SODREC_Field);
	m_HashedMap_MANDB100.insert("AP_VNOTEREC", AP_VNOTEREC_Field);
	m_HashedMap_MANDB100.insert("SODREC", SODREC_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTPOSTSET", MA_ACCTPOSTSET_Field);
	m_HashedMap_MANDB100.insert("AP_VCHPOSTSET", AP_VCHPOSTSET_Field);
	m_HashedMap_MANDB100.insert("AP_SEARCHHSHSET", AP_SEARCHHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_PROJAPSET", GL_PROJAPSET_Field);
	m_HashedMap_MANDB100.insert("EMPLABPYSET", EMPLABPYSET_Field);
	m_HashedMap_MANDB100.insert("RTGREC", RTGREC_Field);
	m_HashedMap_MANDB100.insert("MA_DMHREC", MA_DMHREC_Field);
	m_HashedMap_MANDB100.insert("MA_STERREC", MA_STERREC_Field);
	m_HashedMap_MANDB100.insert("FA_PROJHSHSET", FA_PROJHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRPTFCPRTABSET", MA_PRPTFCPRTABSET_Field);
	m_HashedMap_MANDB100.insert("POHPODSET", POHPODSET_Field);
	m_HashedMap_MANDB100.insert("GL_PROJAMTSET", GL_PROJAMTSET_Field);
	m_HashedMap_MANDB100.insert("RESHSHSET", RESHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHPCOMCSET", MA_SHPCOMCSET_Field);
	m_HashedMap_MANDB100.insert("GL_ACCTDESCSET", GL_ACCTDESCSET_Field);
	m_HashedMap_MANDB100.insert("AP_PNOTHSHSET", AP_PNOTHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_FPFRSET", GL_FPFRSET_Field);
	m_HashedMap_MANDB100.insert("MRLMRHSET", MRLMRHSET_Field);
	m_HashedMap_MANDB100.insert("GL_ARPT_HREC", GL_ARPT_HREC_Field);
	m_HashedMap_MANDB100.insert("MA_TXINHSET", MA_TXINHSET_Field);
	m_HashedMap_MANDB100.insert("MA_CHGDCOMOCLSET", MA_CHGDCOMOCLSET_Field);
	m_HashedMap_MANDB100.insert("GL_ABUDREC", GL_ABUDREC_Field);
	m_HashedMap_MANDB100.insert("BYDREC", BYDREC_Field);
	m_HashedMap_MANDB100.insert("ACTREC", ACTREC_Field);
	m_HashedMap_MANDB100.insert("MA_INHPRTSET", MA_INHPRTSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHDPREC", MA_SHDPREC_Field);
	m_HashedMap_MANDB100.insert("GL_FPOFFPROJSET", GL_FPOFFPROJSET_Field);
	m_HashedMap_MANDB100.insert("MA_POSTHSHSET", MA_POSTHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_JVREC", GL_JVREC_Field);
	m_HashedMap_MANDB100.insert("AP_SEARCHSRTSET", AP_SEARCHSRTSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRODCOMOSET", MA_PRODCOMOSET_Field);
	m_HashedMap_MANDB100.insert("PRTQOHSET", PRTQOHSET_Field);
	m_HashedMap_MANDB100.insert("PONREC", PONREC_Field);
	m_HashedMap_MANDB100.insert("BORREC", BORREC_Field);
	m_HashedMap_MANDB100.insert("MA_PARTREC", MA_PARTREC_Field);
	m_HashedMap_MANDB100.insert("ECCREC", ECCREC_Field);
	m_HashedMap_MANDB100.insert("MA_SODQUODSET", MA_SODQUODSET_Field);
	m_HashedMap_MANDB100.insert("MA_CMDMREC", MA_CMDMREC_Field);
	m_HashedMap_MANDB100.insert("AP_VNDVCHSET", AP_VNDVCHSET_Field);
	m_HashedMap_MANDB100.insert("PRTHSHSET", PRTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_STGHSHSET", MA_STGHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_FPOFFACCTSET", GL_FPOFFACCTSET_Field);
	m_HashedMap_MANDB100.insert("MA_PARTOPTSET", MA_PARTOPTSET_Field);
	m_HashedMap_MANDB100.insert("FRTHSHSET", FRTHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_CLEARSET", GL_CLEARSET_Field);
	m_HashedMap_MANDB100.insert("OPCPRTSET", OPCPRTSET_Field);
	m_HashedMap_MANDB100.insert("LOTHSHSET", LOTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SOCATHSHSET", MA_SOCATHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_OPLINKSET", GL_OPLINKSET_Field);
	m_HashedMap_MANDB100.insert("CURREC", CURREC_Field);
	m_HashedMap_MANDB100.insert("MA_FRTREC", MA_FRTREC_Field);
	m_HashedMap_MANDB100.insert("MA_CMHDMHLSET", MA_CMHDMHLSET_Field);
	m_HashedMap_MANDB100.insert("GL_VPHSHSET", GL_VPHSHSET_Field);
	m_HashedMap_MANDB100.insert("PODPOPSET", PODPOPSET_Field);
	m_HashedMap_MANDB100.insert("ED_ENTAUDSET", ED_ENTAUDSET_Field);
	m_HashedMap_MANDB100.insert("CDLCOPSET", CDLCOPSET_Field);
	m_HashedMap_MANDB100.insert("WOHACLSET", WOHACLSET_Field);
	m_HashedMap_MANDB100.insert("INVLOCSET", INVLOCSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHWOPOSTSET", MA_INHWOPOSTSET_Field);
	m_HashedMap_MANDB100.insert("MA_DMHSPISET", MA_DMHSPISET_Field);
	m_HashedMap_MANDB100.insert("MA_BILCMHSET", MA_BILCMHSET_Field);
	m_HashedMap_MANDB100.insert("CPRREC", CPRREC_Field);
	m_HashedMap_MANDB100.insert("RCTMREC", RCTMREC_Field);
	m_HashedMap_MANDB100.insert("MA_PRODGLTABSET", MA_PRODGLTABSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHHSHSET", MA_INHHSHSET_Field);
	m_HashedMap_MANDB100.insert("COHHSHSET", COHHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_LINKDESCSET", GL_LINKDESCSET_Field);
	m_HashedMap_MANDB100.insert("WIPRATSET", WIPRATSET_Field);
	m_HashedMap_MANDB100.insert("VMCHSHSET", VMCHSHSET_Field);
	m_HashedMap_MANDB100.insert("PRTSRTSET", PRTSRTSET_Field);
	m_HashedMap_MANDB100.insert("LOTACSTSET", LOTACSTSET_Field);
	m_HashedMap_MANDB100.insert("MA_CHGDCOMCLSET", MA_CHGDCOMCLSET_Field);
	m_HashedMap_MANDB100.insert("ED_ENTPRDXRFSET", ED_ENTPRDXRFSET_Field);
	m_HashedMap_MANDB100.insert("FA_ACCTREC", FA_ACCTREC_Field);
	m_HashedMap_MANDB100.insert("MFGSET", MFGSET_Field);
	m_HashedMap_MANDB100.insert("MA_APCREC", MA_APCREC_Field);
	m_HashedMap_MANDB100.insert("PODDELSET", PODDELSET_Field);
	m_HashedMap_MANDB100.insert("ECOSET", ECOSET_Field);
	m_HashedMap_MANDB100.insert("CDAREC", CDAREC_Field);
	m_HashedMap_MANDB100.insert("MA_PLINPRODSET", MA_PLINPRODSET_Field);
	m_HashedMap_MANDB100.insert("MA_CHGHHSHSET", MA_CHGHHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_POPREC", AP_POPREC_Field);
	m_HashedMap_MANDB100.insert("AP_PROJPOSTSET", AP_PROJPOSTSET_Field);
	m_HashedMap_MANDB100.insert("MA_PFAMPLINSET", MA_PFAMPLINSET_Field);
	m_HashedMap_MANDB100.insert("WARREC", WARREC_Field);
	m_HashedMap_MANDB100.insert("CUREXREC", CUREXREC_Field);
	m_HashedMap_MANDB100.insert("RQDREC", RQDREC_Field);
	m_HashedMap_MANDB100.insert("POHHSHSET", POHHSHSET_Field);
	m_HashedMap_MANDB100.insert("PRTREC", PRTREC_Field);
	m_HashedMap_MANDB100.insert("AP_BNKHSHSET", AP_BNKHSHSET_Field);
	m_HashedMap_MANDB100.insert("ACTPOSET", ACTPOSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILSREC", MA_BILSREC_Field);
	m_HashedMap_MANDB100.insert("MTRREC", MTRREC_Field);
	m_HashedMap_MANDB100.insert("AP_POHPOHSET", AP_POHPOHSET_Field);
	m_HashedMap_MANDB100.insert("SPDSET", SPDSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILINHSET", MA_BILINHSET_Field);
	m_HashedMap_MANDB100.insert("MA_FRTTREC", MA_FRTTREC_Field);
	m_HashedMap_MANDB100.insert("MA_DMHSPNLSET", MA_DMHSPNLSET_Field);
	m_HashedMap_MANDB100.insert("EMPHSHSET", EMPHSHSET_Field);
	m_HashedMap_MANDB100.insert("ACTDLSET", ACTDLSET_Field);
	m_HashedMap_MANDB100.insert("GL_FPTOPROJSET", GL_FPTOPROJSET_Field);
	m_HashedMap_MANDB100.insert("MA_INTHSHSET", MA_INTHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_VPNUMSET", GL_VPNUMSET_Field);
	m_HashedMap_MANDB100.insert("GL_PROJPOSTSET", GL_PROJPOSTSET_Field);
	m_HashedMap_MANDB100.insert("POHBOLLSET", POHBOLLSET_Field);
	m_HashedMap_MANDB100.insert("GL_MOLINKSET", GL_MOLINKSET_Field);
	m_HashedMap_MANDB100.insert("MA_SERHSHSET", MA_SERHSHSET_Field);
	m_HashedMap_MANDB100.insert("BOLHSHSET", BOLHSHSET_Field);
	m_HashedMap_MANDB100.insert("ED_PRDXRFREC", ED_PRDXRFREC_Field);
	m_HashedMap_MANDB100.insert("GL_FOLINKSET", GL_FOLINKSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRODHSHSET", MA_PRODHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_BNKOPENSET", AP_BNKOPENSET_Field);
	m_HashedMap_MANDB100.insert("DRLABSET", DRLABSET_Field);
	m_HashedMap_MANDB100.insert("MA_CHGDREC", MA_CHGDREC_Field);
	m_HashedMap_MANDB100.insert("AP_INVRCTSET", AP_INVRCTSET_Field);
	m_HashedMap_MANDB100.insert("SOHHSH2SET", SOHHSH2SET_Field);
	m_HashedMap_MANDB100.insert("BOLLREC", BOLLREC_Field);
	m_HashedMap_MANDB100.insert("MA_DMHHSHSET", MA_DMHHSHSET_Field);
	m_HashedMap_MANDB100.insert("PRTMATSET", PRTMATSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILCTBILSET", MA_BILCTBILSET_Field);
	m_HashedMap_MANDB100.insert("REFREC", REFREC_Field);
	m_HashedMap_MANDB100.insert("COHCDLSET", COHCDLSET_Field);
	m_HashedMap_MANDB100.insert("IDHSHSET", IDHSHSET_Field);
	m_HashedMap_MANDB100.insert("GENREC", GENREC_Field);
	m_HashedMap_MANDB100.insert("ENGHSHSET", ENGHSHSET_Field);
	m_HashedMap_MANDB100.insert("COHREC", COHREC_Field);
	m_HashedMap_MANDB100.insert("RQHHSHSET", RQHHSHSET_Field);
	m_HashedMap_MANDB100.insert("ACTOOSET", ACTOOSET_Field);
	m_HashedMap_MANDB100.insert("AP_INVREC", AP_INVREC_Field);
	m_HashedMap_MANDB100.insert("ACTDFASET", ACTDFASET_Field);
	m_HashedMap_MANDB100.insert("MA_TXLREC", MA_TXLREC_Field);
	m_HashedMap_MANDB100.insert("AP_VCHPNOTVCHSET", AP_VCHPNOTVCHSET_Field);
	m_HashedMap_MANDB100.insert("AP_SEARCHVNDSET", AP_SEARCHVNDSET_Field);
	m_HashedMap_MANDB100.insert("MA_CMDCOMOSET", MA_CMDCOMOSET_Field);
	m_HashedMap_MANDB100.insert("OPNPOHSET", OPNPOHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INTREC", MA_INTREC_Field);
	m_HashedMap_MANDB100.insert("ECOHSHSET", ECOHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_PFAMHSHSET", MA_PFAMHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_ACCTREC", AP_ACCTREC_Field);
	m_HashedMap_MANDB100.insert("PRHREC", PRHREC_Field);
	m_HashedMap_MANDB100.insert("WIPJOBSET", WIPJOBSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHDREC", MA_SHDREC_Field);
	m_HashedMap_MANDB100.insert("ENGENDSET", ENGENDSET_Field);
	m_HashedMap_MANDB100.insert("VENPRHSET", VENPRHSET_Field);
	m_HashedMap_MANDB100.insert("CDLREC", CDLREC_Field);
	m_HashedMap_MANDB100.insert("CDACDPSET", CDACDPSET_Field);
	m_HashedMap_MANDB100.insert("GL_PRPTDESCSET", GL_PRPTDESCSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHDSPISET", MA_SHDSPISET_Field);
	m_HashedMap_MANDB100.insert("INVREC", INVREC_Field);
	m_HashedMap_MANDB100.insert("MA_CHGHREC", MA_CHGHREC_Field);
	m_HashedMap_MANDB100.insert("GL_REPROJSET", GL_REPROJSET_Field);
	m_HashedMap_MANDB100.insert("WIPHSHSET", WIPHSHSET_Field);
	m_HashedMap_MANDB100.insert("PRTPRDSET", PRTPRDSET_Field);
	m_HashedMap_MANDB100.insert("PRTSODSET", PRTSODSET_Field);
	m_HashedMap_MANDB100.insert("MA_SPNREC", MA_SPNREC_Field);
	m_HashedMap_MANDB100.insert("LOCREC", LOCREC_Field);
	m_HashedMap_MANDB100.insert("AP_CHKNOTSET", AP_CHKNOTSET_Field);
	m_HashedMap_MANDB100.insert("MA_CMHINHLSET", MA_CMHINHLSET_Field);
	m_HashedMap_MANDB100.insert("WIPSET", WIPSET_Field);
	m_HashedMap_MANDB100.insert("GL_VPTOACCTSET", GL_VPTOACCTSET_Field);
	m_HashedMap_MANDB100.insert("IDPRHSET", IDPRHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SERREC", MA_SERREC_Field);
	m_HashedMap_MANDB100.insert("MA_SODOPTSET", MA_SODOPTSET_Field);
	m_HashedMap_MANDB100.insert("MA_GLPTHSHSET", MA_GLPTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHPREC", MA_SHPREC_Field);
	m_HashedMap_MANDB100.insert("MFGREC", MFGREC_Field);
	m_HashedMap_MANDB100.insert("PRTINTSET", PRTINTSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHDPSERSET", MA_SHDPSERSET_Field);
	m_HashedMap_MANDB100.insert("MA_TXCMHSET", MA_TXCMHSET_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTPPDSET", MA_ACCTPPDSET_Field);
	m_HashedMap_MANDB100.insert("GL_REHSHSET", GL_REHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_PAYPLTSET", AP_PAYPLTSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILREC", MA_BILREC_Field);
	m_HashedMap_MANDB100.insert("SPDREC", SPDREC_Field);
	m_HashedMap_MANDB100.insert("PAYHSHSET", PAYHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_CMHREC", MA_CMHREC_Field);
	m_HashedMap_MANDB100.insert("MA_CMDSPISET", MA_CMDSPISET_Field);
	m_HashedMap_MANDB100.insert("OPCHSHSET", OPCHSHSET_Field);
	m_HashedMap_MANDB100.insert("MRQREC", MRQREC_Field);
	m_HashedMap_MANDB100.insert("MA_PAYTDREC", MA_PAYTDREC_Field);
	m_HashedMap_MANDB100.insert("GL_ACCTAMTSET", GL_ACCTAMTSET_Field);
	m_HashedMap_MANDB100.insert("MA_RSNREC", MA_RSNREC_Field);
	m_HashedMap_MANDB100.insert("LABREC", LABREC_Field);
	m_HashedMap_MANDB100.insert("MA_CMHHSHSET", MA_CMHHSHSET_Field);
	m_HashedMap_MANDB100.insert("PRTDESSET", PRTDESSET_Field);
	m_HashedMap_MANDB100.insert("GL_PRPT_DREC", GL_PRPT_DREC_Field);
	m_HashedMap_MANDB100.insert("MA_INHUPDSET", MA_INHUPDSET_Field);
	m_HashedMap_MANDB100.insert("GL_PROJBUDSET", GL_PROJBUDSET_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTPRVARSET", MA_ACCTPRVARSET_Field);
	m_HashedMap_MANDB100.insert("EMPLABSET", EMPLABSET_Field);
	m_HashedMap_MANDB100.insert("GL_JVDESCSET", GL_JVDESCSET_Field);
	m_HashedMap_MANDB100.insert("AP_RECPAYPOSTSET", AP_RECPAYPOSTSET_Field);
	m_HashedMap_MANDB100.insert("PRHPONSET", PRHPONSET_Field);
	m_HashedMap_MANDB100.insert("MA_ACTSTGSET", MA_ACTSTGSET_Field);
	m_HashedMap_MANDB100.insert("MA_COMCLREC", MA_COMCLREC_Field);
	m_HashedMap_MANDB100.insert("FLGREC", FLGREC_Field);
	m_HashedMap_MANDB100.insert("MA_SOHHSHSET", MA_SOHHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHPCOMOSET", MA_SHPCOMOSET_Field);
	m_HashedMap_MANDB100.insert("AP_RECPAYHSHSET", AP_RECPAYHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_FISCHSHSET", GL_FISCHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTLINDSET", MA_ACCTLINDSET_Field);
	m_HashedMap_MANDB100.insert("MA_SOHINHSET", MA_SOHINHSET_Field);
	m_HashedMap_MANDB100.insert("AP_BNKVNDSET", AP_BNKVNDSET_Field);
	m_HashedMap_MANDB100.insert("AP_INVVCHSET", AP_INVVCHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHHSODSET", MA_SHHSODSET_Field);
	m_HashedMap_MANDB100.insert("GL_VPBATSET", GL_VPBATSET_Field);
	m_HashedMap_MANDB100.insert("GL_FP_DREC", GL_FP_DREC_Field);
	m_HashedMap_MANDB100.insert("GL_VPDENACCTSET", GL_VPDENACCTSET_Field);
	m_HashedMap_MANDB100.insert("GL_ARPTDESCSET", GL_ARPTDESCSET_Field);
	m_HashedMap_MANDB100.insert("GL_PROJMASET", GL_PROJMASET_Field);
	m_HashedMap_MANDB100.insert("MA_SHPSHPSSET", MA_SHPSHPSSET_Field);
	m_HashedMap_MANDB100.insert("MA_SODSTGPSET", MA_SODSTGPSET_Field);
	m_HashedMap_MANDB100.insert("PRTMRHSET", PRTMRHSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRTABREC", MA_PRTABREC_Field);
	m_HashedMap_MANDB100.insert("PFAMREC", PFAMREC_Field);
	m_HashedMap_MANDB100.insert("AP_1099REC", AP_1099REC_Field);
	m_HashedMap_MANDB100.insert("GL_TRDESCSET", GL_TRDESCSET_Field);
	m_HashedMap_MANDB100.insert("TOOHSHSET", TOOHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_ACCTBUDSET", GL_ACCTBUDSET_Field);
	m_HashedMap_MANDB100.insert("AP_POHHSHSET", AP_POHHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_PROJHSHSET", MA_PROJHSHSET_Field);
	m_HashedMap_MANDB100.insert("ENCREC", ENCREC_Field);
	m_HashedMap_MANDB100.insert("ED_ENTDOCSET", ED_ENTDOCSET_Field);
	m_HashedMap_MANDB100.insert("MA_TXSOHSET", MA_TXSOHSET_Field);
	m_HashedMap_MANDB100.insert("PRHCPRSET", PRHCPRSET_Field);
	m_HashedMap_MANDB100.insert("ECCSET", ECCSET_Field);
	m_HashedMap_MANDB100.insert("MA_CMDSPNLSET", MA_CMDSPNLSET_Field);
	m_HashedMap_MANDB100.insert("GL_PROJHSHSET", GL_PROJHSHSET_Field);
	m_HashedMap_MANDB100.insert("LOCSET", LOCSET_Field);
	m_HashedMap_MANDB100.insert("GL_BATCHSHSET", GL_BATCHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTHSHSET", MA_ACCTHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_MCLINKSET", GL_MCLINKSET_Field);
	m_HashedMap_MANDB100.insert("USGREC", USGREC_Field);
	m_HashedMap_MANDB100.insert("MA_BILDMHSET", MA_BILDMHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SOHCOMCSET", MA_SOHCOMCSET_Field);
	m_HashedMap_MANDB100.insert("MA_SPNHSHSET", MA_SPNHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SAMSAMSSET", MA_SAMSAMSSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILBILSSET", MA_BILBILSSET_Field);
	m_HashedMap_MANDB100.insert("MA_QUODHSHSET", MA_QUODHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_VATPOST2SET", AP_VATPOST2SET_Field);
	m_HashedMap_MANDB100.insert("GL_JVHSHSET", GL_JVHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_BEFTPMTSET", AP_BEFTPMTSET_Field);
	m_HashedMap_MANDB100.insert("ACTLOCSET", ACTLOCSET_Field);
	m_HashedMap_MANDB100.insert("AP_HDRSET", AP_HDRSET_Field);
	m_HashedMap_MANDB100.insert("MISREC", MISREC_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTREC", MA_ACCTREC_Field);
	m_HashedMap_MANDB100.insert("AP_VCHPOHSET", AP_VCHPOHSET_Field);
	m_HashedMap_MANDB100.insert("AP_ACCTTYPEREC", AP_ACCTTYPEREC_Field);
	m_HashedMap_MANDB100.insert("BOLBOLLSET", BOLBOLLSET_Field);
	m_HashedMap_MANDB100.insert("AP_VATHSHSET", AP_VATHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_ARPTSET", GL_ARPTSET_Field);
	m_HashedMap_MANDB100.insert("AP_RECPAYNOTESET", AP_RECPAYNOTESET_Field);
	m_HashedMap_MANDB100.insert("MA_INHLREC", MA_INHLREC_Field);
	m_HashedMap_MANDB100.insert("MA_CMHPOSTSET", MA_CMHPOSTSET_Field);
	m_HashedMap_MANDB100.insert("GL_VPOFFPROJSET", GL_VPOFFPROJSET_Field);
	m_HashedMap_MANDB100.insert("AP_CHKPOSTSET", AP_CHKPOSTSET_Field);
	m_HashedMap_MANDB100.insert("MA_TXTHSHSET", MA_TXTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INDMCMDMSET", MA_INDMCMDMSET_Field);
	m_HashedMap_MANDB100.insert("GL_FPHSHSET", GL_FPHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHAPCSET", MA_INHAPCSET_Field);
	m_HashedMap_MANDB100.insert("GL_ARPT_NREC", GL_ARPT_NREC_Field);
	m_HashedMap_MANDB100.insert("MA_QUOHHSHSET", MA_QUOHHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_STGPREC", MA_STGPREC_Field);
	m_HashedMap_MANDB100.insert("FLDREC", FLDREC_Field);
	m_HashedMap_MANDB100.insert("RESBORSET", RESBORSET_Field);
	m_HashedMap_MANDB100.insert("VENSHPSET", VENSHPSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRCTPRTABSET", MA_PRCTPRTABSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRODPRODSSET", MA_PRODPRODSSET_Field);
	m_HashedMap_MANDB100.insert("CODREC", CODREC_Field);
	m_HashedMap_MANDB100.insert("MA_QUODOPTSET", MA_QUODOPTSET_Field);
	m_HashedMap_MANDB100.insert("MA_CPOREC", MA_CPOREC_Field);
	m_HashedMap_MANDB100.insert("MA_CMHCMDSET", MA_CMHCMDSET_Field);
	m_HashedMap_MANDB100.insert("ED_AUDDOCSET", ED_AUDDOCSET_Field);
	m_HashedMap_MANDB100.insert("WKCTRKSET", WKCTRKSET_Field);
	m_HashedMap_MANDB100.insert("MA_OPTREC", MA_OPTREC_Field);
	m_HashedMap_MANDB100.insert("GL_ACCTMASET", GL_ACCTMASET_Field);
	m_HashedMap_MANDB100.insert("MA_PRPTPRTABSET", MA_PRPTPRTABSET_Field);
	m_HashedMap_MANDB100.insert("MA_INDCOMOSET", MA_INDCOMOSET_Field);
	m_HashedMap_MANDB100.insert("PRTMTRSET", PRTMTRSET_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTCOGSSET", MA_ACCTCOGSSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHSPNLSET", MA_INHSPNLSET_Field);
	m_HashedMap_MANDB100.insert("SOHSODSET", SOHSODSET_Field);
	m_HashedMap_MANDB100.insert("MA_SVINDREC", MA_SVINDREC_Field);
	m_HashedMap_MANDB100.insert("CRLABSET", CRLABSET_Field);
	m_HashedMap_MANDB100.insert("GENHSHSET", GENHSHSET_Field);
	m_HashedMap_MANDB100.insert("TOOTWUSET", TOOTWUSET_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTTRASET", MA_ACCTTRASET_Field);
	m_HashedMap_MANDB100.insert("ED_AUDHSHSET", ED_AUDHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SOHSHHSET", MA_SOHSHHSET_Field);
	m_HashedMap_MANDB100.insert("GL_PAMTREC", GL_PAMTREC_Field);
	m_HashedMap_MANDB100.insert("ED_ENTREC", ED_ENTREC_Field);
	m_HashedMap_MANDB100.insert("MA_INHSPISET", MA_INHSPISET_Field);
	m_HashedMap_MANDB100.insert("GL_LINK_NREC", GL_LINK_NREC_Field);
	m_HashedMap_MANDB100.insert("GL_FPFRACCTSET", GL_FPFRACCTSET_Field);
	m_HashedMap_MANDB100.insert("AP_POHVCHREC", AP_POHVCHREC_Field);
	m_HashedMap_MANDB100.insert("MA_CTERSHPSET", MA_CTERSHPSET_Field);
	m_HashedMap_MANDB100.insert("CSTREC", CSTREC_Field);
	m_HashedMap_MANDB100.insert("AP_PPVNDSET", AP_PPVNDSET_Field);
	m_HashedMap_MANDB100.insert("AP_INVHSHSET", AP_INVHSHSET_Field);
	m_HashedMap_MANDB100.insert("IDREC", IDREC_Field);
	m_HashedMap_MANDB100.insert("MA_SHHHSHSET", MA_SHHHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHREC", MA_INHREC_Field);
	m_HashedMap_MANDB100.insert("IRCTREC", IRCTREC_Field);
	m_HashedMap_MANDB100.insert("MA_CPOHSHSET", MA_CPOHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_PLINREC", MA_PLINREC_Field);
	m_HashedMap_MANDB100.insert("BOLRCTSET", BOLRCTSET_Field);
	m_HashedMap_MANDB100.insert("AP_INVRCTRCTMSET", AP_INVRCTRCTMSET_Field);
	m_HashedMap_MANDB100.insert("GL_RE_HREC", GL_RE_HREC_Field);
	m_HashedMap_MANDB100.insert("MA_STGPHSHSET", MA_STGPHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_ISBSREC", GL_ISBSREC_Field);
	m_HashedMap_MANDB100.insert("AUTREC", AUTREC_Field);
	m_HashedMap_MANDB100.insert("MA_SPNSPNLSET", MA_SPNSPNLSET_Field);
	m_HashedMap_MANDB100.insert("SPNHSHSET", SPNHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SPIREC", MA_SPIREC_Field);
	m_HashedMap_MANDB100.insert("GL_VPTOSET", GL_VPTOSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHSVINHSET", MA_INHSVINHSET_Field);
	m_HashedMap_MANDB100.insert("MA_ACTCOGSSET", MA_ACTCOGSSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHDSPNLSET", MA_SHDSPNLSET_Field);
	m_HashedMap_MANDB100.insert("AP_VNDBOLSET", AP_VNDBOLSET_Field);
	m_HashedMap_MANDB100.insert("VENIRCTSET", VENIRCTSET_Field);
	m_HashedMap_MANDB100.insert("AP_CNOTEREC", AP_CNOTEREC_Field);
	m_HashedMap_MANDB100.insert("AP_POHREC", AP_POHREC_Field);
	m_HashedMap_MANDB100.insert("AP_PNOTREC", AP_PNOTREC_Field);
	m_HashedMap_MANDB100.insert("MISMISREFSET", MISMISREFSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRODFCPRTABSET", MA_PRODFCPRTABSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRODOPTSET", MA_PRODOPTSET_Field);
	m_HashedMap_MANDB100.insert("AP_RCTHSHSET", AP_RCTHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_FPFRLINKREC", GL_FPFRLINKREC_Field);
	m_HashedMap_MANDB100.insert("MA_HLDHSHSET", MA_HLDHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INDMREC", MA_INDMREC_Field);
	m_HashedMap_MANDB100.insert("MA_PAYTHSHSET", MA_PAYTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_POSTREC", MA_POSTREC_Field);
	m_HashedMap_MANDB100.insert("GL_ABUDSET", GL_ABUDSET_Field);
	m_HashedMap_MANDB100.insert("RCTREC", RCTREC_Field);
	m_HashedMap_MANDB100.insert("MA_SODCOMOSET", MA_SODCOMOSET_Field);
	m_HashedMap_MANDB100.insert("MA_SAMCOMOSET", MA_SAMCOMOSET_Field);
	m_HashedMap_MANDB100.insert("WKCLABSET", WKCLABSET_Field);
	m_HashedMap_MANDB100.insert("MA_GLPTREC", MA_GLPTREC_Field);
	m_HashedMap_MANDB100.insert("TRKTRDSET", TRKTRDSET_Field);
	m_HashedMap_MANDB100.insert("GL_ARPTHSHSET", GL_ARPTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_GLCTBILSET", MA_GLCTBILSET_Field);
	m_HashedMap_MANDB100.insert("PRTPFAMSET", PRTPFAMSET_Field);
	m_HashedMap_MANDB100.insert("AP_BOLHSHSET", AP_BOLHSHSET_Field);
	m_HashedMap_MANDB100.insert("COPREC", COPREC_Field);
	m_HashedMap_MANDB100.insert("VENRCTSET", VENRCTSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHCMHSET", MA_INHCMHSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILCTREC", MA_BILCTREC_Field);
	m_HashedMap_MANDB100.insert("ED_ENTMMHSHSET", ED_ENTMMHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_GLPTPRODSET", MA_GLPTPRODSET_Field);
	m_HashedMap_MANDB100.insert("ED_TPHSHSET", ED_TPHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INDCMDSET", MA_INDCMDSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILCIASET", MA_BILCIASET_Field);
	m_HashedMap_MANDB100.insert("MA_CMHVDPOSTSET", MA_CMHVDPOSTSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRODSREC", MA_PRODSREC_Field);
	m_HashedMap_MANDB100.insert("PRTPODSET", PRTPODSET_Field);
	m_HashedMap_MANDB100.insert("INVLOC2SET", INVLOC2SET_Field);
	m_HashedMap_MANDB100.insert("WOHMOVSET", WOHMOVSET_Field);
	m_HashedMap_MANDB100.insert("FSCREC", FSCREC_Field);
	m_HashedMap_MANDB100.insert("AP_INVRCTMREC", AP_INVRCTMREC_Field);
	m_HashedMap_MANDB100.insert("AP_DMVCHREC", AP_DMVCHREC_Field);
	m_HashedMap_MANDB100.insert("GL_ACCTPOSTSET", GL_ACCTPOSTSET_Field);
	m_HashedMap_MANDB100.insert("COMSET", COMSET_Field);
	m_HashedMap_MANDB100.insert("AP_VATPOSTSET", AP_VATPOSTSET_Field);
	m_HashedMap_MANDB100.insert("RQHREC", RQHREC_Field);
	m_HashedMap_MANDB100.insert("MA_SAMHSHSET", MA_SAMHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHINDSET", MA_INHINDSET_Field);
	m_HashedMap_MANDB100.insert("CURCUREXSET", CURCUREXSET_Field);
	m_HashedMap_MANDB100.insert("AP_BTCHEFTREC", AP_BTCHEFTREC_Field);
	m_HashedMap_MANDB100.insert("PODPRDSET", PODPRDSET_Field);
	m_HashedMap_MANDB100.insert("GL_ISBSACCTSET", GL_ISBSACCTSET_Field);
	m_HashedMap_MANDB100.insert("GL_VPFRLINKREC", GL_VPFRLINKREC_Field);
	m_HashedMap_MANDB100.insert("MA_COMCCOMCLSET", MA_COMCCOMCLSET_Field);
	m_HashedMap_MANDB100.insert("PFAMHSHSET", PFAMHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_POSTREC", AP_POSTREC_Field);
	m_HashedMap_MANDB100.insert("MRHMRQSET", MRHMRQSET_Field);
	m_HashedMap_MANDB100.insert("MA_STGSTGPSET", MA_STGSTGPSET_Field);
	m_HashedMap_MANDB100.insert("GL_VPNUMACCTSET", GL_VPNUMACCTSET_Field);
	m_HashedMap_MANDB100.insert("AP_BNKCHKSET", AP_BNKCHKSET_Field);
	m_HashedMap_MANDB100.insert("GL_RE_NREC", GL_RE_NREC_Field);
	m_HashedMap_MANDB100.insert("MA_INHINHLSET", MA_INHINHLSET_Field);
	m_HashedMap_MANDB100.insert("WKCHSHSET", WKCHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHPNOTINVSET", MA_INHPNOTINVSET_Field);
	m_HashedMap_MANDB100.insert("PODPONSET", PODPONSET_Field);
	m_HashedMap_MANDB100.insert("AP_CHKHSHSET", AP_CHKHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_PROJ_NREC", GL_PROJ_NREC_Field);
	m_HashedMap_MANDB100.insert("CLDPOHSET", CLDPOHSET_Field);
	m_HashedMap_MANDB100.insert("AP_VNDHOLDSET", AP_VNDHOLDSET_Field);
	m_HashedMap_MANDB100.insert("VENHSHSET", VENHSHSET_Field);
	m_HashedMap_MANDB100.insert("ACTFOSET", ACTFOSET_Field);
	m_HashedMap_MANDB100.insert("PRTRCTSET", PRTRCTSET_Field);
	m_HashedMap_MANDB100.insert("GL_VPTOPROJSET", GL_VPTOPROJSET_Field);
	m_HashedMap_MANDB100.insert("MA_SVINDSPNLSET", MA_SVINDSPNLSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRTABHSHSET", MA_PRTABHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_VP_HREC", GL_VP_HREC_Field);
	m_HashedMap_MANDB100.insert("MA_SAMCOMCSET", MA_SAMCOMCSET_Field);
	m_HashedMap_MANDB100.insert("MA_SOHSPISET", MA_SOHSPISET_Field);
	m_HashedMap_MANDB100.insert("MA_SPNSPNDSET", MA_SPNSPNDSET_Field);
	m_HashedMap_MANDB100.insert("GL_PBUDREC", GL_PBUDREC_Field);
	m_HashedMap_MANDB100.insert("MA_SOHPRTSET", MA_SOHPRTSET_Field);
	m_HashedMap_MANDB100.insert("EMPSET", EMPSET_Field);
	m_HashedMap_MANDB100.insert("MRLREC", MRLREC_Field);
	m_HashedMap_MANDB100.insert("AUTPRHSET", AUTPRHSET_Field);
	m_HashedMap_MANDB100.insert("GL_VPFRACCTSET", GL_VPFRACCTSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRODCMDSET", MA_PRODCMDSET_Field);
	m_HashedMap_MANDB100.insert("MA_SAMSREC", MA_SAMSREC_Field);
	m_HashedMap_MANDB100.insert("MA_QUODSPNLSET", MA_QUODSPNLSET_Field);
	m_HashedMap_MANDB100.insert("MATREC", MATREC_Field);
	m_HashedMap_MANDB100.insert("MA_BILHSHSET", MA_BILHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_BEFTHSHSET", AP_BEFTHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_BOLLREC", AP_BOLLREC_Field);
	m_HashedMap_MANDB100.insert("MA_QUOHCOMOSET", MA_QUOHCOMOSET_Field);
	m_HashedMap_MANDB100.insert("PODREC", PODREC_Field);
	m_HashedMap_MANDB100.insert("AP_PDCHKSET", AP_PDCHKSET_Field);
	m_HashedMap_MANDB100.insert("CDPCDPLSET", CDPCDPLSET_Field);
	m_HashedMap_MANDB100.insert("PUNREC", PUNREC_Field);
	m_HashedMap_MANDB100.insert("AP_ACCTHSHSET", AP_ACCTHSHSET_Field);
	m_HashedMap_MANDB100.insert("FSCHSHSET", FSCHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_CIAPOSTSET", MA_CIAPOSTSET_Field);
	m_HashedMap_MANDB100.insert("AP_VCHREC", AP_VCHREC_Field);
	m_HashedMap_MANDB100.insert("MA_QUODSPISET", MA_QUODSPISET_Field);
	m_HashedMap_MANDB100.insert("MA_CMDREC", MA_CMDREC_Field);
	m_HashedMap_MANDB100.insert("CDPREC", CDPREC_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTUPPDSET", MA_ACCTUPPDSET_Field);
	m_HashedMap_MANDB100.insert("ED_ENTHSHSET", ED_ENTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INDMSPISET", MA_INDMSPISET_Field);
	m_HashedMap_MANDB100.insert("GL_JVTRSET", GL_JVTRSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRODTOPSET", MA_PRODTOPSET_Field);
	m_HashedMap_MANDB100.insert("AP_PMTHSHSET", AP_PMTHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_PROJREC", AP_PROJREC_Field);
	m_HashedMap_MANDB100.insert("MA_USRFLDSET", MA_USRFLDSET_Field);
	m_HashedMap_MANDB100.insert("PRDPONSET", PRDPONSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRODPRTABSET", MA_PRODPRTABSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRPTREC", MA_PRPTREC_Field);
	m_HashedMap_MANDB100.insert("GL_ACCTAPSET", GL_ACCTAPSET_Field);
	m_HashedMap_MANDB100.insert("AP_VNDINVSET", AP_VNDINVSET_Field);
	m_HashedMap_MANDB100.insert("GL_AAMTREC", GL_AAMTREC_Field);
	m_HashedMap_MANDB100.insert("RESREC", RESREC_Field);
	m_HashedMap_MANDB100.insert("BOMREC", BOMREC_Field);
	m_HashedMap_MANDB100.insert("POHREC", POHREC_Field);
	m_HashedMap_MANDB100.insert("MA_TXHSHSET", MA_TXHSHSET_Field);
	m_HashedMap_MANDB100.insert("ACTPODSET", ACTPODSET_Field);
	m_HashedMap_MANDB100.insert("MA_INTINHSET", MA_INTINHSET_Field);
	m_HashedMap_MANDB100.insert("POPREC", POPREC_Field);
	m_HashedMap_MANDB100.insert("GL_VPDENSET", GL_VPDENSET_Field);
	m_HashedMap_MANDB100.insert("MA_CMDMSPNLSET", MA_CMDMSPNLSET_Field);
	m_HashedMap_MANDB100.insert("POCOHSRTSET", POCOHSRTSET_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTPRTDSET", MA_ACCTPRTDSET_Field);
	m_HashedMap_MANDB100.insert("GL_TR_NREC", GL_TR_NREC_Field);
	m_HashedMap_MANDB100.insert("AP_VATVTPSTSET", AP_VATVTPSTSET_Field);
	m_HashedMap_MANDB100.insert("RCTRCTMSET", RCTRCTMSET_Field);
	m_HashedMap_MANDB100.insert("AP_PMTREC", AP_PMTREC_Field);
	m_HashedMap_MANDB100.insert("MA_SVINHSVINDSET", MA_SVINHSVINDSET_Field);
	m_HashedMap_MANDB100.insert("ED_TPPRDXRFSET", ED_TPPRDXRFSET_Field);
	m_HashedMap_MANDB100.insert("ECOREC", ECOREC_Field);
	m_HashedMap_MANDB100.insert("AP_INVRCTREC", AP_INVRCTREC_Field);
	m_HashedMap_MANDB100.insert("MA_SODSPISET", MA_SODSPISET_Field);
	m_HashedMap_MANDB100.insert("AP_APPOSTSET", AP_APPOSTSET_Field);
	m_HashedMap_MANDB100.insert("WIPCONSET", WIPCONSET_Field);
	m_HashedMap_MANDB100.insert("GL_PROJREC", GL_PROJREC_Field);
	m_HashedMap_MANDB100.insert("MA_TXTTXRTSET", MA_TXTTXRTSET_Field);
	m_HashedMap_MANDB100.insert("GL_FISCTRSET", GL_FISCTRSET_Field);
	m_HashedMap_MANDB100.insert("GL_PRPT_HREC", GL_PRPT_HREC_Field);
	m_HashedMap_MANDB100.insert("GL_VOLINKSET", GL_VOLINKSET_Field);
	m_HashedMap_MANDB100.insert("MA_SOHQUOHSET", MA_SOHQUOHSET_Field);
	m_HashedMap_MANDB100.insert("MA_PLINHSHSET", MA_PLINHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_PRPTSET", GL_PRPTSET_Field);
	m_HashedMap_MANDB100.insert("WIPMIXSET", WIPMIXSET_Field);
	m_HashedMap_MANDB100.insert("VENVMCSET", VENVMCSET_Field);
	m_HashedMap_MANDB100.insert("GL_LINKMFGSET", GL_LINKMFGSET_Field);
	m_HashedMap_MANDB100.insert("MA_GLCTREC", MA_GLCTREC_Field);
	m_HashedMap_MANDB100.insert("MA_PRCTHSHSET", MA_PRCTHSHSET_Field);
	m_HashedMap_MANDB100.insert("FRTBOLSET", FRTBOLSET_Field);
	m_HashedMap_MANDB100.insert("AP_BANKREC", AP_BANKREC_Field);
	m_HashedMap_MANDB100.insert("MA_PAYTPAYTDSET", MA_PAYTPAYTDSET_Field);
	m_HashedMap_MANDB100.insert("GL_FPDESCSET", GL_FPDESCSET_Field);
	m_HashedMap_MANDB100.insert("AP_VCHHSHSET", AP_VCHHSHSET_Field);
	m_HashedMap_MANDB100.insert("WARSET", WARSET_Field);
	m_HashedMap_MANDB100.insert("AP_DMVCHSET", AP_DMVCHSET_Field);
	m_HashedMap_MANDB100.insert("AUTAPPSET", AUTAPPSET_Field);
	m_HashedMap_MANDB100.insert("MA_GLTABREC", MA_GLTABREC_Field);
	m_HashedMap_MANDB100.insert("MA_QUOHREC", MA_QUOHREC_Field);
	m_HashedMap_MANDB100.insert("PRTMISSET", PRTMISSET_Field);
	m_HashedMap_MANDB100.insert("VENCOHSET", VENCOHSET_Field);
	m_HashedMap_MANDB100.insert("WIPLOTSET", WIPLOTSET_Field);
	m_HashedMap_MANDB100.insert("MA_SOHSODSET", MA_SOHSODSET_Field);
	m_HashedMap_MANDB100.insert("AP_RCTINRCSET", AP_RCTINRCSET_Field);
	m_HashedMap_MANDB100.insert("AP_CASHBNKSET", AP_CASHBNKSET_Field);
	m_HashedMap_MANDB100.insert("MA_TXREC", MA_TXREC_Field);
	m_HashedMap_MANDB100.insert("MA_INHCRPOSTSET", MA_INHCRPOSTSET_Field);
	m_HashedMap_MANDB100.insert("SPNREC", SPNREC_Field);
	m_HashedMap_MANDB100.insert("PRTBORSET", PRTBORSET_Field);
	m_HashedMap_MANDB100.insert("MA_QUOHSPNLSET", MA_QUOHSPNLSET_Field);
	m_HashedMap_MANDB100.insert("MA_SOHUPDSET", MA_SOHUPDSET_Field);
	m_HashedMap_MANDB100.insert("AP_DISCBNKSET", AP_DISCBNKSET_Field);
	m_HashedMap_MANDB100.insert("BYDHSHSET", BYDHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHINDMSET", MA_INHINDMSET_Field);
	m_HashedMap_MANDB100.insert("GL_FP_HREC", GL_FP_HREC_Field);
	m_HashedMap_MANDB100.insert("MA_PARTTOPSET", MA_PARTTOPSET_Field);
	m_HashedMap_MANDB100.insert("GL_REDESCSET", GL_REDESCSET_Field);
	m_HashedMap_MANDB100.insert("GL_VPOFFACCTSET", GL_VPOFFACCTSET_Field);
	m_HashedMap_MANDB100.insert("AP_BOLBOLLSET", AP_BOLBOLLSET_Field);
	m_HashedMap_MANDB100.insert("MA_SPFREC", MA_SPFREC_Field);
	m_HashedMap_MANDB100.insert("BOLREC", BOLREC_Field);
	m_HashedMap_MANDB100.insert("CURHSHSET", CURHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRODSODSET", MA_PRODSODSET_Field);
	m_HashedMap_MANDB100.insert("REFSET", REFSET_Field);
	m_HashedMap_MANDB100.insert("MA_INDSPISET", MA_INDSPISET_Field);
	m_HashedMap_MANDB100.insert("LOTREC", LOTREC_Field);
	m_HashedMap_MANDB100.insert("INVHSHSET", INVHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_QUOHPRTSET", MA_QUOHPRTSET_Field);
	m_HashedMap_MANDB100.insert("MA_CTERREC", MA_CTERREC_Field);
	m_HashedMap_MANDB100.insert("MA_PAKPRTSET", MA_PAKPRTSET_Field);
	m_HashedMap_MANDB100.insert("PRHPRDSET", PRHPRDSET_Field);
	m_HashedMap_MANDB100.insert("MSCREC", MSCREC_Field);
	m_HashedMap_MANDB100.insert("WOHMISSET", WOHMISSET_Field);
	m_HashedMap_MANDB100.insert("AP_PAYOR1099REC", AP_PAYOR1099REC_Field);
	m_HashedMap_MANDB100.insert("MA_DMHLREC", MA_DMHLREC_Field);
	m_HashedMap_MANDB100.insert("CCSRTSET", CCSRTSET_Field);
	m_HashedMap_MANDB100.insert("CODHSHSET", CODHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_RCTREC", AP_RCTREC_Field);
	m_HashedMap_MANDB100.insert("GL_REACCTSET", GL_REACCTSET_Field);
	m_HashedMap_MANDB100.insert("MA_GLCTHSHSET", MA_GLCTHSHSET_Field);
	m_HashedMap_MANDB100.insert("ED_TPENTSET", ED_TPENTSET_Field);
	m_HashedMap_MANDB100.insert("MA_GLPTTABSET", MA_GLPTTABSET_Field);
	m_HashedMap_MANDB100.insert("DFAHSHSET", DFAHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_ACCT_NREC", GL_ACCT_NREC_Field);
	m_HashedMap_MANDB100.insert("FSCCALREC", FSCCALREC_Field);
	m_HashedMap_MANDB100.insert("CDPLREC", CDPLREC_Field);
	m_HashedMap_MANDB100.insert("AP_RCTSET", AP_RCTSET_Field);
	m_HashedMap_MANDB100.insert("RTGTRKSET", RTGTRKSET_Field);
	m_HashedMap_MANDB100.insert("CDLCDASET", CDLCDASET_Field);
	m_HashedMap_MANDB100.insert("MA_STATETXSET", MA_STATETXSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHHSHDSET", MA_SHHSHDSET_Field);
	m_HashedMap_MANDB100.insert("TOOREC", TOOREC_Field);
	m_HashedMap_MANDB100.insert("ACTPCSET", ACTPCSET_Field);
	m_HashedMap_MANDB100.insert("MA_PAYTREC", MA_PAYTREC_Field);
	m_HashedMap_MANDB100.insert("AP_APVNDSET", AP_APVNDSET_Field);
	m_HashedMap_MANDB100.insert("RTDSET", RTDSET_Field);
	m_HashedMap_MANDB100.insert("MA_SOHSPNLSET", MA_SOHSPNLSET_Field);
	m_HashedMap_MANDB100.insert("PRTRQDSET", PRTRQDSET_Field);
	m_HashedMap_MANDB100.insert("ACTMOSET", ACTMOSET_Field);
	m_HashedMap_MANDB100.insert("AP_PLTREC", AP_PLTREC_Field);
	m_HashedMap_MANDB100.insert("GL_LINKHSHSET", GL_LINKHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_PMTNOTTRANSSET", AP_PMTNOTTRANSSET_Field);
	m_HashedMap_MANDB100.insert("AP_VND1099SET", AP_VND1099SET_Field);
	m_HashedMap_MANDB100.insert("MA_PROJREC", MA_PROJREC_Field);
	m_HashedMap_MANDB100.insert("MA_REMREC", MA_REMREC_Field);
	m_HashedMap_MANDB100.insert("AP_POHVCHSET", AP_POHVCHSET_Field);
	m_HashedMap_MANDB100.insert("SODINTSET", SODINTSET_Field);
	m_HashedMap_MANDB100.insert("CSTSET", CSTSET_Field);
	m_HashedMap_MANDB100.insert("MA_SODSHDSET", MA_SODSHDSET_Field);
	m_HashedMap_MANDB100.insert("FORREC", FORREC_Field);
	m_HashedMap_MANDB100.insert("BOMSET", BOMSET_Field);
	m_HashedMap_MANDB100.insert("TRDREC", TRDREC_Field);
	m_HashedMap_MANDB100.insert("RTGTWUSET", RTGTWUSET_Field);
	m_HashedMap_MANDB100.insert("MA_PARTHSHSET", MA_PARTHSHSET_Field);
	m_HashedMap_MANDB100.insert("POHPRNTSET", POHPRNTSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHPSREC", MA_SHPSREC_Field);
	m_HashedMap_MANDB100.insert("MA_STGREC", MA_STGREC_Field);
	m_HashedMap_MANDB100.insert("MRLHSHSET", MRLHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_PAYOR1099HSHSET", AP_PAYOR1099HSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_FPBATSET", GL_FPBATSET_Field);
	m_HashedMap_MANDB100.insert("PRTCDLSET", PRTCDLSET_Field);
	m_HashedMap_MANDB100.insert("MA_FRTTHSHSET", MA_FRTTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_CMHPRTSET", MA_CMHPRTSET_Field);
	m_HashedMap_MANDB100.insert("GL_BATCHREC", GL_BATCHREC_Field);
	m_HashedMap_MANDB100.insert("MA_POSTSPISET", MA_POSTSPISET_Field);
	m_HashedMap_MANDB100.insert("MA_CPOSOHSET", MA_CPOSOHSET_Field);
	m_HashedMap_MANDB100.insert("MA_USRREC", MA_USRREC_Field);
	m_HashedMap_MANDB100.insert("MA_TXRTTXLSET", MA_TXRTTXLSET_Field);
	m_HashedMap_MANDB100.insert("MA_QUODREC", MA_QUODREC_Field);
	m_HashedMap_MANDB100.insert("WOHMSCSET", WOHMSCSET_Field);
	m_HashedMap_MANDB100.insert("MA_CIAAPCSET", MA_CIAAPCSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILCTHSHSET", MA_BILCTHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_SPFHSHSET", MA_SPFHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_TXTREC", MA_TXTREC_Field);
	m_HashedMap_MANDB100.insert("MA_CMHCMDMSET", MA_CMHCMDMSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRTSTGPSET", MA_PRTSTGPSET_Field);
	m_HashedMap_MANDB100.insert("MA_BILSODSET", MA_BILSODSET_Field);
	m_HashedMap_MANDB100.insert("AP_ACCTTYPESET", AP_ACCTTYPESET_Field);
	m_HashedMap_MANDB100.insert("MA_SAMREC", MA_SAMREC_Field);
	m_HashedMap_MANDB100.insert("DESREC", DESREC_Field);
	m_HashedMap_MANDB100.insert("COHCONSET", COHCONSET_Field);
	m_HashedMap_MANDB100.insert("ENDREC", ENDREC_Field);
	m_HashedMap_MANDB100.insert("WARHSHSET", WARHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_PNOTREC", MA_PNOTREC_Field);
	m_HashedMap_MANDB100.insert("WOHTRKSET", WOHTRKSET_Field);
	m_HashedMap_MANDB100.insert("MA_SPNLREC", MA_SPNLREC_Field);
	m_HashedMap_MANDB100.insert("CRMTRSET", CRMTRSET_Field);
	m_HashedMap_MANDB100.insert("MA_CHGHCHGDSET", MA_CHGHCHGDSET_Field);
	m_HashedMap_MANDB100.insert("GL_ABUDHSHSET", GL_ABUDHSHSET_Field);
	m_HashedMap_MANDB100.insert("DFAREC", DFAREC_Field);
	m_HashedMap_MANDB100.insert("PRTPUNSET", PRTPUNSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHDSHDPSET", MA_SHDSHDPSET_Field);
	m_HashedMap_MANDB100.insert("EMPREC", EMPREC_Field);
	m_HashedMap_MANDB100.insert("ED_PRDHSHSET", ED_PRDHSHSET_Field);
	m_HashedMap_MANDB100.insert("MISREFREC", MISREFREC_Field);
	m_HashedMap_MANDB100.insert("LOCLOTSET", LOCLOTSET_Field);
	m_HashedMap_MANDB100.insert("GL_ACCTFASET", GL_ACCTFASET_Field);
	m_HashedMap_MANDB100.insert("PRTVMCSET", PRTVMCSET_Field);
	m_HashedMap_MANDB100.insert("MA_USRHSHSET", MA_USRHSHSET_Field);
	m_HashedMap_MANDB100.insert("QOHREC", QOHREC_Field);
	m_HashedMap_MANDB100.insert("AP_RECPAYVCHSET", AP_RECPAYVCHSET_Field);
	m_HashedMap_MANDB100.insert("GL_DLLINKSET", GL_DLLINKSET_Field);
	m_HashedMap_MANDB100.insert("MA_SVINHREC", MA_SVINHREC_Field);
	m_HashedMap_MANDB100.insert("MA_INHCOMCSET", MA_INHCOMCSET_Field);
	m_HashedMap_MANDB100.insert("INDFREC", INDFREC_Field);
	m_HashedMap_MANDB100.insert("PODPOMSET", PODPOMSET_Field);
	m_HashedMap_MANDB100.insert("GL_TRREC", GL_TRREC_Field);
	m_HashedMap_MANDB100.insert("MA_PRODREC", MA_PRODREC_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTRETSET", MA_ACCTRETSET_Field);
	m_HashedMap_MANDB100.insert("AP_PNOTVCHREC", AP_PNOTVCHREC_Field);
	m_HashedMap_MANDB100.insert("SODFAMSET", SODFAMSET_Field);
	m_HashedMap_MANDB100.insert("AP_VTPSTREC", AP_VTPSTREC_Field);
	m_HashedMap_MANDB100.insert("SOHHSHSET", SOHHSHSET_Field);
	m_HashedMap_MANDB100.insert("PRDREC", PRDREC_Field);
	m_HashedMap_MANDB100.insert("GL_RE_DREC", GL_RE_DREC_Field);
	m_HashedMap_MANDB100.insert("FLGHSHSET", FLGHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_ACCTRPTSET", GL_ACCTRPTSET_Field);
	m_HashedMap_MANDB100.insert("MA_CPOINHSET", MA_CPOINHSET_Field);
	m_HashedMap_MANDB100.insert("MA_TXRTREC", MA_TXRTREC_Field);
	m_HashedMap_MANDB100.insert("MA_CMHSPISET", MA_CMHSPISET_Field);
	m_HashedMap_MANDB100.insert("MA_TXTXLSET", MA_TXTXLSET_Field);
	m_HashedMap_MANDB100.insert("ACTMCSET", ACTMCSET_Field);
	m_HashedMap_MANDB100.insert("MA_STERHSHSET", MA_STERHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_PAYPLTREC", AP_PAYPLTREC_Field);
	m_HashedMap_MANDB100.insert("GL_PROJDESCSET", GL_PROJDESCSET_Field);
	m_HashedMap_MANDB100.insert("GL_REBATSET", GL_REBATSET_Field);
	m_HashedMap_MANDB100.insert("AP_VCHVTPSTSET", AP_VCHVTPSTSET_Field);
	m_HashedMap_MANDB100.insert("PRTUSGSET", PRTUSGSET_Field);
	m_HashedMap_MANDB100.insert("AUTHSHSET", AUTHSHSET_Field);
	m_HashedMap_MANDB100.insert("WIPMBOSET", WIPMBOSET_Field);
	m_HashedMap_MANDB100.insert("GL_TRHSHSET", GL_TRHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INHVDPOSTSET", MA_INHVDPOSTSET_Field);
	m_HashedMap_MANDB100.insert("MA_DMHCMHSET", MA_DMHCMHSET_Field);
	m_HashedMap_MANDB100.insert("MA_STATEHSHSET", MA_STATEHSHSET_Field);
	m_HashedMap_MANDB100.insert("VMCREC", VMCREC_Field);
	m_HashedMap_MANDB100.insert("AP_PDCHKREC", AP_PDCHKREC_Field);
	m_HashedMap_MANDB100.insert("GL_PRPTHSHSET", GL_PRPTHSHSET_Field);
	m_HashedMap_MANDB100.insert("APPREC", APPREC_Field);
	m_HashedMap_MANDB100.insert("AP_VCHCHKSET", AP_VCHCHKSET_Field);
	m_HashedMap_MANDB100.insert("RCTNOHSHSET", RCTNOHSHSET_Field);
	m_HashedMap_MANDB100.insert("GL_VPNUM_DREC", GL_VPNUM_DREC_Field);
	m_HashedMap_MANDB100.insert("MA_PNOTPNOTINVSET", MA_PNOTPNOTINVSET_Field);
	m_HashedMap_MANDB100.insert("POHCPRSET", POHCPRSET_Field);
	m_HashedMap_MANDB100.insert("AP_VCHNOTSET", AP_VCHNOTSET_Field);
	m_HashedMap_MANDB100.insert("WIPBYPSET", WIPBYPSET_Field);
	m_HashedMap_MANDB100.insert("MA_HLDREC", MA_HLDREC_Field);
	m_HashedMap_MANDB100.insert("AP_VNDPLTSET", AP_VNDPLTSET_Field);
	m_HashedMap_MANDB100.insert("PRTMRPSET", PRTMRPSET_Field);
	m_HashedMap_MANDB100.insert("GL_ABUDNUMSET", GL_ABUDNUMSET_Field);
	m_HashedMap_MANDB100.insert("ENGENCSET", ENGENCSET_Field);
	m_HashedMap_MANDB100.insert("POHPOPSET", POHPOPSET_Field);
	m_HashedMap_MANDB100.insert("MA_CMDMSPISET", MA_CMDMSPISET_Field);
	m_HashedMap_MANDB100.insert("AP_BOLREC", AP_BOLREC_Field);
	m_HashedMap_MANDB100.insert("GL_VP_DREC", GL_VP_DREC_Field);
	m_HashedMap_MANDB100.insert("GL_PROJFASET", GL_PROJFASET_Field);
	m_HashedMap_MANDB100.insert("ACTVOSET", ACTVOSET_Field);
	m_HashedMap_MANDB100.insert("MA_SODCHGDSET", MA_SODCHGDSET_Field);
	m_HashedMap_MANDB100.insert("INTSET", INTSET_Field);
	m_HashedMap_MANDB100.insert("MA_SHHSPISET", MA_SHHSPISET_Field);
	m_HashedMap_MANDB100.insert("MA_FCPRTABHSHSET", MA_FCPRTABHSHSET_Field);
	m_HashedMap_MANDB100.insert("MA_INDMSPNLSET", MA_INDMSPNLSET_Field);
	m_HashedMap_MANDB100.insert("WARQOHSET", WARQOHSET_Field);
	m_HashedMap_MANDB100.insert("PRHAPPSET", PRHAPPSET_Field);
	m_HashedMap_MANDB100.insert("AP_VCHDMSET", AP_VCHDMSET_Field);
	m_HashedMap_MANDB100.insert("GL_VP_NREC", GL_VP_NREC_Field);
	m_HashedMap_MANDB100.insert("MA_SVINDSPISET", MA_SVINDSPISET_Field);
	m_HashedMap_MANDB100.insert("PRTRTGSET", PRTRTGSET_Field);
	m_HashedMap_MANDB100.insert("PRHHSHSET", PRHHSHSET_Field);
	m_HashedMap_MANDB100.insert("AP_RECPAYREC", AP_RECPAYREC_Field);
	m_HashedMap_MANDB100.insert("MA_SHHPRTSET", MA_SHHPRTSET_Field);
	m_HashedMap_MANDB100.insert("PRTENDSET", PRTENDSET_Field);
	m_HashedMap_MANDB100.insert("MA_SOHREC", MA_SOHREC_Field);
	m_HashedMap_MANDB100.insert("ED_DOCXRFREC", ED_DOCXRFREC_Field);
	m_HashedMap_MANDB100.insert("MA_SHHSPNLSET", MA_SHHSPNLSET_Field);
	m_HashedMap_MANDB100.insert("CONREC", CONREC_Field);
	m_HashedMap_MANDB100.insert("GL_ABUDNUMREC", GL_ABUDNUMREC_Field);
	m_HashedMap_MANDB100.insert("AP_CHKREC", AP_CHKREC_Field);
	m_HashedMap_MANDB100.insert("TWUREC", TWUREC_Field);
	m_HashedMap_MANDB100.insert("MA_QUOHUPDSET", MA_QUOHUPDSET_Field);
	m_HashedMap_MANDB100.insert("MA_CTERHSHSET", MA_CTERHSHSET_Field);
	m_HashedMap_MANDB100.insert("PODRCTSET", PODRCTSET_Field);
	m_HashedMap_MANDB100.insert("MA_CIAREC", MA_CIAREC_Field);
	m_HashedMap_MANDB100.insert("GL_TRPOSTSET", GL_TRPOSTSET_Field);
	m_HashedMap_MANDB100.insert("MA_ACCTSALESET", MA_ACCTSALESET_Field);
	m_HashedMap_MANDB100.insert("MA_PROJPOSTSET", MA_PROJPOSTSET_Field);
	m_HashedMap_MANDB100.insert("PRTWOHSET", PRTWOHSET_Field);
	m_HashedMap_MANDB100.insert("MA_WARSTGSET", MA_WARSTGSET_Field);
	m_HashedMap_MANDB100.insert("GL_POSTREC", GL_POSTREC_Field);
	m_HashedMap_MANDB100.insert("AP_VCHBOLLSET", AP_VCHBOLLSET_Field);
	m_HashedMap_MANDB100.insert("GL_JV_NREC", GL_JV_NREC_Field);
	m_HashedMap_MANDB100.insert("MA_PRCTBILSET", MA_PRCTBILSET_Field);
	m_HashedMap_MANDB100.insert("AP_ACCTSET", AP_ACCTSET_Field);
	m_HashedMap_MANDB100.insert("AP_PNOTPNOTVCHSET", AP_PNOTPNOTVCHSET_Field);
	m_HashedMap_MANDB100.insert("VARREC", VARREC_Field);
	m_HashedMap_MANDB100.insert("GL_FISCREC", GL_FISCREC_Field);
	m_HashedMap_MANDB100.insert("FSCCALSET", FSCCALSET_Field);
	m_HashedMap_MANDB100.insert("MA_PRODCHGDSET", MA_PRODCHGDSET_Field);
	m_HashedMap_MANDB100.insert("POHPONSET", POHPONSET_Field);
	m_HashedMap_MANDB100.insert("MA_TOPREC", MA_TOPREC_Field);
	m_HashedMap_MANDB100.insert("MA_GLTABHSHSET", MA_GLTABHSHSET_Field);
	m_HashedMap_MANDB100.insert("PAYREC", PAYREC_Field);
	m_HashedMap_MANDB100.insert("MA_SPNDREC", MA_SPNDREC_Field);
	m_HashedMap_MANDB100.insert("MA_REMHSHSET", MA_REMHSHSET_Field);
#pragma endregion hashMap MANDB100

}

void launchQRC_MANDB100::process()
{

		connectionStringBuilder builder;
		QString envyRepositoryString = builder.getEnvyConnectionString();
		QString odbcAttributes = builder.getOdbcAttributes();
	int ffx;
	QHash<QString, schemaField*>::const_iterator i = m_HashedMap_MANDB100.find(tableName);
	while (i != m_HashedMap_MANDB100.end() && i.key() == tableName) {
		schemaField * fld = i.value();
		ffx = fld->ordinalId;
		break;
	}


	switch (ffx)
	{
		case Rctables::enumAP_VNDVENSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VNDVENSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VNDVENSET> ap_vndvenset(new AP_VNDVENSET());
			ap_vndvenset->open(sourceDSN, targetDSN);
			ap_vndvenset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vndvenset->setProfileName(profileName);
			ap_vndvenset->setReplicationOption(eReplicationOption);
			ap_vndvenset->setDropOption(edropOption);
			ap_vndvenset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vndvenset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMRHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MRHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MRHREC> mrhrec(new MRHREC());
			mrhrec->open(sourceDSN, targetDSN);
			mrhrec->setRepositoryString(builder->getEnvyConnectionString());
			mrhrec->setProfileName(profileName);
			mrhrec->setReplicationOption(eReplicationOption);
			mrhrec->setDropOption(edropOption);
			mrhrec->setOdbcAttributes(builder->getOdbcAttributes());
			mrhrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ACCTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ACCTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ACCTHSHSET> gl_accthshset(new GL_ACCTHSHSET());
			gl_accthshset->open(sourceDSN, targetDSN);
			gl_accthshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_accthshset->setProfileName(profileName);
			gl_accthshset->setReplicationOption(eReplicationOption);
			gl_accthshset->setDropOption(edropOption);
			gl_accthshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_accthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILSHPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILSHPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILSHPSET> ma_bilshpset(new MA_BILSHPSET());
			ma_bilshpset->open(sourceDSN, targetDSN);
			ma_bilshpset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilshpset->setProfileName(profileName);
			ma_bilshpset->setReplicationOption(eReplicationOption);
			ma_bilshpset->setDropOption(edropOption);
			ma_bilshpset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilshpset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFRTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FRTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FRTREC> frtrec(new FRTREC());
			frtrec->open(sourceDSN, targetDSN);
			frtrec->setRepositoryString(builder->getEnvyConnectionString());
			frtrec->setProfileName(profileName);
			frtrec->setReplicationOption(eReplicationOption);
			frtrec->setDropOption(edropOption);
			frtrec->setOdbcAttributes(builder->getOdbcAttributes());
			frtrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPYLDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPYLDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPYLDSET> wipyldset(new WIPYLDSET());
			wipyldset->open(sourceDSN, targetDSN);
			wipyldset->setRepositoryString(builder->getEnvyConnectionString());
			wipyldset->setProfileName(profileName);
			wipyldset->setReplicationOption(eReplicationOption);
			wipyldset->setDropOption(edropOption);
			wipyldset->setOdbcAttributes(builder->getOdbcAttributes());
			wipyldset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWKCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WKCREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WKCREC> wkcrec(new WKCREC());
			wkcrec->open(sourceDSN, targetDSN);
			wkcrec->setRepositoryString(builder->getEnvyConnectionString());
			wkcrec->setProfileName(profileName);
			wkcrec->setReplicationOption(eReplicationOption);
			wkcrec->setDropOption(edropOption);
			wkcrec->setOdbcAttributes(builder->getOdbcAttributes());
			wkcrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHPQUOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHPQUOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHPQUOHSET> ma_shpquohset(new MA_SHPQUOHSET());
			ma_shpquohset->open(sourceDSN, targetDSN);
			ma_shpquohset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shpquohset->setProfileName(profileName);
			ma_shpquohset->setReplicationOption(eReplicationOption);
			ma_shpquohset->setDropOption(edropOption);
			ma_shpquohset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shpquohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_RSNCHGHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_RSNCHGHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_RSNCHGHSET> ma_rsnchghset(new MA_RSNCHGHSET());
			ma_rsnchghset->open(sourceDSN, targetDSN);
			ma_rsnchghset->setRepositoryString(builder->getEnvyConnectionString());
			ma_rsnchghset->setProfileName(profileName);
			ma_rsnchghset->setReplicationOption(eReplicationOption);
			ma_rsnchghset->setDropOption(edropOption);
			ma_rsnchghset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_rsnchghset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumBOLOPENSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("BOLOPENSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<BOLOPENSET> bolopenset(new BOLOPENSET());
			bolopenset->open(sourceDSN, targetDSN);
			bolopenset->setRepositoryString(builder->getEnvyConnectionString());
			bolopenset->setProfileName(profileName);
			bolopenset->setReplicationOption(eReplicationOption);
			bolopenset->setDropOption(edropOption);
			bolopenset->setOdbcAttributes(builder->getOdbcAttributes());
			bolopenset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VATREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VATREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VATREC> ap_vatrec(new AP_VATREC());
			ap_vatrec->open(sourceDSN, targetDSN);
			ap_vatrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_vatrec->setProfileName(profileName);
			ap_vatrec->setReplicationOption(eReplicationOption);
			ap_vatrec->setDropOption(edropOption);
			ap_vatrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vatrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PFAMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PFAMREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PFAMREC> ma_pfamrec(new MA_PFAMREC());
			ma_pfamrec->open(sourceDSN, targetDSN);
			ma_pfamrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_pfamrec->setProfileName(profileName);
			ma_pfamrec->setReplicationOption(eReplicationOption);
			ma_pfamrec->setDropOption(edropOption);
			ma_pfamrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_pfamrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFSCCALHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FSCCALHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FSCCALHSHSET> fsccalhshset(new FSCCALHSHSET());
			fsccalhshset->open(sourceDSN, targetDSN);
			fsccalhshset->setRepositoryString(builder->getEnvyConnectionString());
			fsccalhshset->setProfileName(profileName);
			fsccalhshset->setReplicationOption(eReplicationOption);
			fsccalhshset->setDropOption(edropOption);
			fsccalhshset->setOdbcAttributes(builder->getOdbcAttributes());
			fsccalhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_DEFACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_DEFACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_DEFACCTSET> ap_defacctset(new AP_DEFACCTSET());
			ap_defacctset->open(sourceDSN, targetDSN);
			ap_defacctset->setRepositoryString(builder->getEnvyConnectionString());
			ap_defacctset->setProfileName(profileName);
			ap_defacctset->setReplicationOption(eReplicationOption);
			ap_defacctset->setDropOption(edropOption);
			ap_defacctset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_defacctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILPOSTSET> ma_bilpostset(new MA_BILPOSTSET());
			ma_bilpostset->open(sourceDSN, targetDSN);
			ma_bilpostset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilpostset->setProfileName(profileName);
			ma_bilpostset->setReplicationOption(eReplicationOption);
			ma_bilpostset->setDropOption(edropOption);
			ma_bilpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_HDRVNDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_HDRVNDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_HDRVNDSET> ap_hdrvndset(new AP_HDRVNDSET());
			ap_hdrvndset->open(sourceDSN, targetDSN);
			ap_hdrvndset->setRepositoryString(builder->getEnvyConnectionString());
			ap_hdrvndset->setProfileName(profileName);
			ap_hdrvndset->setReplicationOption(eReplicationOption);
			ap_hdrvndset->setDropOption(edropOption);
			ap_hdrvndset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_hdrvndset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_SEARCHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_SEARCHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_SEARCHREC> ap_searchrec(new AP_SEARCHREC());
			ap_searchrec->open(sourceDSN, targetDSN);
			ap_searchrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_searchrec->setProfileName(profileName);
			ap_searchrec->setReplicationOption(eReplicationOption);
			ap_searchrec->setDropOption(edropOption);
			ap_searchrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_searchrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHPSOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHPSOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHPSOHSET> ma_shpsohset(new MA_SHPSOHSET());
			ma_shpsohset->open(sourceDSN, targetDSN);
			ma_shpsohset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shpsohset->setProfileName(profileName);
			ma_shpsohset->setReplicationOption(eReplicationOption);
			ma_shpsohset->setDropOption(edropOption);
			ma_shpsohset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shpsohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumDRVARSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("DRVARSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<DRVARSET> drvarset(new DRVARSET());
			drvarset->open(sourceDSN, targetDSN);
			drvarset->setRepositoryString(builder->getEnvyConnectionString());
			drvarset->setProfileName(profileName);
			drvarset->setReplicationOption(eReplicationOption);
			drvarset->setDropOption(edropOption);
			drvarset->setOdbcAttributes(builder->getOdbcAttributes());
			drvarset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_COMCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_COMCREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_COMCREC> ma_comcrec(new MA_COMCREC());
			ma_comcrec->open(sourceDSN, targetDSN);
			ma_comcrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_comcrec->setProfileName(profileName);
			ma_comcrec->setReplicationOption(eReplicationOption);
			ma_comcrec->setDropOption(edropOption);
			ma_comcrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_comcrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRCTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRCTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRCTREC> ma_prctrec(new MA_PRCTREC());
			ma_prctrec->open(sourceDSN, targetDSN);
			ma_prctrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_prctrec->setProfileName(profileName);
			ma_prctrec->setReplicationOption(eReplicationOption);
			ma_prctrec->setDropOption(edropOption);
			ma_prctrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prctrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SODINDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SODINDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SODINDSET> ma_sodindset(new MA_SODINDSET());
			ma_sodindset->open(sourceDSN, targetDSN);
			ma_sodindset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sodindset->setProfileName(profileName);
			ma_sodindset->setReplicationOption(eReplicationOption);
			ma_sodindset->setDropOption(edropOption);
			ma_sodindset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sodindset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHDMHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHDMHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHDMHSET> ma_inhdmhset(new MA_INHDMHSET());
			ma_inhdmhset->open(sourceDSN, targetDSN);
			ma_inhdmhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhdmhset->setProfileName(profileName);
			ma_inhdmhset->setReplicationOption(eReplicationOption);
			ma_inhdmhset->setDropOption(edropOption);
			ma_inhdmhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhdmhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_STATEREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_STATEREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_STATEREC> ma_staterec(new MA_STATEREC());
			ma_staterec->open(sourceDSN, targetDSN);
			ma_staterec->setRepositoryString(builder->getEnvyConnectionString());
			ma_staterec->setProfileName(profileName);
			ma_staterec->setReplicationOption(eReplicationOption);
			ma_staterec->setDropOption(edropOption);
			ma_staterec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_staterec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTFORSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTFORSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTFORSET> prtforset(new PRTFORSET());
			prtforset->open(sourceDSN, targetDSN);
			prtforset->setRepositoryString(builder->getEnvyConnectionString());
			prtforset->setProfileName(profileName);
			prtforset->setReplicationOption(eReplicationOption);
			prtforset->setDropOption(edropOption);
			prtforset->setOdbcAttributes(builder->getOdbcAttributes());
			prtforset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRTTOPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRTTOPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRTTOPSET> ma_prttopset(new MA_PRTTOPSET());
			ma_prttopset->open(sourceDSN, targetDSN);
			ma_prttopset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prttopset->setProfileName(profileName);
			ma_prttopset->setReplicationOption(eReplicationOption);
			ma_prttopset->setDropOption(edropOption);
			ma_prttopset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prttopset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPAYSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PAYSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PAYSET> payset(new PAYSET());
			payset->open(sourceDSN, targetDSN);
			payset->setRepositoryString(builder->getEnvyConnectionString());
			payset->setProfileName(profileName);
			payset->setReplicationOption(eReplicationOption);
			payset->setDropOption(edropOption);
			payset->setOdbcAttributes(builder->getOdbcAttributes());
			payset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWOHEALSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WOHEALSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WOHEALSET> wohealset(new WOHEALSET());
			wohealset->open(sourceDSN, targetDSN);
			wohealset->setRepositoryString(builder->getEnvyConnectionString());
			wohealset->setProfileName(profileName);
			wohealset->setReplicationOption(eReplicationOption);
			wohealset->setDropOption(edropOption);
			wohealset->setOdbcAttributes(builder->getOdbcAttributes());
			wohealset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_GLCTTABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_GLCTTABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_GLCTTABSET> ma_glcttabset(new MA_GLCTTABSET());
			ma_glcttabset->open(sourceDSN, targetDSN);
			ma_glcttabset->setRepositoryString(builder->getEnvyConnectionString());
			ma_glcttabset->setProfileName(profileName);
			ma_glcttabset->setReplicationOption(eReplicationOption);
			ma_glcttabset->setDropOption(edropOption);
			ma_glcttabset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_glcttabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BATCHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BATCHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BATCHHSHSET> ap_batchhshset(new AP_BATCHHSHSET());
			ap_batchhshset->open(sourceDSN, targetDSN);
			ap_batchhshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_batchhshset->setProfileName(profileName);
			ap_batchhshset->setReplicationOption(eReplicationOption);
			ap_batchhshset->setDropOption(edropOption);
			ap_batchhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_batchhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRPTPRODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRPTPRODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRPTPRODSET> ma_prptprodset(new MA_PRPTPRODSET());
			ma_prptprodset->open(sourceDSN, targetDSN);
			ma_prptprodset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prptprodset->setProfileName(profileName);
			ma_prptprodset->setReplicationOption(eReplicationOption);
			ma_prptprodset->setDropOption(edropOption);
			ma_prptprodset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prptprodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BNKVCHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BNKVCHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BNKVCHSET> ap_bnkvchset(new AP_BNKVCHSET());
			ap_bnkvchset->open(sourceDSN, targetDSN);
			ap_bnkvchset->setRepositoryString(builder->getEnvyConnectionString());
			ap_bnkvchset->setProfileName(profileName);
			ap_bnkvchset->setReplicationOption(eReplicationOption);
			ap_bnkvchset->setDropOption(edropOption);
			ap_bnkvchset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bnkvchset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_FRTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_FRTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_FRTHSHSET> ma_frthshset(new MA_FRTHSHSET());
			ma_frthshset->open(sourceDSN, targetDSN);
			ma_frthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_frthshset->setProfileName(profileName);
			ma_frthshset->setReplicationOption(eReplicationOption);
			ma_frthshset->setDropOption(edropOption);
			ma_frthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_frthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_RSNCMHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_RSNCMHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_RSNCMHSET> ma_rsncmhset(new MA_RSNCMHSET());
			ma_rsncmhset->open(sourceDSN, targetDSN);
			ma_rsncmhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_rsncmhset->setProfileName(profileName);
			ma_rsncmhset->setReplicationOption(eReplicationOption);
			ma_rsncmhset->setDropOption(edropOption);
			ma_rsncmhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_rsncmhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOHPRHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POHPRHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POHPRHSET> pohprhset(new POHPRHSET());
			pohprhset->open(sourceDSN, targetDSN);
			pohprhset->setRepositoryString(builder->getEnvyConnectionString());
			pohprhset->setProfileName(profileName);
			pohprhset->setReplicationOption(eReplicationOption);
			pohprhset->setDropOption(edropOption);
			pohprhset->setOdbcAttributes(builder->getOdbcAttributes());
			pohprhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VENHOLDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VENHOLDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VENHOLDSET> ap_venholdset(new AP_VENHOLDSET());
			ap_venholdset->open(sourceDSN, targetDSN);
			ap_venholdset->setRepositoryString(builder->getEnvyConnectionString());
			ap_venholdset->setProfileName(profileName);
			ap_venholdset->setReplicationOption(eReplicationOption);
			ap_venholdset->setDropOption(edropOption);
			ap_venholdset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_venholdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FP_NREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FP_NREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FP_NREC> gl_fp_nrec(new GL_FP_NREC());
			gl_fp_nrec->open(sourceDSN, targetDSN);
			gl_fp_nrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_fp_nrec->setProfileName(profileName);
			gl_fp_nrec->setReplicationOption(eReplicationOption);
			gl_fp_nrec->setDropOption(edropOption);
			gl_fp_nrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fp_nrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWARINTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WARINTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WARINTSET> warintset(new WARINTSET());
			warintset->open(sourceDSN, targetDSN);
			warintset->setRepositoryString(builder->getEnvyConnectionString());
			warintset->setProfileName(profileName);
			warintset->setReplicationOption(eReplicationOption);
			warintset->setDropOption(edropOption);
			warintset->setOdbcAttributes(builder->getOdbcAttributes());
			warintset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FPTOPCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FPTOPCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FPTOPCTSET> gl_fptopctset(new GL_FPTOPCTSET());
			gl_fptopctset->open(sourceDSN, targetDSN);
			gl_fptopctset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fptopctset->setProfileName(profileName);
			gl_fptopctset->setReplicationOption(eReplicationOption);
			gl_fptopctset->setDropOption(edropOption);
			gl_fptopctset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fptopctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_AUDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_AUDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_AUDREC> ed_audrec(new ED_AUDREC());
			ed_audrec->open(sourceDSN, targetDSN);
			ed_audrec->setRepositoryString(builder->getEnvyConnectionString());
			ed_audrec->setProfileName(profileName);
			ed_audrec->setReplicationOption(eReplicationOption);
			ed_audrec->setDropOption(edropOption);
			ed_audrec->setOdbcAttributes(builder->getOdbcAttributes());
			ed_audrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVENREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VENREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VENREC> venrec(new VENREC());
			venrec->open(sourceDSN, targetDSN);
			venrec->setRepositoryString(builder->getEnvyConnectionString());
			venrec->setProfileName(profileName);
			venrec->setReplicationOption(eReplicationOption);
			venrec->setDropOption(edropOption);
			venrec->setOdbcAttributes(builder->getOdbcAttributes());
			venrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRPTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRPTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRPTHSHSET> ma_prpthshset(new MA_PRPTHSHSET());
			ma_prpthshset->open(sourceDSN, targetDSN);
			ma_prpthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prpthshset->setProfileName(profileName);
			ma_prpthshset->setReplicationOption(eReplicationOption);
			ma_prpthshset->setDropOption(edropOption);
			ma_prpthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prpthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHPBSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHPBSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHPBSET> ma_sohpbset(new MA_SOHPBSET());
			ma_sohpbset->open(sourceDSN, targetDSN);
			ma_sohpbset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohpbset->setProfileName(profileName);
			ma_sohpbset->setReplicationOption(eReplicationOption);
			ma_sohpbset->setDropOption(edropOption);
			ma_sohpbset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohpbset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_LINKREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_LINKREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_LINKREC> gl_linkrec(new GL_LINKREC());
			gl_linkrec->open(sourceDSN, targetDSN);
			gl_linkrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_linkrec->setProfileName(profileName);
			gl_linkrec->setReplicationOption(eReplicationOption);
			gl_linkrec->setDropOption(edropOption);
			gl_linkrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_linkrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RECNOTEREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RECNOTEREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RECNOTEREC> ap_recnoterec(new AP_RECNOTEREC());
			ap_recnoterec->open(sourceDSN, targetDSN);
			ap_recnoterec->setRepositoryString(builder->getEnvyConnectionString());
			ap_recnoterec->setProfileName(profileName);
			ap_recnoterec->setReplicationOption(eReplicationOption);
			ap_recnoterec->setDropOption(edropOption);
			ap_recnoterec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_recnoterec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_BATCHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_BATCHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_BATCHSET> gl_batchset(new GL_BATCHSET());
			gl_batchset->open(sourceDSN, targetDSN);
			gl_batchset->setRepositoryString(builder->getEnvyConnectionString());
			gl_batchset->setProfileName(profileName);
			gl_batchset->setReplicationOption(eReplicationOption);
			gl_batchset->setDropOption(edropOption);
			gl_batchset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_batchset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumOPCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("OPCREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<OPCREC> opcrec(new OPCREC());
			opcrec->open(sourceDSN, targetDSN);
			opcrec->setRepositoryString(builder->getEnvyConnectionString());
			opcrec->setProfileName(profileName);
			opcrec->setReplicationOption(eReplicationOption);
			opcrec->setDropOption(edropOption);
			opcrec->setOdbcAttributes(builder->getOdbcAttributes());
			opcrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VNDCHKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VNDCHKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VNDCHKSET> ap_vndchkset(new AP_VNDCHKSET());
			ap_vndchkset->open(sourceDSN, targetDSN);
			ap_vndchkset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vndchkset->setProfileName(profileName);
			ap_vndchkset->setReplicationOption(eReplicationOption);
			ap_vndchkset->setDropOption(edropOption);
			ap_vndchkset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vndchkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POMREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POMREC> pomrec(new POMREC());
			pomrec->open(sourceDSN, targetDSN);
			pomrec->setRepositoryString(builder->getEnvyConnectionString());
			pomrec->setProfileName(profileName);
			pomrec->setReplicationOption(eReplicationOption);
			pomrec->setDropOption(edropOption);
			pomrec->setOdbcAttributes(builder->getOdbcAttributes());
			pomrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPDEN_DREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPDEN_DREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPDEN_DREC> gl_vpden_drec(new GL_VPDEN_DREC());
			gl_vpden_drec->open(sourceDSN, targetDSN);
			gl_vpden_drec->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpden_drec->setProfileName(profileName);
			gl_vpden_drec->setReplicationOption(eReplicationOption);
			gl_vpden_drec->setDropOption(edropOption);
			gl_vpden_drec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpden_drec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWOHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WOHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WOHREC> wohrec(new WOHREC());
			wohrec->open(sourceDSN, targetDSN);
			wohrec->setRepositoryString(builder->getEnvyConnectionString());
			wohrec->setProfileName(profileName);
			wohrec->setReplicationOption(eReplicationOption);
			wohrec->setDropOption(edropOption);
			wohrec->setOdbcAttributes(builder->getOdbcAttributes());
			wohrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PRPT_NREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PRPT_NREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PRPT_NREC> gl_prpt_nrec(new GL_PRPT_NREC());
			gl_prpt_nrec->open(sourceDSN, targetDSN);
			gl_prpt_nrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_prpt_nrec->setProfileName(profileName);
			gl_prpt_nrec->setReplicationOption(eReplicationOption);
			gl_prpt_nrec->setDropOption(edropOption);
			gl_prpt_nrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_prpt_nrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PNOTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PNOTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PNOTHSHSET> ma_pnothshset(new MA_PNOTHSHSET());
			ma_pnothshset->open(sourceDSN, targetDSN);
			ma_pnothshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_pnothshset->setProfileName(profileName);
			ma_pnothshset->setReplicationOption(eReplicationOption);
			ma_pnothshset->setDropOption(edropOption);
			ma_pnothshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_pnothshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FPTOACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FPTOACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FPTOACCTSET> gl_fptoacctset(new GL_FPTOACCTSET());
			gl_fptoacctset->open(sourceDSN, targetDSN);
			gl_fptoacctset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fptoacctset->setProfileName(profileName);
			gl_fptoacctset->setReplicationOption(eReplicationOption);
			gl_fptoacctset->setDropOption(edropOption);
			gl_fptoacctset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fptoacctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPEFFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPEFFSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPEFFSET> wipeffset(new WIPEFFSET());
			wipeffset->open(sourceDSN, targetDSN);
			wipeffset->setRepositoryString(builder->getEnvyConnectionString());
			wipeffset->setProfileName(profileName);
			wipeffset->setReplicationOption(eReplicationOption);
			wipeffset->setDropOption(edropOption);
			wipeffset->setOdbcAttributes(builder->getOdbcAttributes());
			wipeffset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ISBSHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ISBSHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ISBSHSHSET> gl_isbshshset(new GL_ISBSHSHSET());
			gl_isbshshset->open(sourceDSN, targetDSN);
			gl_isbshshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_isbshshset->setProfileName(profileName);
			gl_isbshshset->setReplicationOption(eReplicationOption);
			gl_isbshshset->setDropOption(edropOption);
			gl_isbshshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_isbshshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_POPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_POPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_POPSET> ap_popset(new AP_POPSET());
			ap_popset->open(sourceDSN, targetDSN);
			ap_popset->setRepositoryString(builder->getEnvyConnectionString());
			ap_popset->setProfileName(profileName);
			ap_popset->setReplicationOption(eReplicationOption);
			ap_popset->setDropOption(edropOption);
			ap_popset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_popset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_FCPRTABREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_FCPRTABREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_FCPRTABREC> ma_fcprtabrec(new MA_FCPRTABREC());
			ma_fcprtabrec->open(sourceDSN, targetDSN);
			ma_fcprtabrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_fcprtabrec->setProfileName(profileName);
			ma_fcprtabrec->setReplicationOption(eReplicationOption);
			ma_fcprtabrec->setDropOption(edropOption);
			ma_fcprtabrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_fcprtabrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUOHSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUOHSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUOHSPISET> ma_quohspiset(new MA_QUOHSPISET());
			ma_quohspiset->open(sourceDSN, targetDSN);
			ma_quohspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_quohspiset->setProfileName(profileName);
			ma_quohspiset->setReplicationOption(eReplicationOption);
			ma_quohspiset->setDropOption(edropOption);
			ma_quohspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quohspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOCATREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOCATREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOCATREC> ma_socatrec(new MA_SOCATREC());
			ma_socatrec->open(sourceDSN, targetDSN);
			ma_socatrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_socatrec->setProfileName(profileName);
			ma_socatrec->setReplicationOption(eReplicationOption);
			ma_socatrec->setDropOption(edropOption);
			ma_socatrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_socatrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VENVCHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VENVCHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VENVCHSET> ap_venvchset(new AP_VENVCHSET());
			ap_venvchset->open(sourceDSN, targetDSN);
			ap_venvchset->setRepositoryString(builder->getEnvyConnectionString());
			ap_venvchset->setProfileName(profileName);
			ap_venvchset->setReplicationOption(eReplicationOption);
			ap_venvchset->setDropOption(edropOption);
			ap_venvchset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_venvchset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumINDFHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("INDFHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<INDFHSHSET> indfhshset(new INDFHSHSET());
			indfhshset->open(sourceDSN, targetDSN);
			indfhshset->setRepositoryString(builder->getEnvyConnectionString());
			indfhshset->setProfileName(profileName);
			indfhshset->setReplicationOption(eReplicationOption);
			indfhshset->setDropOption(edropOption);
			indfhshset->setOdbcAttributes(builder->getOdbcAttributes());
			indfhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_REAMTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_REAMTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_REAMTSET> gl_reamtset(new GL_REAMTSET());
			gl_reamtset->open(sourceDSN, targetDSN);
			gl_reamtset->setRepositoryString(builder->getEnvyConnectionString());
			gl_reamtset->setProfileName(profileName);
			gl_reamtset->setReplicationOption(eReplicationOption);
			gl_reamtset->setDropOption(edropOption);
			gl_reamtset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_reamtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRQHRQDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RQHRQDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RQHRQDSET> rqhrqdset(new RQHRQDSET());
			rqhrqdset->open(sourceDSN, targetDSN);
			rqhrqdset->setRepositoryString(builder->getEnvyConnectionString());
			rqhrqdset->setProfileName(profileName);
			rqhrqdset->setReplicationOption(eReplicationOption);
			rqhrqdset->setDropOption(edropOption);
			rqhrqdset->setOdbcAttributes(builder->getOdbcAttributes());
			rqhrqdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ARPT_DREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ARPT_DREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ARPT_DREC> gl_arpt_drec(new GL_ARPT_DREC());
			gl_arpt_drec->open(sourceDSN, targetDSN);
			gl_arpt_drec->setRepositoryString(builder->getEnvyConnectionString());
			gl_arpt_drec->setProfileName(profileName);
			gl_arpt_drec->setReplicationOption(eReplicationOption);
			gl_arpt_drec->setDropOption(edropOption);
			gl_arpt_drec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_arpt_drec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHAPCPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHAPCPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHAPCPOSTSET> ma_inhapcpostset(new MA_INHAPCPOSTSET());
			ma_inhapcpostset->open(sourceDSN, targetDSN);
			ma_inhapcpostset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhapcpostset->setProfileName(profileName);
			ma_inhapcpostset->setReplicationOption(eReplicationOption);
			ma_inhapcpostset->setDropOption(edropOption);
			ma_inhapcpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhapcpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_COMOREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_COMOREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_COMOREC> ma_comorec(new MA_COMOREC());
			ma_comorec->open(sourceDSN, targetDSN);
			ma_comorec->setRepositoryString(builder->getEnvyConnectionString());
			ma_comorec->setProfileName(profileName);
			ma_comorec->setReplicationOption(eReplicationOption);
			ma_comorec->setDropOption(edropOption);
			ma_comorec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_comorec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VNDHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VNDHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VNDHSHSET> ap_vndhshset(new AP_VNDHSHSET());
			ap_vndhshset->open(sourceDSN, targetDSN);
			ap_vndhshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vndhshset->setProfileName(profileName);
			ap_vndhshset->setReplicationOption(eReplicationOption);
			ap_vndhshset->setDropOption(edropOption);
			ap_vndhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vndhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCRVARSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CRVARSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CRVARSET> crvarset(new CRVARSET());
			crvarset->open(sourceDSN, targetDSN);
			crvarset->setRepositoryString(builder->getEnvyConnectionString());
			crvarset->setProfileName(profileName);
			crvarset->setReplicationOption(eReplicationOption);
			crvarset->setDropOption(edropOption);
			crvarset->setOdbcAttributes(builder->getOdbcAttributes());
			crvarset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRCTFCPRTABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRCTFCPRTABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRCTFCPRTABSET> ma_prctfcprtabset(new MA_PRCTFCPRTABSET());
			ma_prctfcprtabset->open(sourceDSN, targetDSN);
			ma_prctfcprtabset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prctfcprtabset->setProfileName(profileName);
			ma_prctfcprtabset->setReplicationOption(eReplicationOption);
			ma_prctfcprtabset->setDropOption(edropOption);
			ma_prctfcprtabset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prctfcprtabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWOHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WOHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WOHHSHSET> wohhshset(new WOHHSHSET());
			wohhshset->open(sourceDSN, targetDSN);
			wohhshset->setRepositoryString(builder->getEnvyConnectionString());
			wohhshset->setProfileName(profileName);
			wohhshset->setReplicationOption(eReplicationOption);
			wohhshset->setDropOption(edropOption);
			wohhshset->setOdbcAttributes(builder->getOdbcAttributes());
			wohhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INDSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INDSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INDSPNLSET> ma_indspnlset(new MA_INDSPNLSET());
			ma_indspnlset->open(sourceDSN, targetDSN);
			ma_indspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_indspnlset->setProfileName(profileName);
			ma_indspnlset->setReplicationOption(eReplicationOption);
			ma_indspnlset->setDropOption(edropOption);
			ma_indspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_indspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPODIRCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PODIRCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PODIRCTSET> podirctset(new PODIRCTSET());
			podirctset->open(sourceDSN, targetDSN);
			podirctset->setRepositoryString(builder->getEnvyConnectionString());
			podirctset->setProfileName(profileName);
			podirctset->setReplicationOption(eReplicationOption);
			podirctset->setDropOption(edropOption);
			podirctset->setOdbcAttributes(builder->getOdbcAttributes());
			podirctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILFCPRTABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILFCPRTABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILFCPRTABSET> ma_bilfcprtabset(new MA_BILFCPRTABSET());
			ma_bilfcprtabset->open(sourceDSN, targetDSN);
			ma_bilfcprtabset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilfcprtabset->setProfileName(profileName);
			ma_bilfcprtabset->setReplicationOption(eReplicationOption);
			ma_bilfcprtabset->setDropOption(edropOption);
			ma_bilfcprtabset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilfcprtabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumSOHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("SOHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<SOHREC> sohrec(new SOHREC());
			sohrec->open(sourceDSN, targetDSN);
			sohrec->setRepositoryString(builder->getEnvyConnectionString());
			sohrec->setProfileName(profileName);
			sohrec->setReplicationOption(eReplicationOption);
			sohrec->setDropOption(edropOption);
			sohrec->setOdbcAttributes(builder->getOdbcAttributes());
			sohrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BCHVCHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BCHVCHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BCHVCHSET> ap_bchvchset(new AP_BCHVCHSET());
			ap_bchvchset->open(sourceDSN, targetDSN);
			ap_bchvchset->setRepositoryString(builder->getEnvyConnectionString());
			ap_bchvchset->setProfileName(profileName);
			ap_bchvchset->setReplicationOption(eReplicationOption);
			ap_bchvchset->setDropOption(edropOption);
			ap_bchvchset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bchvchset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTHSHSET> acthshset(new ACTHSHSET());
			acthshset->open(sourceDSN, targetDSN);
			acthshset->setRepositoryString(builder->getEnvyConnectionString());
			acthshset->setProfileName(profileName);
			acthshset->setReplicationOption(eReplicationOption);
			acthshset->setDropOption(edropOption);
			acthshset->setOdbcAttributes(builder->getOdbcAttributes());
			acthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_HDRREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_HDRREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_HDRREC> ap_hdrrec(new AP_HDRREC());
			ap_hdrrec->open(sourceDSN, targetDSN);
			ap_hdrrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_hdrrec->setProfileName(profileName);
			ap_hdrrec->setReplicationOption(eReplicationOption);
			ap_hdrrec->setDropOption(edropOption);
			ap_hdrrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_hdrrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPDESCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPDESCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPDESCSET> gl_vpdescset(new GL_VPDESCSET());
			gl_vpdescset->open(sourceDSN, targetDSN);
			gl_vpdescset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpdescset->setProfileName(profileName);
			gl_vpdescset->setReplicationOption(eReplicationOption);
			gl_vpdescset->setDropOption(edropOption);
			gl_vpdescset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpdescset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTIRCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTIRCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTIRCTSET> prtirctset(new PRTIRCTSET());
			prtirctset->open(sourceDSN, targetDSN);
			prtirctset->setRepositoryString(builder->getEnvyConnectionString());
			prtirctset->setProfileName(profileName);
			prtirctset->setReplicationOption(eReplicationOption);
			prtirctset->setDropOption(edropOption);
			prtirctset->setOdbcAttributes(builder->getOdbcAttributes());
			prtirctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGENPRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GENPRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GENPRTSET> genprtset(new GENPRTSET());
			genprtset->open(sourceDSN, targetDSN);
			genprtset->setRepositoryString(builder->getEnvyConnectionString());
			genprtset->setProfileName(profileName);
			genprtset->setReplicationOption(eReplicationOption);
			genprtset->setDropOption(edropOption);
			genprtset->setOdbcAttributes(builder->getOdbcAttributes());
			genprtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWARLOCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WARLOCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WARLOCSET> warlocset(new WARLOCSET());
			warlocset->open(sourceDSN, targetDSN);
			warlocset->setRepositoryString(builder->getEnvyConnectionString());
			warlocset->setProfileName(profileName);
			warlocset->setReplicationOption(eReplicationOption);
			warlocset->setDropOption(edropOption);
			warlocset->setOdbcAttributes(builder->getOdbcAttributes());
			warlocset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRTDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RTDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RTDREC> rtdrec(new RTDREC());
			rtdrec->open(sourceDSN, targetDSN);
			rtdrec->setRepositoryString(builder->getEnvyConnectionString());
			rtdrec->setProfileName(profileName);
			rtdrec->setReplicationOption(eReplicationOption);
			rtdrec->setDropOption(edropOption);
			rtdrec->setOdbcAttributes(builder->getOdbcAttributes());
			rtdrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_DMHDMHLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_DMHDMHLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_DMHDMHLSET> ma_dmhdmhlset(new MA_DMHDMHLSET());
			ma_dmhdmhlset->open(sourceDSN, targetDSN);
			ma_dmhdmhlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_dmhdmhlset->setProfileName(profileName);
			ma_dmhdmhlset->setReplicationOption(eReplicationOption);
			ma_dmhdmhlset->setDropOption(edropOption);
			ma_dmhdmhlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_dmhdmhlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RECPAYCHNSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RECPAYCHNSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RECPAYCHNSET> ap_recpaychnset(new AP_RECPAYCHNSET());
			ap_recpaychnset->open(sourceDSN, targetDSN);
			ap_recpaychnset->setRepositoryString(builder->getEnvyConnectionString());
			ap_recpaychnset->setProfileName(profileName);
			ap_recpaychnset->setReplicationOption(eReplicationOption);
			ap_recpaychnset->setDropOption(edropOption);
			ap_recpaychnset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_recpaychnset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumIRCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("IRCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<IRCTSET> irctset(new IRCTSET());
			irctset->open(sourceDSN, targetDSN);
			irctset->setRepositoryString(builder->getEnvyConnectionString());
			irctset->setProfileName(profileName);
			irctset->setReplicationOption(eReplicationOption);
			irctset->setDropOption(edropOption);
			irctset->setOdbcAttributes(builder->getOdbcAttributes());
			irctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PROJRPTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PROJRPTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PROJRPTSET> gl_projrptset(new GL_PROJRPTSET());
			gl_projrptset->open(sourceDSN, targetDSN);
			gl_projrptset->setRepositoryString(builder->getEnvyConnectionString());
			gl_projrptset->setProfileName(profileName);
			gl_projrptset->setReplicationOption(eReplicationOption);
			gl_projrptset->setDropOption(edropOption);
			gl_projrptset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_projrptset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RECPOSTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RECPOSTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RECPOSTREC> ap_recpostrec(new AP_RECPOSTREC());
			ap_recpostrec->open(sourceDSN, targetDSN);
			ap_recpostrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_recpostrec->setProfileName(profileName);
			ap_recpostrec->setReplicationOption(eReplicationOption);
			ap_recpostrec->setDropOption(edropOption);
			ap_recpostrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_recpostrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTYLDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTYLDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTYLDSET> prtyldset(new PRTYLDSET());
			prtyldset->open(sourceDSN, targetDSN);
			prtyldset->setRepositoryString(builder->getEnvyConnectionString());
			prtyldset->setProfileName(profileName);
			prtyldset->setReplicationOption(eReplicationOption);
			prtyldset->setDropOption(edropOption);
			prtyldset->setOdbcAttributes(builder->getOdbcAttributes());
			prtyldset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOHRCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POHRCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POHRCTSET> pohrctset(new POHRCTSET());
			pohrctset->open(sourceDSN, targetDSN);
			pohrctset->setRepositoryString(builder->getEnvyConnectionString());
			pohrctset->setProfileName(profileName);
			pohrctset->setReplicationOption(eReplicationOption);
			pohrctset->setDropOption(edropOption);
			pohrctset->setOdbcAttributes(builder->getOdbcAttributes());
			pohrctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHSHHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHSHHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHSHHSET> ma_inhshhset(new MA_INHSHHSET());
			ma_inhshhset->open(sourceDSN, targetDSN);
			ma_inhshhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhshhset->setProfileName(profileName);
			ma_inhshhset->setReplicationOption(eReplicationOption);
			ma_inhshhset->setDropOption(edropOption);
			ma_inhshhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhshhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRCTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RCTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RCTHSHSET> rcthshset(new RCTHSHSET());
			rcthshset->open(sourceDSN, targetDSN);
			rcthshset->setRepositoryString(builder->getEnvyConnectionString());
			rcthshset->setProfileName(profileName);
			rcthshset->setReplicationOption(eReplicationOption);
			rcthshset->setDropOption(edropOption);
			rcthshset->setOdbcAttributes(builder->getOdbcAttributes());
			rcthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVENBILSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VENBILSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VENBILSET> venbilset(new VENBILSET());
			venbilset->open(sourceDSN, targetDSN);
			venbilset->setRepositoryString(builder->getEnvyConnectionString());
			venbilset->setProfileName(profileName);
			venbilset->setReplicationOption(eReplicationOption);
			venbilset->setDropOption(edropOption);
			venbilset->setOdbcAttributes(builder->getOdbcAttributes());
			venbilset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_APCSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_APCSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_APCSPISET> ma_apcspiset(new MA_APCSPISET());
			ma_apcspiset->open(sourceDSN, targetDSN);
			ma_apcspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_apcspiset->setProfileName(profileName);
			ma_apcspiset->setReplicationOption(eReplicationOption);
			ma_apcspiset->setDropOption(edropOption);
			ma_apcspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_apcspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumINTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("INTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<INTREC> intrec(new INTREC());
			intrec->open(sourceDSN, targetDSN);
			intrec->setRepositoryString(builder->getEnvyConnectionString());
			intrec->setProfileName(profileName);
			intrec->setReplicationOption(eReplicationOption);
			intrec->setDropOption(edropOption);
			intrec->setOdbcAttributes(builder->getOdbcAttributes());
			intrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHHREC> ma_shhrec(new MA_SHHREC());
			ma_shhrec->open(sourceDSN, targetDSN);
			ma_shhrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_shhrec->setProfileName(profileName);
			ma_shhrec->setReplicationOption(eReplicationOption);
			ma_shhrec->setDropOption(edropOption);
			ma_shhrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shhrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTSRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTSRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTSRTSET> ma_acctsrtset(new MA_ACCTSRTSET());
			ma_acctsrtset->open(sourceDSN, targetDSN);
			ma_acctsrtset->setRepositoryString(builder->getEnvyConnectionString());
			ma_acctsrtset->setProfileName(profileName);
			ma_acctsrtset->setReplicationOption(eReplicationOption);
			ma_acctsrtset->setDropOption(edropOption);
			ma_acctsrtset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_acctsrtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_COMOCLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_COMOCLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_COMOCLREC> ma_comoclrec(new MA_COMOCLREC());
			ma_comoclrec->open(sourceDSN, targetDSN);
			ma_comoclrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_comoclrec->setProfileName(profileName);
			ma_comoclrec->setReplicationOption(eReplicationOption);
			ma_comoclrec->setDropOption(edropOption);
			ma_comoclrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_comoclrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHDSERSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHDSERSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHDSERSET> ma_shdserset(new MA_SHDSERSET());
			ma_shdserset->open(sourceDSN, targetDSN);
			ma_shdserset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shdserset->setProfileName(profileName);
			ma_shdserset->setReplicationOption(eReplicationOption);
			ma_shdserset->setDropOption(edropOption);
			ma_shdserset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shdserset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumENGREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ENGREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ENGREC> engrec(new ENGREC());
			engrec->open(sourceDSN, targetDSN);
			engrec->setRepositoryString(builder->getEnvyConnectionString());
			engrec->setProfileName(profileName);
			engrec->setReplicationOption(eReplicationOption);
			engrec->setDropOption(edropOption);
			engrec->setOdbcAttributes(builder->getOdbcAttributes());
			engrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFA_ACCTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FA_ACCTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FA_ACCTHSHSET> fa_accthshset(new FA_ACCTHSHSET());
			fa_accthshset->open(sourceDSN, targetDSN);
			fa_accthshset->setRepositoryString(builder->getEnvyConnectionString());
			fa_accthshset->setProfileName(profileName);
			fa_accthshset->setReplicationOption(eReplicationOption);
			fa_accthshset->setDropOption(edropOption);
			fa_accthshset->setOdbcAttributes(builder->getOdbcAttributes());
			fa_accthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPMATSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPMATSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPMATSET> wipmatset(new WIPMATSET());
			wipmatset->open(sourceDSN, targetDSN);
			wipmatset->setRepositoryString(builder->getEnvyConnectionString());
			wipmatset->setProfileName(profileName);
			wipmatset->setReplicationOption(eReplicationOption);
			wipmatset->setDropOption(edropOption);
			wipmatset->setOdbcAttributes(builder->getOdbcAttributes());
			wipmatset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHPHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHPHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHPHSHSET> ma_shphshset(new MA_SHPHSHSET());
			ma_shphshset->open(sourceDSN, targetDSN);
			ma_shphshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shphshset->setProfileName(profileName);
			ma_shphshset->setReplicationOption(eReplicationOption);
			ma_shphshset->setDropOption(edropOption);
			ma_shphshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shphshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumDELREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("DELREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<DELREC> delrec(new DELREC());
			delrec->open(sourceDSN, targetDSN);
			delrec->setRepositoryString(builder->getEnvyConnectionString());
			delrec->setProfileName(profileName);
			delrec->setReplicationOption(eReplicationOption);
			delrec->setDropOption(edropOption);
			delrec->setOdbcAttributes(builder->getOdbcAttributes());
			delrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXRTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXRTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXRTHSHSET> ma_txrthshset(new MA_TXRTHSHSET());
			ma_txrthshset->open(sourceDSN, targetDSN);
			ma_txrthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_txrthshset->setProfileName(profileName);
			ma_txrthshset->setReplicationOption(eReplicationOption);
			ma_txrthshset->setDropOption(edropOption);
			ma_txrthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txrthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFSCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FSCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FSCSET> fscset(new FSCSET());
			fscset->open(sourceDSN, targetDSN);
			fscset->setRepositoryString(builder->getEnvyConnectionString());
			fscset->setProfileName(profileName);
			fscset->setReplicationOption(eReplicationOption);
			fscset->setDropOption(edropOption);
			fscset->setOdbcAttributes(builder->getOdbcAttributes());
			fscset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BATCHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BATCHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BATCHREC> ap_batchrec(new AP_BATCHREC());
			ap_batchrec->open(sourceDSN, targetDSN);
			ap_batchrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_batchrec->setProfileName(profileName);
			ap_batchrec->setReplicationOption(eReplicationOption);
			ap_batchrec->setDropOption(edropOption);
			ap_batchrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_batchrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumDRMTRSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("DRMTRSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<DRMTRSET> drmtrset(new DRMTRSET());
			drmtrset->open(sourceDSN, targetDSN);
			drmtrset->setRepositoryString(builder->getEnvyConnectionString());
			drmtrset->setProfileName(profileName);
			drmtrset->setReplicationOption(eReplicationOption);
			drmtrset->setDropOption(edropOption);
			drmtrset->setOdbcAttributes(builder->getOdbcAttributes());
			drmtrset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SODSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SODSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SODSPNLSET> ma_sodspnlset(new MA_SODSPNLSET());
			ma_sodspnlset->open(sourceDSN, targetDSN);
			ma_sodspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sodspnlset->setProfileName(profileName);
			ma_sodspnlset->setReplicationOption(eReplicationOption);
			ma_sodspnlset->setDropOption(edropOption);
			ma_sodspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sodspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILPRTABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILPRTABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILPRTABSET> ma_bilprtabset(new MA_BILPRTABSET());
			ma_bilprtabset->open(sourceDSN, targetDSN);
			ma_bilprtabset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilprtabset->setProfileName(profileName);
			ma_bilprtabset->setReplicationOption(eReplicationOption);
			ma_bilprtabset->setDropOption(edropOption);
			ma_bilprtabset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilprtabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWKCRTGSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WKCRTGSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WKCRTGSET> wkcrtgset(new WKCRTGSET());
			wkcrtgset->open(sourceDSN, targetDSN);
			wkcrtgset->setRepositoryString(builder->getEnvyConnectionString());
			wkcrtgset->setProfileName(profileName);
			wkcrtgset->setReplicationOption(eReplicationOption);
			wkcrtgset->setDropOption(edropOption);
			wkcrtgset->setOdbcAttributes(builder->getOdbcAttributes());
			wkcrtgset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_OOLINKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_OOLINKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_OOLINKSET> gl_oolinkset(new GL_OOLINKSET());
			gl_oolinkset->open(sourceDSN, targetDSN);
			gl_oolinkset->setRepositoryString(builder->getEnvyConnectionString());
			gl_oolinkset->setProfileName(profileName);
			gl_oolinkset->setReplicationOption(eReplicationOption);
			gl_oolinkset->setDropOption(edropOption);
			gl_oolinkset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_oolinkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumDELRCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("DELRCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<DELRCTSET> delrctset(new DELRCTSET());
			delrctset->open(sourceDSN, targetDSN);
			delrctset->setRepositoryString(builder->getEnvyConnectionString());
			delrctset->setProfileName(profileName);
			delrctset->setReplicationOption(eReplicationOption);
			delrctset->setDropOption(edropOption);
			delrctset->setOdbcAttributes(builder->getOdbcAttributes());
			delrctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACSTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACSTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACSTREC> acstrec(new ACSTREC());
			acstrec->open(sourceDSN, targetDSN);
			acstrec->setRepositoryString(builder->getEnvyConnectionString());
			acstrec->setProfileName(profileName);
			acstrec->setReplicationOption(eReplicationOption);
			acstrec->setDropOption(edropOption);
			acstrec->setOdbcAttributes(builder->getOdbcAttributes());
			acstrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPREC> wiprec(new WIPREC());
			wiprec->open(sourceDSN, targetDSN);
			wiprec->setRepositoryString(builder->getEnvyConnectionString());
			wiprec->setProfileName(profileName);
			wiprec->setReplicationOption(eReplicationOption);
			wiprec->setDropOption(edropOption);
			wiprec->setOdbcAttributes(builder->getOdbcAttributes());
			wiprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PNOTINVREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PNOTINVREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PNOTINVREC> ma_pnotinvrec(new MA_PNOTINVREC());
			ma_pnotinvrec->open(sourceDSN, targetDSN);
			ma_pnotinvrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_pnotinvrec->setProfileName(profileName);
			ma_pnotinvrec->setReplicationOption(eReplicationOption);
			ma_pnotinvrec->setDropOption(edropOption);
			ma_pnotinvrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_pnotinvrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VNDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VNDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VNDREC> ap_vndrec(new AP_VNDREC());
			ap_vndrec->open(sourceDSN, targetDSN);
			ap_vndrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_vndrec->setProfileName(profileName);
			ap_vndrec->setReplicationOption(eReplicationOption);
			ap_vndrec->setDropOption(edropOption);
			ap_vndrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vndrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPWOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPWOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPWOHSET> wipwohset(new WIPWOHSET());
			wipwohset->open(sourceDSN, targetDSN);
			wipwohset->setRepositoryString(builder->getEnvyConnectionString());
			wipwohset->setProfileName(profileName);
			wipwohset->setReplicationOption(eReplicationOption);
			wipwohset->setDropOption(edropOption);
			wipwohset->setOdbcAttributes(builder->getOdbcAttributes());
			wipwohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_STERSAMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_STERSAMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_STERSAMSET> ma_stersamset(new MA_STERSAMSET());
			ma_stersamset->open(sourceDSN, targetDSN);
			ma_stersamset->setRepositoryString(builder->getEnvyConnectionString());
			ma_stersamset->setProfileName(profileName);
			ma_stersamset->setReplicationOption(eReplicationOption);
			ma_stersamset->setDropOption(edropOption);
			ma_stersamset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_stersamset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BCHHOLDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BCHHOLDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BCHHOLDSET> ap_bchholdset(new AP_BCHHOLDSET());
			ap_bchholdset->open(sourceDSN, targetDSN);
			ap_bchholdset->setRepositoryString(builder->getEnvyConnectionString());
			ap_bchholdset->setProfileName(profileName);
			ap_bchholdset->setReplicationOption(eReplicationOption);
			ap_bchholdset->setDropOption(edropOption);
			ap_bchholdset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bchholdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ACCTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ACCTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ACCTREC> gl_acctrec(new GL_ACCTREC());
			gl_acctrec->open(sourceDSN, targetDSN);
			gl_acctrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_acctrec->setProfileName(profileName);
			gl_acctrec->setReplicationOption(eReplicationOption);
			gl_acctrec->setDropOption(edropOption);
			gl_acctrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_acctrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTOPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTOPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTOPSET> actopset(new ACTOPSET());
			actopset->open(sourceDSN, targetDSN);
			actopset->setRepositoryString(builder->getEnvyConnectionString());
			actopset->setProfileName(profileName);
			actopset->setReplicationOption(eReplicationOption);
			actopset->setDropOption(edropOption);
			actopset->setOdbcAttributes(builder->getOdbcAttributes());
			actopset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWOHVARSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WOHVARSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WOHVARSET> wohvarset(new WOHVARSET());
			wohvarset->open(sourceDSN, targetDSN);
			wohvarset->setRepositoryString(builder->getEnvyConnectionString());
			wohvarset->setProfileName(profileName);
			wohvarset->setReplicationOption(eReplicationOption);
			wohvarset->setDropOption(edropOption);
			wohvarset->setOdbcAttributes(builder->getOdbcAttributes());
			wohvarset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_FLDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_FLDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_FLDREC> ma_fldrec(new MA_FLDREC());
			ma_fldrec->open(sourceDSN, targetDSN);
			ma_fldrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_fldrec->setProfileName(profileName);
			ma_fldrec->setReplicationOption(eReplicationOption);
			ma_fldrec->setDropOption(edropOption);
			ma_fldrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_fldrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPFRSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPFRSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPFRSET> gl_vpfrset(new GL_VPFRSET());
			gl_vpfrset->open(sourceDSN, targetDSN);
			gl_vpfrset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpfrset->setProfileName(profileName);
			gl_vpfrset->setReplicationOption(eReplicationOption);
			gl_vpfrset->setDropOption(edropOption);
			gl_vpfrset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpfrset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INDREC> ma_indrec(new MA_INDREC());
			ma_indrec->open(sourceDSN, targetDSN);
			ma_indrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_indrec->setProfileName(profileName);
			ma_indrec->setReplicationOption(eReplicationOption);
			ma_indrec->setDropOption(edropOption);
			ma_indrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_indrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTFAMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTFAMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTFAMSET> prtfamset(new PRTFAMSET());
			prtfamset->open(sourceDSN, targetDSN);
			prtfamset->setRepositoryString(builder->getEnvyConnectionString());
			prtfamset->setProfileName(profileName);
			prtfamset->setReplicationOption(eReplicationOption);
			prtfamset->setDropOption(edropOption);
			prtfamset->setOdbcAttributes(builder->getOdbcAttributes());
			prtfamset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCDLCONSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CDLCONSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CDLCONSET> cdlconset(new CDLCONSET());
			cdlconset->open(sourceDSN, targetDSN);
			cdlconset->setRepositoryString(builder->getEnvyConnectionString());
			cdlconset->setProfileName(profileName);
			cdlconset->setReplicationOption(eReplicationOption);
			cdlconset->setDropOption(edropOption);
			cdlconset->setOdbcAttributes(builder->getOdbcAttributes());
			cdlconset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFLDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FLDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FLDSET> fldset(new FLDSET());
			fldset->open(sourceDSN, targetDSN);
			fldset->setRepositoryString(builder->getEnvyConnectionString());
			fldset->setProfileName(profileName);
			fldset->setReplicationOption(eReplicationOption);
			fldset->setDropOption(edropOption);
			fldset->setOdbcAttributes(builder->getOdbcAttributes());
			fldset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_COMOCOMOCLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_COMOCOMOCLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_COMOCOMOCLSET> ma_comocomoclset(new MA_COMOCOMOCLSET());
			ma_comocomoclset->open(sourceDSN, targetDSN);
			ma_comocomoclset->setRepositoryString(builder->getEnvyConnectionString());
			ma_comocomoclset->setProfileName(profileName);
			ma_comocomoclset->setReplicationOption(eReplicationOption);
			ma_comocomoclset->setDropOption(edropOption);
			ma_comocomoclset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_comocomoclset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFA_PROJREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FA_PROJREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FA_PROJREC> fa_projrec(new FA_PROJREC());
			fa_projrec->open(sourceDSN, targetDSN);
			fa_projrec->setRepositoryString(builder->getEnvyConnectionString());
			fa_projrec->setProfileName(profileName);
			fa_projrec->setReplicationOption(eReplicationOption);
			fa_projrec->setDropOption(edropOption);
			fa_projrec->setOdbcAttributes(builder->getOdbcAttributes());
			fa_projrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_RSNHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_RSNHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_RSNHSHSET> ma_rsnhshset(new MA_RSNHSHSET());
			ma_rsnhshset->open(sourceDSN, targetDSN);
			ma_rsnhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_rsnhshset->setProfileName(profileName);
			ma_rsnhshset->setReplicationOption(eReplicationOption);
			ma_rsnhshset->setDropOption(edropOption);
			ma_rsnhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_rsnhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHPOSTSET> ma_inhpostset(new MA_INHPOSTSET());
			ma_inhpostset->open(sourceDSN, targetDSN);
			ma_inhpostset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhpostset->setProfileName(profileName);
			ma_inhpostset->setReplicationOption(eReplicationOption);
			ma_inhpostset->setDropOption(edropOption);
			ma_inhpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUOHQUODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUOHQUODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUOHQUODSET> ma_quohquodset(new MA_QUOHQUODSET());
			ma_quohquodset->open(sourceDSN, targetDSN);
			ma_quohquodset->setRepositoryString(builder->getEnvyConnectionString());
			ma_quohquodset->setProfileName(profileName);
			ma_quohquodset->setReplicationOption(eReplicationOption);
			ma_quohquodset->setDropOption(edropOption);
			ma_quohquodset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quohquodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMHSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMHSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMHSPNLSET> ma_cmhspnlset(new MA_CMHSPNLSET());
			ma_cmhspnlset->open(sourceDSN, targetDSN);
			ma_cmhspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmhspnlset->setProfileName(profileName);
			ma_cmhspnlset->setReplicationOption(eReplicationOption);
			ma_cmhspnlset->setDropOption(edropOption);
			ma_cmhspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmhspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_TPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_TPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_TPREC> ed_tprec(new ED_TPREC());
			ed_tprec->open(sourceDSN, targetDSN);
			ed_tprec->setRepositoryString(builder->getEnvyConnectionString());
			ed_tprec->setProfileName(profileName);
			ed_tprec->setReplicationOption(eReplicationOption);
			ed_tprec->setDropOption(edropOption);
			ed_tprec->setOdbcAttributes(builder->getOdbcAttributes());
			ed_tprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPMETSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPMETSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPMETSET> wipmetset(new WIPMETSET());
			wipmetset->open(sourceDSN, targetDSN);
			wipmetset->setRepositoryString(builder->getEnvyConnectionString());
			wipmetset->setProfileName(profileName);
			wipmetset->setReplicationOption(eReplicationOption);
			wipmetset->setDropOption(edropOption);
			wipmetset->setOdbcAttributes(builder->getOdbcAttributes());
			wipmetset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PROJHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PROJHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PROJHSHSET> ap_projhshset(new AP_PROJHSHSET());
			ap_projhshset->open(sourceDSN, targetDSN);
			ap_projhshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_projhshset->setProfileName(profileName);
			ap_projhshset->setReplicationOption(eReplicationOption);
			ap_projhshset->setDropOption(edropOption);
			ap_projhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_projhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumTRKREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("TRKREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<TRKREC> trkrec(new TRKREC());
			trkrec->open(sourceDSN, targetDSN);
			trkrec->setRepositoryString(builder->getEnvyConnectionString());
			trkrec->setProfileName(profileName);
			trkrec->setReplicationOption(eReplicationOption);
			trkrec->setDropOption(edropOption);
			trkrec->setOdbcAttributes(builder->getOdbcAttributes());
			trkrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SODREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SODREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SODREC> ma_sodrec(new MA_SODREC());
			ma_sodrec->open(sourceDSN, targetDSN);
			ma_sodrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_sodrec->setProfileName(profileName);
			ma_sodrec->setReplicationOption(eReplicationOption);
			ma_sodrec->setDropOption(edropOption);
			ma_sodrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sodrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VNOTEREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VNOTEREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VNOTEREC> ap_vnoterec(new AP_VNOTEREC());
			ap_vnoterec->open(sourceDSN, targetDSN);
			ap_vnoterec->setRepositoryString(builder->getEnvyConnectionString());
			ap_vnoterec->setProfileName(profileName);
			ap_vnoterec->setReplicationOption(eReplicationOption);
			ap_vnoterec->setDropOption(edropOption);
			ap_vnoterec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vnoterec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumSODREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("SODREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<SODREC> sodrec(new SODREC());
			sodrec->open(sourceDSN, targetDSN);
			sodrec->setRepositoryString(builder->getEnvyConnectionString());
			sodrec->setProfileName(profileName);
			sodrec->setReplicationOption(eReplicationOption);
			sodrec->setDropOption(edropOption);
			sodrec->setOdbcAttributes(builder->getOdbcAttributes());
			sodrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTPOSTSET> ma_acctpostset(new MA_ACCTPOSTSET());
			ma_acctpostset->open(sourceDSN, targetDSN);
			ma_acctpostset->setRepositoryString(builder->getEnvyConnectionString());
			ma_acctpostset->setProfileName(profileName);
			ma_acctpostset->setReplicationOption(eReplicationOption);
			ma_acctpostset->setDropOption(edropOption);
			ma_acctpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_acctpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VCHPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VCHPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VCHPOSTSET> ap_vchpostset(new AP_VCHPOSTSET());
			ap_vchpostset->open(sourceDSN, targetDSN);
			ap_vchpostset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vchpostset->setProfileName(profileName);
			ap_vchpostset->setReplicationOption(eReplicationOption);
			ap_vchpostset->setDropOption(edropOption);
			ap_vchpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vchpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_SEARCHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_SEARCHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_SEARCHHSHSET> ap_searchhshset(new AP_SEARCHHSHSET());
			ap_searchhshset->open(sourceDSN, targetDSN);
			ap_searchhshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_searchhshset->setProfileName(profileName);
			ap_searchhshset->setReplicationOption(eReplicationOption);
			ap_searchhshset->setDropOption(edropOption);
			ap_searchhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_searchhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PROJAPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PROJAPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PROJAPSET> gl_projapset(new GL_PROJAPSET());
			gl_projapset->open(sourceDSN, targetDSN);
			gl_projapset->setRepositoryString(builder->getEnvyConnectionString());
			gl_projapset->setProfileName(profileName);
			gl_projapset->setReplicationOption(eReplicationOption);
			gl_projapset->setDropOption(edropOption);
			gl_projapset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_projapset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumEMPLABPYSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("EMPLABPYSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<EMPLABPYSET> emplabpyset(new EMPLABPYSET());
			emplabpyset->open(sourceDSN, targetDSN);
			emplabpyset->setRepositoryString(builder->getEnvyConnectionString());
			emplabpyset->setProfileName(profileName);
			emplabpyset->setReplicationOption(eReplicationOption);
			emplabpyset->setDropOption(edropOption);
			emplabpyset->setOdbcAttributes(builder->getOdbcAttributes());
			emplabpyset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRTGREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RTGREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RTGREC> rtgrec(new RTGREC());
			rtgrec->open(sourceDSN, targetDSN);
			rtgrec->setRepositoryString(builder->getEnvyConnectionString());
			rtgrec->setProfileName(profileName);
			rtgrec->setReplicationOption(eReplicationOption);
			rtgrec->setDropOption(edropOption);
			rtgrec->setOdbcAttributes(builder->getOdbcAttributes());
			rtgrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_DMHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_DMHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_DMHREC> ma_dmhrec(new MA_DMHREC());
			ma_dmhrec->open(sourceDSN, targetDSN);
			ma_dmhrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_dmhrec->setProfileName(profileName);
			ma_dmhrec->setReplicationOption(eReplicationOption);
			ma_dmhrec->setDropOption(edropOption);
			ma_dmhrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_dmhrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_STERREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_STERREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_STERREC> ma_sterrec(new MA_STERREC());
			ma_sterrec->open(sourceDSN, targetDSN);
			ma_sterrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_sterrec->setProfileName(profileName);
			ma_sterrec->setReplicationOption(eReplicationOption);
			ma_sterrec->setDropOption(edropOption);
			ma_sterrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sterrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFA_PROJHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FA_PROJHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FA_PROJHSHSET> fa_projhshset(new FA_PROJHSHSET());
			fa_projhshset->open(sourceDSN, targetDSN);
			fa_projhshset->setRepositoryString(builder->getEnvyConnectionString());
			fa_projhshset->setProfileName(profileName);
			fa_projhshset->setReplicationOption(eReplicationOption);
			fa_projhshset->setDropOption(edropOption);
			fa_projhshset->setOdbcAttributes(builder->getOdbcAttributes());
			fa_projhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRPTFCPRTABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRPTFCPRTABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRPTFCPRTABSET> ma_prptfcprtabset(new MA_PRPTFCPRTABSET());
			ma_prptfcprtabset->open(sourceDSN, targetDSN);
			ma_prptfcprtabset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prptfcprtabset->setProfileName(profileName);
			ma_prptfcprtabset->setReplicationOption(eReplicationOption);
			ma_prptfcprtabset->setDropOption(edropOption);
			ma_prptfcprtabset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prptfcprtabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOHPODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POHPODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POHPODSET> pohpodset(new POHPODSET());
			pohpodset->open(sourceDSN, targetDSN);
			pohpodset->setRepositoryString(builder->getEnvyConnectionString());
			pohpodset->setProfileName(profileName);
			pohpodset->setReplicationOption(eReplicationOption);
			pohpodset->setDropOption(edropOption);
			pohpodset->setOdbcAttributes(builder->getOdbcAttributes());
			pohpodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PROJAMTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PROJAMTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PROJAMTSET> gl_projamtset(new GL_PROJAMTSET());
			gl_projamtset->open(sourceDSN, targetDSN);
			gl_projamtset->setRepositoryString(builder->getEnvyConnectionString());
			gl_projamtset->setProfileName(profileName);
			gl_projamtset->setReplicationOption(eReplicationOption);
			gl_projamtset->setDropOption(edropOption);
			gl_projamtset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_projamtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRESHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RESHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RESHSHSET> reshshset(new RESHSHSET());
			reshshset->open(sourceDSN, targetDSN);
			reshshset->setRepositoryString(builder->getEnvyConnectionString());
			reshshset->setProfileName(profileName);
			reshshset->setReplicationOption(eReplicationOption);
			reshshset->setDropOption(edropOption);
			reshshset->setOdbcAttributes(builder->getOdbcAttributes());
			reshshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHPCOMCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHPCOMCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHPCOMCSET> ma_shpcomcset(new MA_SHPCOMCSET());
			ma_shpcomcset->open(sourceDSN, targetDSN);
			ma_shpcomcset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shpcomcset->setProfileName(profileName);
			ma_shpcomcset->setReplicationOption(eReplicationOption);
			ma_shpcomcset->setDropOption(edropOption);
			ma_shpcomcset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shpcomcset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ACCTDESCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ACCTDESCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ACCTDESCSET> gl_acctdescset(new GL_ACCTDESCSET());
			gl_acctdescset->open(sourceDSN, targetDSN);
			gl_acctdescset->setRepositoryString(builder->getEnvyConnectionString());
			gl_acctdescset->setProfileName(profileName);
			gl_acctdescset->setReplicationOption(eReplicationOption);
			gl_acctdescset->setDropOption(edropOption);
			gl_acctdescset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_acctdescset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PNOTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PNOTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PNOTHSHSET> ap_pnothshset(new AP_PNOTHSHSET());
			ap_pnothshset->open(sourceDSN, targetDSN);
			ap_pnothshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_pnothshset->setProfileName(profileName);
			ap_pnothshset->setReplicationOption(eReplicationOption);
			ap_pnothshset->setDropOption(edropOption);
			ap_pnothshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pnothshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FPFRSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FPFRSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FPFRSET> gl_fpfrset(new GL_FPFRSET());
			gl_fpfrset->open(sourceDSN, targetDSN);
			gl_fpfrset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fpfrset->setProfileName(profileName);
			gl_fpfrset->setReplicationOption(eReplicationOption);
			gl_fpfrset->setDropOption(edropOption);
			gl_fpfrset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fpfrset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMRLMRHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MRLMRHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MRLMRHSET> mrlmrhset(new MRLMRHSET());
			mrlmrhset->open(sourceDSN, targetDSN);
			mrlmrhset->setRepositoryString(builder->getEnvyConnectionString());
			mrlmrhset->setProfileName(profileName);
			mrlmrhset->setReplicationOption(eReplicationOption);
			mrlmrhset->setDropOption(edropOption);
			mrlmrhset->setOdbcAttributes(builder->getOdbcAttributes());
			mrlmrhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ARPT_HREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ARPT_HREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ARPT_HREC> gl_arpt_hrec(new GL_ARPT_HREC());
			gl_arpt_hrec->open(sourceDSN, targetDSN);
			gl_arpt_hrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_arpt_hrec->setProfileName(profileName);
			gl_arpt_hrec->setReplicationOption(eReplicationOption);
			gl_arpt_hrec->setDropOption(edropOption);
			gl_arpt_hrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_arpt_hrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXINHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXINHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXINHSET> ma_txinhset(new MA_TXINHSET());
			ma_txinhset->open(sourceDSN, targetDSN);
			ma_txinhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_txinhset->setProfileName(profileName);
			ma_txinhset->setReplicationOption(eReplicationOption);
			ma_txinhset->setDropOption(edropOption);
			ma_txinhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txinhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CHGDCOMOCLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CHGDCOMOCLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CHGDCOMOCLSET> ma_chgdcomoclset(new MA_CHGDCOMOCLSET());
			ma_chgdcomoclset->open(sourceDSN, targetDSN);
			ma_chgdcomoclset->setRepositoryString(builder->getEnvyConnectionString());
			ma_chgdcomoclset->setProfileName(profileName);
			ma_chgdcomoclset->setReplicationOption(eReplicationOption);
			ma_chgdcomoclset->setDropOption(edropOption);
			ma_chgdcomoclset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_chgdcomoclset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ABUDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ABUDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ABUDREC> gl_abudrec(new GL_ABUDREC());
			gl_abudrec->open(sourceDSN, targetDSN);
			gl_abudrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_abudrec->setProfileName(profileName);
			gl_abudrec->setReplicationOption(eReplicationOption);
			gl_abudrec->setDropOption(edropOption);
			gl_abudrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_abudrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumBYDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("BYDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<BYDREC> bydrec(new BYDREC());
			bydrec->open(sourceDSN, targetDSN);
			bydrec->setRepositoryString(builder->getEnvyConnectionString());
			bydrec->setProfileName(profileName);
			bydrec->setReplicationOption(eReplicationOption);
			bydrec->setDropOption(edropOption);
			bydrec->setOdbcAttributes(builder->getOdbcAttributes());
			bydrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTREC> actrec(new ACTREC());
			actrec->open(sourceDSN, targetDSN);
			actrec->setRepositoryString(builder->getEnvyConnectionString());
			actrec->setProfileName(profileName);
			actrec->setReplicationOption(eReplicationOption);
			actrec->setDropOption(edropOption);
			actrec->setOdbcAttributes(builder->getOdbcAttributes());
			actrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHPRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHPRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHPRTSET> ma_inhprtset(new MA_INHPRTSET());
			ma_inhprtset->open(sourceDSN, targetDSN);
			ma_inhprtset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhprtset->setProfileName(profileName);
			ma_inhprtset->setReplicationOption(eReplicationOption);
			ma_inhprtset->setDropOption(edropOption);
			ma_inhprtset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhprtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHDPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHDPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHDPREC> ma_shdprec(new MA_SHDPREC());
			ma_shdprec->open(sourceDSN, targetDSN);
			ma_shdprec->setRepositoryString(builder->getEnvyConnectionString());
			ma_shdprec->setProfileName(profileName);
			ma_shdprec->setReplicationOption(eReplicationOption);
			ma_shdprec->setDropOption(edropOption);
			ma_shdprec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shdprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FPOFFPROJSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FPOFFPROJSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FPOFFPROJSET> gl_fpoffprojset(new GL_FPOFFPROJSET());
			gl_fpoffprojset->open(sourceDSN, targetDSN);
			gl_fpoffprojset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fpoffprojset->setProfileName(profileName);
			gl_fpoffprojset->setReplicationOption(eReplicationOption);
			gl_fpoffprojset->setDropOption(edropOption);
			gl_fpoffprojset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fpoffprojset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_POSTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_POSTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_POSTHSHSET> ma_posthshset(new MA_POSTHSHSET());
			ma_posthshset->open(sourceDSN, targetDSN);
			ma_posthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_posthshset->setProfileName(profileName);
			ma_posthshset->setReplicationOption(eReplicationOption);
			ma_posthshset->setDropOption(edropOption);
			ma_posthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_posthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_JVREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_JVREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_JVREC> gl_jvrec(new GL_JVREC());
			gl_jvrec->open(sourceDSN, targetDSN);
			gl_jvrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_jvrec->setProfileName(profileName);
			gl_jvrec->setReplicationOption(eReplicationOption);
			gl_jvrec->setDropOption(edropOption);
			gl_jvrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_jvrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_SEARCHSRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_SEARCHSRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_SEARCHSRTSET> ap_searchsrtset(new AP_SEARCHSRTSET());
			ap_searchsrtset->open(sourceDSN, targetDSN);
			ap_searchsrtset->setRepositoryString(builder->getEnvyConnectionString());
			ap_searchsrtset->setProfileName(profileName);
			ap_searchsrtset->setReplicationOption(eReplicationOption);
			ap_searchsrtset->setDropOption(edropOption);
			ap_searchsrtset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_searchsrtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODCOMOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODCOMOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODCOMOSET> ma_prodcomoset(new MA_PRODCOMOSET());
			ma_prodcomoset->open(sourceDSN, targetDSN);
			ma_prodcomoset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodcomoset->setProfileName(profileName);
			ma_prodcomoset->setReplicationOption(eReplicationOption);
			ma_prodcomoset->setDropOption(edropOption);
			ma_prodcomoset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodcomoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTQOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTQOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTQOHSET> prtqohset(new PRTQOHSET());
			prtqohset->open(sourceDSN, targetDSN);
			prtqohset->setRepositoryString(builder->getEnvyConnectionString());
			prtqohset->setProfileName(profileName);
			prtqohset->setReplicationOption(eReplicationOption);
			prtqohset->setDropOption(edropOption);
			prtqohset->setOdbcAttributes(builder->getOdbcAttributes());
			prtqohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPONREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PONREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PONREC> ponrec(new PONREC());
			ponrec->open(sourceDSN, targetDSN);
			ponrec->setRepositoryString(builder->getEnvyConnectionString());
			ponrec->setProfileName(profileName);
			ponrec->setReplicationOption(eReplicationOption);
			ponrec->setDropOption(edropOption);
			ponrec->setOdbcAttributes(builder->getOdbcAttributes());
			ponrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumBORREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("BORREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<BORREC> borrec(new BORREC());
			borrec->open(sourceDSN, targetDSN);
			borrec->setRepositoryString(builder->getEnvyConnectionString());
			borrec->setProfileName(profileName);
			borrec->setReplicationOption(eReplicationOption);
			borrec->setDropOption(edropOption);
			borrec->setOdbcAttributes(builder->getOdbcAttributes());
			borrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PARTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PARTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PARTREC> ma_partrec(new MA_PARTREC());
			ma_partrec->open(sourceDSN, targetDSN);
			ma_partrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_partrec->setProfileName(profileName);
			ma_partrec->setReplicationOption(eReplicationOption);
			ma_partrec->setDropOption(edropOption);
			ma_partrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_partrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumECCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ECCREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ECCREC> eccrec(new ECCREC());
			eccrec->open(sourceDSN, targetDSN);
			eccrec->setRepositoryString(builder->getEnvyConnectionString());
			eccrec->setProfileName(profileName);
			eccrec->setReplicationOption(eReplicationOption);
			eccrec->setDropOption(edropOption);
			eccrec->setOdbcAttributes(builder->getOdbcAttributes());
			eccrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SODQUODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SODQUODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SODQUODSET> ma_sodquodset(new MA_SODQUODSET());
			ma_sodquodset->open(sourceDSN, targetDSN);
			ma_sodquodset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sodquodset->setProfileName(profileName);
			ma_sodquodset->setReplicationOption(eReplicationOption);
			ma_sodquodset->setDropOption(edropOption);
			ma_sodquodset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sodquodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMDMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMDMREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMDMREC> ma_cmdmrec(new MA_CMDMREC());
			ma_cmdmrec->open(sourceDSN, targetDSN);
			ma_cmdmrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmdmrec->setProfileName(profileName);
			ma_cmdmrec->setReplicationOption(eReplicationOption);
			ma_cmdmrec->setDropOption(edropOption);
			ma_cmdmrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmdmrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VNDVCHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VNDVCHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VNDVCHSET> ap_vndvchset(new AP_VNDVCHSET());
			ap_vndvchset->open(sourceDSN, targetDSN);
			ap_vndvchset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vndvchset->setProfileName(profileName);
			ap_vndvchset->setReplicationOption(eReplicationOption);
			ap_vndvchset->setDropOption(edropOption);
			ap_vndvchset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vndvchset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTHSHSET> prthshset(new PRTHSHSET());
			prthshset->open(sourceDSN, targetDSN);
			prthshset->setRepositoryString(builder->getEnvyConnectionString());
			prthshset->setProfileName(profileName);
			prthshset->setReplicationOption(eReplicationOption);
			prthshset->setDropOption(edropOption);
			prthshset->setOdbcAttributes(builder->getOdbcAttributes());
			prthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_STGHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_STGHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_STGHSHSET> ma_stghshset(new MA_STGHSHSET());
			ma_stghshset->open(sourceDSN, targetDSN);
			ma_stghshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_stghshset->setProfileName(profileName);
			ma_stghshset->setReplicationOption(eReplicationOption);
			ma_stghshset->setDropOption(edropOption);
			ma_stghshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_stghshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FPOFFACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FPOFFACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FPOFFACCTSET> gl_fpoffacctset(new GL_FPOFFACCTSET());
			gl_fpoffacctset->open(sourceDSN, targetDSN);
			gl_fpoffacctset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fpoffacctset->setProfileName(profileName);
			gl_fpoffacctset->setReplicationOption(eReplicationOption);
			gl_fpoffacctset->setDropOption(edropOption);
			gl_fpoffacctset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fpoffacctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PARTOPTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PARTOPTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PARTOPTSET> ma_partoptset(new MA_PARTOPTSET());
			ma_partoptset->open(sourceDSN, targetDSN);
			ma_partoptset->setRepositoryString(builder->getEnvyConnectionString());
			ma_partoptset->setProfileName(profileName);
			ma_partoptset->setReplicationOption(eReplicationOption);
			ma_partoptset->setDropOption(edropOption);
			ma_partoptset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_partoptset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFRTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FRTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FRTHSHSET> frthshset(new FRTHSHSET());
			frthshset->open(sourceDSN, targetDSN);
			frthshset->setRepositoryString(builder->getEnvyConnectionString());
			frthshset->setProfileName(profileName);
			frthshset->setReplicationOption(eReplicationOption);
			frthshset->setDropOption(edropOption);
			frthshset->setOdbcAttributes(builder->getOdbcAttributes());
			frthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_CLEARSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_CLEARSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_CLEARSET> gl_clearset(new GL_CLEARSET());
			gl_clearset->open(sourceDSN, targetDSN);
			gl_clearset->setRepositoryString(builder->getEnvyConnectionString());
			gl_clearset->setProfileName(profileName);
			gl_clearset->setReplicationOption(eReplicationOption);
			gl_clearset->setDropOption(edropOption);
			gl_clearset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_clearset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumOPCPRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("OPCPRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<OPCPRTSET> opcprtset(new OPCPRTSET());
			opcprtset->open(sourceDSN, targetDSN);
			opcprtset->setRepositoryString(builder->getEnvyConnectionString());
			opcprtset->setProfileName(profileName);
			opcprtset->setReplicationOption(eReplicationOption);
			opcprtset->setDropOption(edropOption);
			opcprtset->setOdbcAttributes(builder->getOdbcAttributes());
			opcprtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumLOTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("LOTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<LOTHSHSET> lothshset(new LOTHSHSET());
			lothshset->open(sourceDSN, targetDSN);
			lothshset->setRepositoryString(builder->getEnvyConnectionString());
			lothshset->setProfileName(profileName);
			lothshset->setReplicationOption(eReplicationOption);
			lothshset->setDropOption(edropOption);
			lothshset->setOdbcAttributes(builder->getOdbcAttributes());
			lothshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOCATHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOCATHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOCATHSHSET> ma_socathshset(new MA_SOCATHSHSET());
			ma_socathshset->open(sourceDSN, targetDSN);
			ma_socathshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_socathshset->setProfileName(profileName);
			ma_socathshset->setReplicationOption(eReplicationOption);
			ma_socathshset->setDropOption(edropOption);
			ma_socathshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_socathshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_OPLINKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_OPLINKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_OPLINKSET> gl_oplinkset(new GL_OPLINKSET());
			gl_oplinkset->open(sourceDSN, targetDSN);
			gl_oplinkset->setRepositoryString(builder->getEnvyConnectionString());
			gl_oplinkset->setProfileName(profileName);
			gl_oplinkset->setReplicationOption(eReplicationOption);
			gl_oplinkset->setDropOption(edropOption);
			gl_oplinkset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_oplinkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCURREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CURREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CURREC> currec(new CURREC());
			currec->open(sourceDSN, targetDSN);
			currec->setRepositoryString(builder->getEnvyConnectionString());
			currec->setProfileName(profileName);
			currec->setReplicationOption(eReplicationOption);
			currec->setDropOption(edropOption);
			currec->setOdbcAttributes(builder->getOdbcAttributes());
			currec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_FRTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_FRTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_FRTREC> ma_frtrec(new MA_FRTREC());
			ma_frtrec->open(sourceDSN, targetDSN);
			ma_frtrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_frtrec->setProfileName(profileName);
			ma_frtrec->setReplicationOption(eReplicationOption);
			ma_frtrec->setDropOption(edropOption);
			ma_frtrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_frtrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMHDMHLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMHDMHLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMHDMHLSET> ma_cmhdmhlset(new MA_CMHDMHLSET());
			ma_cmhdmhlset->open(sourceDSN, targetDSN);
			ma_cmhdmhlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmhdmhlset->setProfileName(profileName);
			ma_cmhdmhlset->setReplicationOption(eReplicationOption);
			ma_cmhdmhlset->setDropOption(edropOption);
			ma_cmhdmhlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmhdmhlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPHSHSET> gl_vphshset(new GL_VPHSHSET());
			gl_vphshset->open(sourceDSN, targetDSN);
			gl_vphshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vphshset->setProfileName(profileName);
			gl_vphshset->setReplicationOption(eReplicationOption);
			gl_vphshset->setDropOption(edropOption);
			gl_vphshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vphshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPODPOPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PODPOPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PODPOPSET> podpopset(new PODPOPSET());
			podpopset->open(sourceDSN, targetDSN);
			podpopset->setRepositoryString(builder->getEnvyConnectionString());
			podpopset->setProfileName(profileName);
			podpopset->setReplicationOption(eReplicationOption);
			podpopset->setDropOption(edropOption);
			podpopset->setOdbcAttributes(builder->getOdbcAttributes());
			podpopset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_ENTAUDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_ENTAUDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_ENTAUDSET> ed_entaudset(new ED_ENTAUDSET());
			ed_entaudset->open(sourceDSN, targetDSN);
			ed_entaudset->setRepositoryString(builder->getEnvyConnectionString());
			ed_entaudset->setProfileName(profileName);
			ed_entaudset->setReplicationOption(eReplicationOption);
			ed_entaudset->setDropOption(edropOption);
			ed_entaudset->setOdbcAttributes(builder->getOdbcAttributes());
			ed_entaudset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCDLCOPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CDLCOPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CDLCOPSET> cdlcopset(new CDLCOPSET());
			cdlcopset->open(sourceDSN, targetDSN);
			cdlcopset->setRepositoryString(builder->getEnvyConnectionString());
			cdlcopset->setProfileName(profileName);
			cdlcopset->setReplicationOption(eReplicationOption);
			cdlcopset->setDropOption(edropOption);
			cdlcopset->setOdbcAttributes(builder->getOdbcAttributes());
			cdlcopset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWOHACLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WOHACLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WOHACLSET> wohaclset(new WOHACLSET());
			wohaclset->open(sourceDSN, targetDSN);
			wohaclset->setRepositoryString(builder->getEnvyConnectionString());
			wohaclset->setProfileName(profileName);
			wohaclset->setReplicationOption(eReplicationOption);
			wohaclset->setDropOption(edropOption);
			wohaclset->setOdbcAttributes(builder->getOdbcAttributes());
			wohaclset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumINVLOCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("INVLOCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<INVLOCSET> invlocset(new INVLOCSET());
			invlocset->open(sourceDSN, targetDSN);
			invlocset->setRepositoryString(builder->getEnvyConnectionString());
			invlocset->setProfileName(profileName);
			invlocset->setReplicationOption(eReplicationOption);
			invlocset->setDropOption(edropOption);
			invlocset->setOdbcAttributes(builder->getOdbcAttributes());
			invlocset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHWOPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHWOPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHWOPOSTSET> ma_inhwopostset(new MA_INHWOPOSTSET());
			ma_inhwopostset->open(sourceDSN, targetDSN);
			ma_inhwopostset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhwopostset->setProfileName(profileName);
			ma_inhwopostset->setReplicationOption(eReplicationOption);
			ma_inhwopostset->setDropOption(edropOption);
			ma_inhwopostset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhwopostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_DMHSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_DMHSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_DMHSPISET> ma_dmhspiset(new MA_DMHSPISET());
			ma_dmhspiset->open(sourceDSN, targetDSN);
			ma_dmhspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_dmhspiset->setProfileName(profileName);
			ma_dmhspiset->setReplicationOption(eReplicationOption);
			ma_dmhspiset->setDropOption(edropOption);
			ma_dmhspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_dmhspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILCMHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILCMHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILCMHSET> ma_bilcmhset(new MA_BILCMHSET());
			ma_bilcmhset->open(sourceDSN, targetDSN);
			ma_bilcmhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilcmhset->setProfileName(profileName);
			ma_bilcmhset->setReplicationOption(eReplicationOption);
			ma_bilcmhset->setDropOption(edropOption);
			ma_bilcmhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilcmhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCPRREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CPRREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CPRREC> cprrec(new CPRREC());
			cprrec->open(sourceDSN, targetDSN);
			cprrec->setRepositoryString(builder->getEnvyConnectionString());
			cprrec->setProfileName(profileName);
			cprrec->setReplicationOption(eReplicationOption);
			cprrec->setDropOption(edropOption);
			cprrec->setOdbcAttributes(builder->getOdbcAttributes());
			cprrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRCTMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RCTMREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RCTMREC> rctmrec(new RCTMREC());
			rctmrec->open(sourceDSN, targetDSN);
			rctmrec->setRepositoryString(builder->getEnvyConnectionString());
			rctmrec->setProfileName(profileName);
			rctmrec->setReplicationOption(eReplicationOption);
			rctmrec->setDropOption(edropOption);
			rctmrec->setOdbcAttributes(builder->getOdbcAttributes());
			rctmrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODGLTABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODGLTABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODGLTABSET> ma_prodgltabset(new MA_PRODGLTABSET());
			ma_prodgltabset->open(sourceDSN, targetDSN);
			ma_prodgltabset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodgltabset->setProfileName(profileName);
			ma_prodgltabset->setReplicationOption(eReplicationOption);
			ma_prodgltabset->setDropOption(edropOption);
			ma_prodgltabset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodgltabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHHSHSET> ma_inhhshset(new MA_INHHSHSET());
			ma_inhhshset->open(sourceDSN, targetDSN);
			ma_inhhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhhshset->setProfileName(profileName);
			ma_inhhshset->setReplicationOption(eReplicationOption);
			ma_inhhshset->setDropOption(edropOption);
			ma_inhhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCOHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("COHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<COHHSHSET> cohhshset(new COHHSHSET());
			cohhshset->open(sourceDSN, targetDSN);
			cohhshset->setRepositoryString(builder->getEnvyConnectionString());
			cohhshset->setProfileName(profileName);
			cohhshset->setReplicationOption(eReplicationOption);
			cohhshset->setDropOption(edropOption);
			cohhshset->setOdbcAttributes(builder->getOdbcAttributes());
			cohhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_LINKDESCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_LINKDESCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_LINKDESCSET> gl_linkdescset(new GL_LINKDESCSET());
			gl_linkdescset->open(sourceDSN, targetDSN);
			gl_linkdescset->setRepositoryString(builder->getEnvyConnectionString());
			gl_linkdescset->setProfileName(profileName);
			gl_linkdescset->setReplicationOption(eReplicationOption);
			gl_linkdescset->setDropOption(edropOption);
			gl_linkdescset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_linkdescset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPRATSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPRATSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPRATSET> wipratset(new WIPRATSET());
			wipratset->open(sourceDSN, targetDSN);
			wipratset->setRepositoryString(builder->getEnvyConnectionString());
			wipratset->setProfileName(profileName);
			wipratset->setReplicationOption(eReplicationOption);
			wipratset->setDropOption(edropOption);
			wipratset->setOdbcAttributes(builder->getOdbcAttributes());
			wipratset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVMCHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VMCHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VMCHSHSET> vmchshset(new VMCHSHSET());
			vmchshset->open(sourceDSN, targetDSN);
			vmchshset->setRepositoryString(builder->getEnvyConnectionString());
			vmchshset->setProfileName(profileName);
			vmchshset->setReplicationOption(eReplicationOption);
			vmchshset->setDropOption(edropOption);
			vmchshset->setOdbcAttributes(builder->getOdbcAttributes());
			vmchshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTSRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTSRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTSRTSET> prtsrtset(new PRTSRTSET());
			prtsrtset->open(sourceDSN, targetDSN);
			prtsrtset->setRepositoryString(builder->getEnvyConnectionString());
			prtsrtset->setProfileName(profileName);
			prtsrtset->setReplicationOption(eReplicationOption);
			prtsrtset->setDropOption(edropOption);
			prtsrtset->setOdbcAttributes(builder->getOdbcAttributes());
			prtsrtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumLOTACSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("LOTACSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<LOTACSTSET> lotacstset(new LOTACSTSET());
			lotacstset->open(sourceDSN, targetDSN);
			lotacstset->setRepositoryString(builder->getEnvyConnectionString());
			lotacstset->setProfileName(profileName);
			lotacstset->setReplicationOption(eReplicationOption);
			lotacstset->setDropOption(edropOption);
			lotacstset->setOdbcAttributes(builder->getOdbcAttributes());
			lotacstset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CHGDCOMCLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CHGDCOMCLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CHGDCOMCLSET> ma_chgdcomclset(new MA_CHGDCOMCLSET());
			ma_chgdcomclset->open(sourceDSN, targetDSN);
			ma_chgdcomclset->setRepositoryString(builder->getEnvyConnectionString());
			ma_chgdcomclset->setProfileName(profileName);
			ma_chgdcomclset->setReplicationOption(eReplicationOption);
			ma_chgdcomclset->setDropOption(edropOption);
			ma_chgdcomclset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_chgdcomclset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_ENTPRDXRFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_ENTPRDXRFSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_ENTPRDXRFSET> ed_entprdxrfset(new ED_ENTPRDXRFSET());
			ed_entprdxrfset->open(sourceDSN, targetDSN);
			ed_entprdxrfset->setRepositoryString(builder->getEnvyConnectionString());
			ed_entprdxrfset->setProfileName(profileName);
			ed_entprdxrfset->setReplicationOption(eReplicationOption);
			ed_entprdxrfset->setDropOption(edropOption);
			ed_entprdxrfset->setOdbcAttributes(builder->getOdbcAttributes());
			ed_entprdxrfset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFA_ACCTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FA_ACCTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FA_ACCTREC> fa_acctrec(new FA_ACCTREC());
			fa_acctrec->open(sourceDSN, targetDSN);
			fa_acctrec->setRepositoryString(builder->getEnvyConnectionString());
			fa_acctrec->setProfileName(profileName);
			fa_acctrec->setReplicationOption(eReplicationOption);
			fa_acctrec->setDropOption(edropOption);
			fa_acctrec->setOdbcAttributes(builder->getOdbcAttributes());
			fa_acctrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMFGSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MFGSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MFGSET> mfgset(new MFGSET());
			mfgset->open(sourceDSN, targetDSN);
			mfgset->setRepositoryString(builder->getEnvyConnectionString());
			mfgset->setProfileName(profileName);
			mfgset->setReplicationOption(eReplicationOption);
			mfgset->setDropOption(edropOption);
			mfgset->setOdbcAttributes(builder->getOdbcAttributes());
			mfgset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_APCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_APCREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_APCREC> ma_apcrec(new MA_APCREC());
			ma_apcrec->open(sourceDSN, targetDSN);
			ma_apcrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_apcrec->setProfileName(profileName);
			ma_apcrec->setReplicationOption(eReplicationOption);
			ma_apcrec->setDropOption(edropOption);
			ma_apcrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_apcrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPODDELSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PODDELSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PODDELSET> poddelset(new PODDELSET());
			poddelset->open(sourceDSN, targetDSN);
			poddelset->setRepositoryString(builder->getEnvyConnectionString());
			poddelset->setProfileName(profileName);
			poddelset->setReplicationOption(eReplicationOption);
			poddelset->setDropOption(edropOption);
			poddelset->setOdbcAttributes(builder->getOdbcAttributes());
			poddelset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumECOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ECOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ECOSET> ecoset(new ECOSET());
			ecoset->open(sourceDSN, targetDSN);
			ecoset->setRepositoryString(builder->getEnvyConnectionString());
			ecoset->setProfileName(profileName);
			ecoset->setReplicationOption(eReplicationOption);
			ecoset->setDropOption(edropOption);
			ecoset->setOdbcAttributes(builder->getOdbcAttributes());
			ecoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCDAREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CDAREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CDAREC> cdarec(new CDAREC());
			cdarec->open(sourceDSN, targetDSN);
			cdarec->setRepositoryString(builder->getEnvyConnectionString());
			cdarec->setProfileName(profileName);
			cdarec->setReplicationOption(eReplicationOption);
			cdarec->setDropOption(edropOption);
			cdarec->setOdbcAttributes(builder->getOdbcAttributes());
			cdarec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PLINPRODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PLINPRODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PLINPRODSET> ma_plinprodset(new MA_PLINPRODSET());
			ma_plinprodset->open(sourceDSN, targetDSN);
			ma_plinprodset->setRepositoryString(builder->getEnvyConnectionString());
			ma_plinprodset->setProfileName(profileName);
			ma_plinprodset->setReplicationOption(eReplicationOption);
			ma_plinprodset->setDropOption(edropOption);
			ma_plinprodset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_plinprodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CHGHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CHGHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CHGHHSHSET> ma_chghhshset(new MA_CHGHHSHSET());
			ma_chghhshset->open(sourceDSN, targetDSN);
			ma_chghhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_chghhshset->setProfileName(profileName);
			ma_chghhshset->setReplicationOption(eReplicationOption);
			ma_chghhshset->setDropOption(edropOption);
			ma_chghhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_chghhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_POPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_POPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_POPREC> ap_poprec(new AP_POPREC());
			ap_poprec->open(sourceDSN, targetDSN);
			ap_poprec->setRepositoryString(builder->getEnvyConnectionString());
			ap_poprec->setProfileName(profileName);
			ap_poprec->setReplicationOption(eReplicationOption);
			ap_poprec->setDropOption(edropOption);
			ap_poprec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_poprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PROJPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PROJPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PROJPOSTSET> ap_projpostset(new AP_PROJPOSTSET());
			ap_projpostset->open(sourceDSN, targetDSN);
			ap_projpostset->setRepositoryString(builder->getEnvyConnectionString());
			ap_projpostset->setProfileName(profileName);
			ap_projpostset->setReplicationOption(eReplicationOption);
			ap_projpostset->setDropOption(edropOption);
			ap_projpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_projpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PFAMPLINSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PFAMPLINSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PFAMPLINSET> ma_pfamplinset(new MA_PFAMPLINSET());
			ma_pfamplinset->open(sourceDSN, targetDSN);
			ma_pfamplinset->setRepositoryString(builder->getEnvyConnectionString());
			ma_pfamplinset->setProfileName(profileName);
			ma_pfamplinset->setReplicationOption(eReplicationOption);
			ma_pfamplinset->setDropOption(edropOption);
			ma_pfamplinset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_pfamplinset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWARREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WARREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WARREC> warrec(new WARREC());
			warrec->open(sourceDSN, targetDSN);
			warrec->setRepositoryString(builder->getEnvyConnectionString());
			warrec->setProfileName(profileName);
			warrec->setReplicationOption(eReplicationOption);
			warrec->setDropOption(edropOption);
			warrec->setOdbcAttributes(builder->getOdbcAttributes());
			warrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCUREXREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CUREXREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CUREXREC> curexrec(new CUREXREC());
			curexrec->open(sourceDSN, targetDSN);
			curexrec->setRepositoryString(builder->getEnvyConnectionString());
			curexrec->setProfileName(profileName);
			curexrec->setReplicationOption(eReplicationOption);
			curexrec->setDropOption(edropOption);
			curexrec->setOdbcAttributes(builder->getOdbcAttributes());
			curexrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRQDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RQDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RQDREC> rqdrec(new RQDREC());
			rqdrec->open(sourceDSN, targetDSN);
			rqdrec->setRepositoryString(builder->getEnvyConnectionString());
			rqdrec->setProfileName(profileName);
			rqdrec->setReplicationOption(eReplicationOption);
			rqdrec->setDropOption(edropOption);
			rqdrec->setOdbcAttributes(builder->getOdbcAttributes());
			rqdrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POHHSHSET> pohhshset(new POHHSHSET());
			pohhshset->open(sourceDSN, targetDSN);
			pohhshset->setRepositoryString(builder->getEnvyConnectionString());
			pohhshset->setProfileName(profileName);
			pohhshset->setReplicationOption(eReplicationOption);
			pohhshset->setDropOption(edropOption);
			pohhshset->setOdbcAttributes(builder->getOdbcAttributes());
			pohhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTREC> prtrec(new PRTREC());
			prtrec->open(sourceDSN, targetDSN);
			prtrec->setRepositoryString(builder->getEnvyConnectionString());
			prtrec->setProfileName(profileName);
			prtrec->setReplicationOption(eReplicationOption);
			prtrec->setDropOption(edropOption);
			prtrec->setOdbcAttributes(builder->getOdbcAttributes());
			prtrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BNKHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BNKHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BNKHSHSET> ap_bnkhshset(new AP_BNKHSHSET());
			ap_bnkhshset->open(sourceDSN, targetDSN);
			ap_bnkhshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_bnkhshset->setProfileName(profileName);
			ap_bnkhshset->setReplicationOption(eReplicationOption);
			ap_bnkhshset->setDropOption(edropOption);
			ap_bnkhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bnkhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTPOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTPOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTPOSET> actposet(new ACTPOSET());
			actposet->open(sourceDSN, targetDSN);
			actposet->setRepositoryString(builder->getEnvyConnectionString());
			actposet->setProfileName(profileName);
			actposet->setReplicationOption(eReplicationOption);
			actposet->setDropOption(edropOption);
			actposet->setOdbcAttributes(builder->getOdbcAttributes());
			actposet->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILSREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILSREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILSREC> ma_bilsrec(new MA_BILSREC());
			ma_bilsrec->open(sourceDSN, targetDSN);
			ma_bilsrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilsrec->setProfileName(profileName);
			ma_bilsrec->setReplicationOption(eReplicationOption);
			ma_bilsrec->setDropOption(edropOption);
			ma_bilsrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilsrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMTRREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MTRREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MTRREC> mtrrec(new MTRREC());
			mtrrec->open(sourceDSN, targetDSN);
			mtrrec->setRepositoryString(builder->getEnvyConnectionString());
			mtrrec->setProfileName(profileName);
			mtrrec->setReplicationOption(eReplicationOption);
			mtrrec->setDropOption(edropOption);
			mtrrec->setOdbcAttributes(builder->getOdbcAttributes());
			mtrrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_POHPOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_POHPOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_POHPOHSET> ap_pohpohset(new AP_POHPOHSET());
			ap_pohpohset->open(sourceDSN, targetDSN);
			ap_pohpohset->setRepositoryString(builder->getEnvyConnectionString());
			ap_pohpohset->setProfileName(profileName);
			ap_pohpohset->setReplicationOption(eReplicationOption);
			ap_pohpohset->setDropOption(edropOption);
			ap_pohpohset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pohpohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumSPDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("SPDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<SPDSET> spdset(new SPDSET());
			spdset->open(sourceDSN, targetDSN);
			spdset->setRepositoryString(builder->getEnvyConnectionString());
			spdset->setProfileName(profileName);
			spdset->setReplicationOption(eReplicationOption);
			spdset->setDropOption(edropOption);
			spdset->setOdbcAttributes(builder->getOdbcAttributes());
			spdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILINHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILINHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILINHSET> ma_bilinhset(new MA_BILINHSET());
			ma_bilinhset->open(sourceDSN, targetDSN);
			ma_bilinhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilinhset->setProfileName(profileName);
			ma_bilinhset->setReplicationOption(eReplicationOption);
			ma_bilinhset->setDropOption(edropOption);
			ma_bilinhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilinhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_FRTTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_FRTTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_FRTTREC> ma_frttrec(new MA_FRTTREC());
			ma_frttrec->open(sourceDSN, targetDSN);
			ma_frttrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_frttrec->setProfileName(profileName);
			ma_frttrec->setReplicationOption(eReplicationOption);
			ma_frttrec->setDropOption(edropOption);
			ma_frttrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_frttrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_DMHSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_DMHSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_DMHSPNLSET> ma_dmhspnlset(new MA_DMHSPNLSET());
			ma_dmhspnlset->open(sourceDSN, targetDSN);
			ma_dmhspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_dmhspnlset->setProfileName(profileName);
			ma_dmhspnlset->setReplicationOption(eReplicationOption);
			ma_dmhspnlset->setDropOption(edropOption);
			ma_dmhspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_dmhspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumEMPHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("EMPHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<EMPHSHSET> emphshset(new EMPHSHSET());
			emphshset->open(sourceDSN, targetDSN);
			emphshset->setRepositoryString(builder->getEnvyConnectionString());
			emphshset->setProfileName(profileName);
			emphshset->setReplicationOption(eReplicationOption);
			emphshset->setDropOption(edropOption);
			emphshset->setOdbcAttributes(builder->getOdbcAttributes());
			emphshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTDLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTDLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTDLSET> actdlset(new ACTDLSET());
			actdlset->open(sourceDSN, targetDSN);
			actdlset->setRepositoryString(builder->getEnvyConnectionString());
			actdlset->setProfileName(profileName);
			actdlset->setReplicationOption(eReplicationOption);
			actdlset->setDropOption(edropOption);
			actdlset->setOdbcAttributes(builder->getOdbcAttributes());
			actdlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FPTOPROJSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FPTOPROJSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FPTOPROJSET> gl_fptoprojset(new GL_FPTOPROJSET());
			gl_fptoprojset->open(sourceDSN, targetDSN);
			gl_fptoprojset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fptoprojset->setProfileName(profileName);
			gl_fptoprojset->setReplicationOption(eReplicationOption);
			gl_fptoprojset->setDropOption(edropOption);
			gl_fptoprojset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fptoprojset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INTHSHSET> ma_inthshset(new MA_INTHSHSET());
			ma_inthshset->open(sourceDSN, targetDSN);
			ma_inthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inthshset->setProfileName(profileName);
			ma_inthshset->setReplicationOption(eReplicationOption);
			ma_inthshset->setDropOption(edropOption);
			ma_inthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPNUMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPNUMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPNUMSET> gl_vpnumset(new GL_VPNUMSET());
			gl_vpnumset->open(sourceDSN, targetDSN);
			gl_vpnumset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpnumset->setProfileName(profileName);
			gl_vpnumset->setReplicationOption(eReplicationOption);
			gl_vpnumset->setDropOption(edropOption);
			gl_vpnumset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpnumset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PROJPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PROJPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PROJPOSTSET> gl_projpostset(new GL_PROJPOSTSET());
			gl_projpostset->open(sourceDSN, targetDSN);
			gl_projpostset->setRepositoryString(builder->getEnvyConnectionString());
			gl_projpostset->setProfileName(profileName);
			gl_projpostset->setReplicationOption(eReplicationOption);
			gl_projpostset->setDropOption(edropOption);
			gl_projpostset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_projpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOHBOLLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POHBOLLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POHBOLLSET> pohbollset(new POHBOLLSET());
			pohbollset->open(sourceDSN, targetDSN);
			pohbollset->setRepositoryString(builder->getEnvyConnectionString());
			pohbollset->setProfileName(profileName);
			pohbollset->setReplicationOption(eReplicationOption);
			pohbollset->setDropOption(edropOption);
			pohbollset->setOdbcAttributes(builder->getOdbcAttributes());
			pohbollset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_MOLINKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_MOLINKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_MOLINKSET> gl_molinkset(new GL_MOLINKSET());
			gl_molinkset->open(sourceDSN, targetDSN);
			gl_molinkset->setRepositoryString(builder->getEnvyConnectionString());
			gl_molinkset->setProfileName(profileName);
			gl_molinkset->setReplicationOption(eReplicationOption);
			gl_molinkset->setDropOption(edropOption);
			gl_molinkset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_molinkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SERHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SERHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SERHSHSET> ma_serhshset(new MA_SERHSHSET());
			ma_serhshset->open(sourceDSN, targetDSN);
			ma_serhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_serhshset->setProfileName(profileName);
			ma_serhshset->setReplicationOption(eReplicationOption);
			ma_serhshset->setDropOption(edropOption);
			ma_serhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_serhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumBOLHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("BOLHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<BOLHSHSET> bolhshset(new BOLHSHSET());
			bolhshset->open(sourceDSN, targetDSN);
			bolhshset->setRepositoryString(builder->getEnvyConnectionString());
			bolhshset->setProfileName(profileName);
			bolhshset->setReplicationOption(eReplicationOption);
			bolhshset->setDropOption(edropOption);
			bolhshset->setOdbcAttributes(builder->getOdbcAttributes());
			bolhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_PRDXRFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_PRDXRFREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_PRDXRFREC> ed_prdxrfrec(new ED_PRDXRFREC());
			ed_prdxrfrec->open(sourceDSN, targetDSN);
			ed_prdxrfrec->setRepositoryString(builder->getEnvyConnectionString());
			ed_prdxrfrec->setProfileName(profileName);
			ed_prdxrfrec->setReplicationOption(eReplicationOption);
			ed_prdxrfrec->setDropOption(edropOption);
			ed_prdxrfrec->setOdbcAttributes(builder->getOdbcAttributes());
			ed_prdxrfrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FOLINKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FOLINKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FOLINKSET> gl_folinkset(new GL_FOLINKSET());
			gl_folinkset->open(sourceDSN, targetDSN);
			gl_folinkset->setRepositoryString(builder->getEnvyConnectionString());
			gl_folinkset->setProfileName(profileName);
			gl_folinkset->setReplicationOption(eReplicationOption);
			gl_folinkset->setDropOption(edropOption);
			gl_folinkset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_folinkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODHSHSET> ma_prodhshset(new MA_PRODHSHSET());
			ma_prodhshset->open(sourceDSN, targetDSN);
			ma_prodhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodhshset->setProfileName(profileName);
			ma_prodhshset->setReplicationOption(eReplicationOption);
			ma_prodhshset->setDropOption(edropOption);
			ma_prodhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BNKOPENSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BNKOPENSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BNKOPENSET> ap_bnkopenset(new AP_BNKOPENSET());
			ap_bnkopenset->open(sourceDSN, targetDSN);
			ap_bnkopenset->setRepositoryString(builder->getEnvyConnectionString());
			ap_bnkopenset->setProfileName(profileName);
			ap_bnkopenset->setReplicationOption(eReplicationOption);
			ap_bnkopenset->setDropOption(edropOption);
			ap_bnkopenset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bnkopenset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumDRLABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("DRLABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<DRLABSET> drlabset(new DRLABSET());
			drlabset->open(sourceDSN, targetDSN);
			drlabset->setRepositoryString(builder->getEnvyConnectionString());
			drlabset->setProfileName(profileName);
			drlabset->setReplicationOption(eReplicationOption);
			drlabset->setDropOption(edropOption);
			drlabset->setOdbcAttributes(builder->getOdbcAttributes());
			drlabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CHGDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CHGDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CHGDREC> ma_chgdrec(new MA_CHGDREC());
			ma_chgdrec->open(sourceDSN, targetDSN);
			ma_chgdrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_chgdrec->setProfileName(profileName);
			ma_chgdrec->setReplicationOption(eReplicationOption);
			ma_chgdrec->setDropOption(edropOption);
			ma_chgdrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_chgdrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_INVRCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_INVRCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_INVRCTSET> ap_invrctset(new AP_INVRCTSET());
			ap_invrctset->open(sourceDSN, targetDSN);
			ap_invrctset->setRepositoryString(builder->getEnvyConnectionString());
			ap_invrctset->setProfileName(profileName);
			ap_invrctset->setReplicationOption(eReplicationOption);
			ap_invrctset->setDropOption(edropOption);
			ap_invrctset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_invrctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumSOHHSH2SET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("SOHHSH2SET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<SOHHSH2SET> sohhsh2set(new SOHHSH2SET());
			sohhsh2set->open(sourceDSN, targetDSN);
			sohhsh2set->setRepositoryString(builder->getEnvyConnectionString());
			sohhsh2set->setProfileName(profileName);
			sohhsh2set->setReplicationOption(eReplicationOption);
			sohhsh2set->setDropOption(edropOption);
			sohhsh2set->setOdbcAttributes(builder->getOdbcAttributes());
			sohhsh2set->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumBOLLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("BOLLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<BOLLREC> bollrec(new BOLLREC());
			bollrec->open(sourceDSN, targetDSN);
			bollrec->setRepositoryString(builder->getEnvyConnectionString());
			bollrec->setProfileName(profileName);
			bollrec->setReplicationOption(eReplicationOption);
			bollrec->setDropOption(edropOption);
			bollrec->setOdbcAttributes(builder->getOdbcAttributes());
			bollrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_DMHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_DMHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_DMHHSHSET> ma_dmhhshset(new MA_DMHHSHSET());
			ma_dmhhshset->open(sourceDSN, targetDSN);
			ma_dmhhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_dmhhshset->setProfileName(profileName);
			ma_dmhhshset->setReplicationOption(eReplicationOption);
			ma_dmhhshset->setDropOption(edropOption);
			ma_dmhhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_dmhhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTMATSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTMATSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTMATSET> prtmatset(new PRTMATSET());
			prtmatset->open(sourceDSN, targetDSN);
			prtmatset->setRepositoryString(builder->getEnvyConnectionString());
			prtmatset->setProfileName(profileName);
			prtmatset->setReplicationOption(eReplicationOption);
			prtmatset->setDropOption(edropOption);
			prtmatset->setOdbcAttributes(builder->getOdbcAttributes());
			prtmatset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILCTBILSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILCTBILSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILCTBILSET> ma_bilctbilset(new MA_BILCTBILSET());
			ma_bilctbilset->open(sourceDSN, targetDSN);
			ma_bilctbilset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilctbilset->setProfileName(profileName);
			ma_bilctbilset->setReplicationOption(eReplicationOption);
			ma_bilctbilset->setDropOption(edropOption);
			ma_bilctbilset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilctbilset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumREFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("REFREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<REFREC> refrec(new REFREC());
			refrec->open(sourceDSN, targetDSN);
			refrec->setRepositoryString(builder->getEnvyConnectionString());
			refrec->setProfileName(profileName);
			refrec->setReplicationOption(eReplicationOption);
			refrec->setDropOption(edropOption);
			refrec->setOdbcAttributes(builder->getOdbcAttributes());
			refrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCOHCDLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("COHCDLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<COHCDLSET> cohcdlset(new COHCDLSET());
			cohcdlset->open(sourceDSN, targetDSN);
			cohcdlset->setRepositoryString(builder->getEnvyConnectionString());
			cohcdlset->setProfileName(profileName);
			cohcdlset->setReplicationOption(eReplicationOption);
			cohcdlset->setDropOption(edropOption);
			cohcdlset->setOdbcAttributes(builder->getOdbcAttributes());
			cohcdlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumIDHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("IDHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<IDHSHSET> idhshset(new IDHSHSET());
			idhshset->open(sourceDSN, targetDSN);
			idhshset->setRepositoryString(builder->getEnvyConnectionString());
			idhshset->setProfileName(profileName);
			idhshset->setReplicationOption(eReplicationOption);
			idhshset->setDropOption(edropOption);
			idhshset->setOdbcAttributes(builder->getOdbcAttributes());
			idhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGENREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GENREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GENREC> genrec(new GENREC());
			genrec->open(sourceDSN, targetDSN);
			genrec->setRepositoryString(builder->getEnvyConnectionString());
			genrec->setProfileName(profileName);
			genrec->setReplicationOption(eReplicationOption);
			genrec->setDropOption(edropOption);
			genrec->setOdbcAttributes(builder->getOdbcAttributes());
			genrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumENGHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ENGHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ENGHSHSET> enghshset(new ENGHSHSET());
			enghshset->open(sourceDSN, targetDSN);
			enghshset->setRepositoryString(builder->getEnvyConnectionString());
			enghshset->setProfileName(profileName);
			enghshset->setReplicationOption(eReplicationOption);
			enghshset->setDropOption(edropOption);
			enghshset->setOdbcAttributes(builder->getOdbcAttributes());
			enghshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCOHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("COHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<COHREC> cohrec(new COHREC());
			cohrec->open(sourceDSN, targetDSN);
			cohrec->setRepositoryString(builder->getEnvyConnectionString());
			cohrec->setProfileName(profileName);
			cohrec->setReplicationOption(eReplicationOption);
			cohrec->setDropOption(edropOption);
			cohrec->setOdbcAttributes(builder->getOdbcAttributes());
			cohrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRQHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RQHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RQHHSHSET> rqhhshset(new RQHHSHSET());
			rqhhshset->open(sourceDSN, targetDSN);
			rqhhshset->setRepositoryString(builder->getEnvyConnectionString());
			rqhhshset->setProfileName(profileName);
			rqhhshset->setReplicationOption(eReplicationOption);
			rqhhshset->setDropOption(edropOption);
			rqhhshset->setOdbcAttributes(builder->getOdbcAttributes());
			rqhhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTOOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTOOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTOOSET> actooset(new ACTOOSET());
			actooset->open(sourceDSN, targetDSN);
			actooset->setRepositoryString(builder->getEnvyConnectionString());
			actooset->setProfileName(profileName);
			actooset->setReplicationOption(eReplicationOption);
			actooset->setDropOption(edropOption);
			actooset->setOdbcAttributes(builder->getOdbcAttributes());
			actooset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_INVREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_INVREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_INVREC> ap_invrec(new AP_INVREC());
			ap_invrec->open(sourceDSN, targetDSN);
			ap_invrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_invrec->setProfileName(profileName);
			ap_invrec->setReplicationOption(eReplicationOption);
			ap_invrec->setDropOption(edropOption);
			ap_invrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_invrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTDFASET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTDFASET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTDFASET> actdfaset(new ACTDFASET());
			actdfaset->open(sourceDSN, targetDSN);
			actdfaset->setRepositoryString(builder->getEnvyConnectionString());
			actdfaset->setProfileName(profileName);
			actdfaset->setReplicationOption(eReplicationOption);
			actdfaset->setDropOption(edropOption);
			actdfaset->setOdbcAttributes(builder->getOdbcAttributes());
			actdfaset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXLREC> ma_txlrec(new MA_TXLREC());
			ma_txlrec->open(sourceDSN, targetDSN);
			ma_txlrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_txlrec->setProfileName(profileName);
			ma_txlrec->setReplicationOption(eReplicationOption);
			ma_txlrec->setDropOption(edropOption);
			ma_txlrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txlrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VCHPNOTVCHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VCHPNOTVCHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VCHPNOTVCHSET> ap_vchpnotvchset(new AP_VCHPNOTVCHSET());
			ap_vchpnotvchset->open(sourceDSN, targetDSN);
			ap_vchpnotvchset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vchpnotvchset->setProfileName(profileName);
			ap_vchpnotvchset->setReplicationOption(eReplicationOption);
			ap_vchpnotvchset->setDropOption(edropOption);
			ap_vchpnotvchset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vchpnotvchset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_SEARCHVNDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_SEARCHVNDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_SEARCHVNDSET> ap_searchvndset(new AP_SEARCHVNDSET());
			ap_searchvndset->open(sourceDSN, targetDSN);
			ap_searchvndset->setRepositoryString(builder->getEnvyConnectionString());
			ap_searchvndset->setProfileName(profileName);
			ap_searchvndset->setReplicationOption(eReplicationOption);
			ap_searchvndset->setDropOption(edropOption);
			ap_searchvndset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_searchvndset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMDCOMOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMDCOMOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMDCOMOSET> ma_cmdcomoset(new MA_CMDCOMOSET());
			ma_cmdcomoset->open(sourceDSN, targetDSN);
			ma_cmdcomoset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmdcomoset->setProfileName(profileName);
			ma_cmdcomoset->setReplicationOption(eReplicationOption);
			ma_cmdcomoset->setDropOption(edropOption);
			ma_cmdcomoset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmdcomoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumOPNPOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("OPNPOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<OPNPOHSET> opnpohset(new OPNPOHSET());
			opnpohset->open(sourceDSN, targetDSN);
			opnpohset->setRepositoryString(builder->getEnvyConnectionString());
			opnpohset->setProfileName(profileName);
			opnpohset->setReplicationOption(eReplicationOption);
			opnpohset->setDropOption(edropOption);
			opnpohset->setOdbcAttributes(builder->getOdbcAttributes());
			opnpohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INTREC> ma_intrec(new MA_INTREC());
			ma_intrec->open(sourceDSN, targetDSN);
			ma_intrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_intrec->setProfileName(profileName);
			ma_intrec->setReplicationOption(eReplicationOption);
			ma_intrec->setDropOption(edropOption);
			ma_intrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_intrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumECOHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ECOHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ECOHSHSET> ecohshset(new ECOHSHSET());
			ecohshset->open(sourceDSN, targetDSN);
			ecohshset->setRepositoryString(builder->getEnvyConnectionString());
			ecohshset->setProfileName(profileName);
			ecohshset->setReplicationOption(eReplicationOption);
			ecohshset->setDropOption(edropOption);
			ecohshset->setOdbcAttributes(builder->getOdbcAttributes());
			ecohshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PFAMHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PFAMHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PFAMHSHSET> ma_pfamhshset(new MA_PFAMHSHSET());
			ma_pfamhshset->open(sourceDSN, targetDSN);
			ma_pfamhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_pfamhshset->setProfileName(profileName);
			ma_pfamhshset->setReplicationOption(eReplicationOption);
			ma_pfamhshset->setDropOption(edropOption);
			ma_pfamhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_pfamhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_ACCTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_ACCTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_ACCTREC> ap_acctrec(new AP_ACCTREC());
			ap_acctrec->open(sourceDSN, targetDSN);
			ap_acctrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_acctrec->setProfileName(profileName);
			ap_acctrec->setReplicationOption(eReplicationOption);
			ap_acctrec->setDropOption(edropOption);
			ap_acctrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_acctrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRHREC> prhrec(new PRHREC());
			prhrec->open(sourceDSN, targetDSN);
			prhrec->setRepositoryString(builder->getEnvyConnectionString());
			prhrec->setProfileName(profileName);
			prhrec->setReplicationOption(eReplicationOption);
			prhrec->setDropOption(edropOption);
			prhrec->setOdbcAttributes(builder->getOdbcAttributes());
			prhrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPJOBSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPJOBSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPJOBSET> wipjobset(new WIPJOBSET());
			wipjobset->open(sourceDSN, targetDSN);
			wipjobset->setRepositoryString(builder->getEnvyConnectionString());
			wipjobset->setProfileName(profileName);
			wipjobset->setReplicationOption(eReplicationOption);
			wipjobset->setDropOption(edropOption);
			wipjobset->setOdbcAttributes(builder->getOdbcAttributes());
			wipjobset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHDREC> ma_shdrec(new MA_SHDREC());
			ma_shdrec->open(sourceDSN, targetDSN);
			ma_shdrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_shdrec->setProfileName(profileName);
			ma_shdrec->setReplicationOption(eReplicationOption);
			ma_shdrec->setDropOption(edropOption);
			ma_shdrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shdrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumENGENDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ENGENDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ENGENDSET> engendset(new ENGENDSET());
			engendset->open(sourceDSN, targetDSN);
			engendset->setRepositoryString(builder->getEnvyConnectionString());
			engendset->setProfileName(profileName);
			engendset->setReplicationOption(eReplicationOption);
			engendset->setDropOption(edropOption);
			engendset->setOdbcAttributes(builder->getOdbcAttributes());
			engendset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVENPRHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VENPRHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VENPRHSET> venprhset(new VENPRHSET());
			venprhset->open(sourceDSN, targetDSN);
			venprhset->setRepositoryString(builder->getEnvyConnectionString());
			venprhset->setProfileName(profileName);
			venprhset->setReplicationOption(eReplicationOption);
			venprhset->setDropOption(edropOption);
			venprhset->setOdbcAttributes(builder->getOdbcAttributes());
			venprhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCDLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CDLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CDLREC> cdlrec(new CDLREC());
			cdlrec->open(sourceDSN, targetDSN);
			cdlrec->setRepositoryString(builder->getEnvyConnectionString());
			cdlrec->setProfileName(profileName);
			cdlrec->setReplicationOption(eReplicationOption);
			cdlrec->setDropOption(edropOption);
			cdlrec->setOdbcAttributes(builder->getOdbcAttributes());
			cdlrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCDACDPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CDACDPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CDACDPSET> cdacdpset(new CDACDPSET());
			cdacdpset->open(sourceDSN, targetDSN);
			cdacdpset->setRepositoryString(builder->getEnvyConnectionString());
			cdacdpset->setProfileName(profileName);
			cdacdpset->setReplicationOption(eReplicationOption);
			cdacdpset->setDropOption(edropOption);
			cdacdpset->setOdbcAttributes(builder->getOdbcAttributes());
			cdacdpset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PRPTDESCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PRPTDESCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PRPTDESCSET> gl_prptdescset(new GL_PRPTDESCSET());
			gl_prptdescset->open(sourceDSN, targetDSN);
			gl_prptdescset->setRepositoryString(builder->getEnvyConnectionString());
			gl_prptdescset->setProfileName(profileName);
			gl_prptdescset->setReplicationOption(eReplicationOption);
			gl_prptdescset->setDropOption(edropOption);
			gl_prptdescset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_prptdescset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHDSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHDSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHDSPISET> ma_shdspiset(new MA_SHDSPISET());
			ma_shdspiset->open(sourceDSN, targetDSN);
			ma_shdspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shdspiset->setProfileName(profileName);
			ma_shdspiset->setReplicationOption(eReplicationOption);
			ma_shdspiset->setDropOption(edropOption);
			ma_shdspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shdspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumINVREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("INVREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<INVREC> invrec(new INVREC());
			invrec->open(sourceDSN, targetDSN);
			invrec->setRepositoryString(builder->getEnvyConnectionString());
			invrec->setProfileName(profileName);
			invrec->setReplicationOption(eReplicationOption);
			invrec->setDropOption(edropOption);
			invrec->setOdbcAttributes(builder->getOdbcAttributes());
			invrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CHGHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CHGHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CHGHREC> ma_chghrec(new MA_CHGHREC());
			ma_chghrec->open(sourceDSN, targetDSN);
			ma_chghrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_chghrec->setProfileName(profileName);
			ma_chghrec->setReplicationOption(eReplicationOption);
			ma_chghrec->setDropOption(edropOption);
			ma_chghrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_chghrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_REPROJSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_REPROJSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_REPROJSET> gl_reprojset(new GL_REPROJSET());
			gl_reprojset->open(sourceDSN, targetDSN);
			gl_reprojset->setRepositoryString(builder->getEnvyConnectionString());
			gl_reprojset->setProfileName(profileName);
			gl_reprojset->setReplicationOption(eReplicationOption);
			gl_reprojset->setDropOption(edropOption);
			gl_reprojset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_reprojset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPHSHSET> wiphshset(new WIPHSHSET());
			wiphshset->open(sourceDSN, targetDSN);
			wiphshset->setRepositoryString(builder->getEnvyConnectionString());
			wiphshset->setProfileName(profileName);
			wiphshset->setReplicationOption(eReplicationOption);
			wiphshset->setDropOption(edropOption);
			wiphshset->setOdbcAttributes(builder->getOdbcAttributes());
			wiphshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTPRDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTPRDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTPRDSET> prtprdset(new PRTPRDSET());
			prtprdset->open(sourceDSN, targetDSN);
			prtprdset->setRepositoryString(builder->getEnvyConnectionString());
			prtprdset->setProfileName(profileName);
			prtprdset->setReplicationOption(eReplicationOption);
			prtprdset->setDropOption(edropOption);
			prtprdset->setOdbcAttributes(builder->getOdbcAttributes());
			prtprdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTSODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTSODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTSODSET> prtsodset(new PRTSODSET());
			prtsodset->open(sourceDSN, targetDSN);
			prtsodset->setRepositoryString(builder->getEnvyConnectionString());
			prtsodset->setProfileName(profileName);
			prtsodset->setReplicationOption(eReplicationOption);
			prtsodset->setDropOption(edropOption);
			prtsodset->setOdbcAttributes(builder->getOdbcAttributes());
			prtsodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SPNREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SPNREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SPNREC> ma_spnrec(new MA_SPNREC());
			ma_spnrec->open(sourceDSN, targetDSN);
			ma_spnrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_spnrec->setProfileName(profileName);
			ma_spnrec->setReplicationOption(eReplicationOption);
			ma_spnrec->setDropOption(edropOption);
			ma_spnrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_spnrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumLOCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("LOCREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<LOCREC> locrec(new LOCREC());
			locrec->open(sourceDSN, targetDSN);
			locrec->setRepositoryString(builder->getEnvyConnectionString());
			locrec->setProfileName(profileName);
			locrec->setReplicationOption(eReplicationOption);
			locrec->setDropOption(edropOption);
			locrec->setOdbcAttributes(builder->getOdbcAttributes());
			locrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_CHKNOTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_CHKNOTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_CHKNOTSET> ap_chknotset(new AP_CHKNOTSET());
			ap_chknotset->open(sourceDSN, targetDSN);
			ap_chknotset->setRepositoryString(builder->getEnvyConnectionString());
			ap_chknotset->setProfileName(profileName);
			ap_chknotset->setReplicationOption(eReplicationOption);
			ap_chknotset->setDropOption(edropOption);
			ap_chknotset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_chknotset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMHINHLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMHINHLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMHINHLSET> ma_cmhinhlset(new MA_CMHINHLSET());
			ma_cmhinhlset->open(sourceDSN, targetDSN);
			ma_cmhinhlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmhinhlset->setProfileName(profileName);
			ma_cmhinhlset->setReplicationOption(eReplicationOption);
			ma_cmhinhlset->setDropOption(edropOption);
			ma_cmhinhlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmhinhlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPSET> wipset(new WIPSET());
			wipset->open(sourceDSN, targetDSN);
			wipset->setRepositoryString(builder->getEnvyConnectionString());
			wipset->setProfileName(profileName);
			wipset->setReplicationOption(eReplicationOption);
			wipset->setDropOption(edropOption);
			wipset->setOdbcAttributes(builder->getOdbcAttributes());
			wipset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPTOACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPTOACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPTOACCTSET> gl_vptoacctset(new GL_VPTOACCTSET());
			gl_vptoacctset->open(sourceDSN, targetDSN);
			gl_vptoacctset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vptoacctset->setProfileName(profileName);
			gl_vptoacctset->setReplicationOption(eReplicationOption);
			gl_vptoacctset->setDropOption(edropOption);
			gl_vptoacctset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vptoacctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumIDPRHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("IDPRHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<IDPRHSET> idprhset(new IDPRHSET());
			idprhset->open(sourceDSN, targetDSN);
			idprhset->setRepositoryString(builder->getEnvyConnectionString());
			idprhset->setProfileName(profileName);
			idprhset->setReplicationOption(eReplicationOption);
			idprhset->setDropOption(edropOption);
			idprhset->setOdbcAttributes(builder->getOdbcAttributes());
			idprhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SERREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SERREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SERREC> ma_serrec(new MA_SERREC());
			ma_serrec->open(sourceDSN, targetDSN);
			ma_serrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_serrec->setProfileName(profileName);
			ma_serrec->setReplicationOption(eReplicationOption);
			ma_serrec->setDropOption(edropOption);
			ma_serrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_serrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SODOPTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SODOPTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SODOPTSET> ma_sodoptset(new MA_SODOPTSET());
			ma_sodoptset->open(sourceDSN, targetDSN);
			ma_sodoptset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sodoptset->setProfileName(profileName);
			ma_sodoptset->setReplicationOption(eReplicationOption);
			ma_sodoptset->setDropOption(edropOption);
			ma_sodoptset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sodoptset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_GLPTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_GLPTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_GLPTHSHSET> ma_glpthshset(new MA_GLPTHSHSET());
			ma_glpthshset->open(sourceDSN, targetDSN);
			ma_glpthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_glpthshset->setProfileName(profileName);
			ma_glpthshset->setReplicationOption(eReplicationOption);
			ma_glpthshset->setDropOption(edropOption);
			ma_glpthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_glpthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHPREC> ma_shprec(new MA_SHPREC());
			ma_shprec->open(sourceDSN, targetDSN);
			ma_shprec->setRepositoryString(builder->getEnvyConnectionString());
			ma_shprec->setProfileName(profileName);
			ma_shprec->setReplicationOption(eReplicationOption);
			ma_shprec->setDropOption(edropOption);
			ma_shprec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMFGREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MFGREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MFGREC> mfgrec(new MFGREC());
			mfgrec->open(sourceDSN, targetDSN);
			mfgrec->setRepositoryString(builder->getEnvyConnectionString());
			mfgrec->setProfileName(profileName);
			mfgrec->setReplicationOption(eReplicationOption);
			mfgrec->setDropOption(edropOption);
			mfgrec->setOdbcAttributes(builder->getOdbcAttributes());
			mfgrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTINTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTINTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTINTSET> prtintset(new PRTINTSET());
			prtintset->open(sourceDSN, targetDSN);
			prtintset->setRepositoryString(builder->getEnvyConnectionString());
			prtintset->setProfileName(profileName);
			prtintset->setReplicationOption(eReplicationOption);
			prtintset->setDropOption(edropOption);
			prtintset->setOdbcAttributes(builder->getOdbcAttributes());
			prtintset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHDPSERSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHDPSERSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHDPSERSET> ma_shdpserset(new MA_SHDPSERSET());
			ma_shdpserset->open(sourceDSN, targetDSN);
			ma_shdpserset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shdpserset->setProfileName(profileName);
			ma_shdpserset->setReplicationOption(eReplicationOption);
			ma_shdpserset->setDropOption(edropOption);
			ma_shdpserset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shdpserset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXCMHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXCMHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXCMHSET> ma_txcmhset(new MA_TXCMHSET());
			ma_txcmhset->open(sourceDSN, targetDSN);
			ma_txcmhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_txcmhset->setProfileName(profileName);
			ma_txcmhset->setReplicationOption(eReplicationOption);
			ma_txcmhset->setDropOption(edropOption);
			ma_txcmhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txcmhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTPPDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTPPDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTPPDSET> ma_acctppdset(new MA_ACCTPPDSET());
			ma_acctppdset->open(sourceDSN, targetDSN);
			ma_acctppdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_acctppdset->setProfileName(profileName);
			ma_acctppdset->setReplicationOption(eReplicationOption);
			ma_acctppdset->setDropOption(edropOption);
			ma_acctppdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_acctppdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_REHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_REHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_REHSHSET> gl_rehshset(new GL_REHSHSET());
			gl_rehshset->open(sourceDSN, targetDSN);
			gl_rehshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_rehshset->setProfileName(profileName);
			gl_rehshset->setReplicationOption(eReplicationOption);
			gl_rehshset->setDropOption(edropOption);
			gl_rehshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_rehshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PAYPLTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PAYPLTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PAYPLTSET> ap_paypltset(new AP_PAYPLTSET());
			ap_paypltset->open(sourceDSN, targetDSN);
			ap_paypltset->setRepositoryString(builder->getEnvyConnectionString());
			ap_paypltset->setProfileName(profileName);
			ap_paypltset->setReplicationOption(eReplicationOption);
			ap_paypltset->setDropOption(edropOption);
			ap_paypltset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_paypltset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILREC> ma_bilrec(new MA_BILREC());
			ma_bilrec->open(sourceDSN, targetDSN);
			ma_bilrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilrec->setProfileName(profileName);
			ma_bilrec->setReplicationOption(eReplicationOption);
			ma_bilrec->setDropOption(edropOption);
			ma_bilrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumSPDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("SPDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<SPDREC> spdrec(new SPDREC());
			spdrec->open(sourceDSN, targetDSN);
			spdrec->setRepositoryString(builder->getEnvyConnectionString());
			spdrec->setProfileName(profileName);
			spdrec->setReplicationOption(eReplicationOption);
			spdrec->setDropOption(edropOption);
			spdrec->setOdbcAttributes(builder->getOdbcAttributes());
			spdrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPAYHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PAYHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PAYHSHSET> payhshset(new PAYHSHSET());
			payhshset->open(sourceDSN, targetDSN);
			payhshset->setRepositoryString(builder->getEnvyConnectionString());
			payhshset->setProfileName(profileName);
			payhshset->setReplicationOption(eReplicationOption);
			payhshset->setDropOption(edropOption);
			payhshset->setOdbcAttributes(builder->getOdbcAttributes());
			payhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMHREC> ma_cmhrec(new MA_CMHREC());
			ma_cmhrec->open(sourceDSN, targetDSN);
			ma_cmhrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmhrec->setProfileName(profileName);
			ma_cmhrec->setReplicationOption(eReplicationOption);
			ma_cmhrec->setDropOption(edropOption);
			ma_cmhrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmhrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMDSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMDSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMDSPISET> ma_cmdspiset(new MA_CMDSPISET());
			ma_cmdspiset->open(sourceDSN, targetDSN);
			ma_cmdspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmdspiset->setProfileName(profileName);
			ma_cmdspiset->setReplicationOption(eReplicationOption);
			ma_cmdspiset->setDropOption(edropOption);
			ma_cmdspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmdspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumOPCHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("OPCHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<OPCHSHSET> opchshset(new OPCHSHSET());
			opchshset->open(sourceDSN, targetDSN);
			opchshset->setRepositoryString(builder->getEnvyConnectionString());
			opchshset->setProfileName(profileName);
			opchshset->setReplicationOption(eReplicationOption);
			opchshset->setDropOption(edropOption);
			opchshset->setOdbcAttributes(builder->getOdbcAttributes());
			opchshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMRQREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MRQREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MRQREC> mrqrec(new MRQREC());
			mrqrec->open(sourceDSN, targetDSN);
			mrqrec->setRepositoryString(builder->getEnvyConnectionString());
			mrqrec->setProfileName(profileName);
			mrqrec->setReplicationOption(eReplicationOption);
			mrqrec->setDropOption(edropOption);
			mrqrec->setOdbcAttributes(builder->getOdbcAttributes());
			mrqrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PAYTDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PAYTDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PAYTDREC> ma_paytdrec(new MA_PAYTDREC());
			ma_paytdrec->open(sourceDSN, targetDSN);
			ma_paytdrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_paytdrec->setProfileName(profileName);
			ma_paytdrec->setReplicationOption(eReplicationOption);
			ma_paytdrec->setDropOption(edropOption);
			ma_paytdrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_paytdrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ACCTAMTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ACCTAMTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ACCTAMTSET> gl_acctamtset(new GL_ACCTAMTSET());
			gl_acctamtset->open(sourceDSN, targetDSN);
			gl_acctamtset->setRepositoryString(builder->getEnvyConnectionString());
			gl_acctamtset->setProfileName(profileName);
			gl_acctamtset->setReplicationOption(eReplicationOption);
			gl_acctamtset->setDropOption(edropOption);
			gl_acctamtset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_acctamtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_RSNREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_RSNREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_RSNREC> ma_rsnrec(new MA_RSNREC());
			ma_rsnrec->open(sourceDSN, targetDSN);
			ma_rsnrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_rsnrec->setProfileName(profileName);
			ma_rsnrec->setReplicationOption(eReplicationOption);
			ma_rsnrec->setDropOption(edropOption);
			ma_rsnrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_rsnrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumLABREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("LABREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<LABREC> labrec(new LABREC());
			labrec->open(sourceDSN, targetDSN);
			labrec->setRepositoryString(builder->getEnvyConnectionString());
			labrec->setProfileName(profileName);
			labrec->setReplicationOption(eReplicationOption);
			labrec->setDropOption(edropOption);
			labrec->setOdbcAttributes(builder->getOdbcAttributes());
			labrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMHHSHSET> ma_cmhhshset(new MA_CMHHSHSET());
			ma_cmhhshset->open(sourceDSN, targetDSN);
			ma_cmhhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmhhshset->setProfileName(profileName);
			ma_cmhhshset->setReplicationOption(eReplicationOption);
			ma_cmhhshset->setDropOption(edropOption);
			ma_cmhhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmhhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTDESSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTDESSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTDESSET> prtdesset(new PRTDESSET());
			prtdesset->open(sourceDSN, targetDSN);
			prtdesset->setRepositoryString(builder->getEnvyConnectionString());
			prtdesset->setProfileName(profileName);
			prtdesset->setReplicationOption(eReplicationOption);
			prtdesset->setDropOption(edropOption);
			prtdesset->setOdbcAttributes(builder->getOdbcAttributes());
			prtdesset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PRPT_DREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PRPT_DREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PRPT_DREC> gl_prpt_drec(new GL_PRPT_DREC());
			gl_prpt_drec->open(sourceDSN, targetDSN);
			gl_prpt_drec->setRepositoryString(builder->getEnvyConnectionString());
			gl_prpt_drec->setProfileName(profileName);
			gl_prpt_drec->setReplicationOption(eReplicationOption);
			gl_prpt_drec->setDropOption(edropOption);
			gl_prpt_drec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_prpt_drec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHUPDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHUPDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHUPDSET> ma_inhupdset(new MA_INHUPDSET());
			ma_inhupdset->open(sourceDSN, targetDSN);
			ma_inhupdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhupdset->setProfileName(profileName);
			ma_inhupdset->setReplicationOption(eReplicationOption);
			ma_inhupdset->setDropOption(edropOption);
			ma_inhupdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhupdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PROJBUDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PROJBUDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PROJBUDSET> gl_projbudset(new GL_PROJBUDSET());
			gl_projbudset->open(sourceDSN, targetDSN);
			gl_projbudset->setRepositoryString(builder->getEnvyConnectionString());
			gl_projbudset->setProfileName(profileName);
			gl_projbudset->setReplicationOption(eReplicationOption);
			gl_projbudset->setDropOption(edropOption);
			gl_projbudset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_projbudset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTPRVARSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTPRVARSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTPRVARSET> ma_acctprvarset(new MA_ACCTPRVARSET());
			ma_acctprvarset->open(sourceDSN, targetDSN);
			ma_acctprvarset->setRepositoryString(builder->getEnvyConnectionString());
			ma_acctprvarset->setProfileName(profileName);
			ma_acctprvarset->setReplicationOption(eReplicationOption);
			ma_acctprvarset->setDropOption(edropOption);
			ma_acctprvarset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_acctprvarset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumEMPLABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("EMPLABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<EMPLABSET> emplabset(new EMPLABSET());
			emplabset->open(sourceDSN, targetDSN);
			emplabset->setRepositoryString(builder->getEnvyConnectionString());
			emplabset->setProfileName(profileName);
			emplabset->setReplicationOption(eReplicationOption);
			emplabset->setDropOption(edropOption);
			emplabset->setOdbcAttributes(builder->getOdbcAttributes());
			emplabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_JVDESCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_JVDESCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_JVDESCSET> gl_jvdescset(new GL_JVDESCSET());
			gl_jvdescset->open(sourceDSN, targetDSN);
			gl_jvdescset->setRepositoryString(builder->getEnvyConnectionString());
			gl_jvdescset->setProfileName(profileName);
			gl_jvdescset->setReplicationOption(eReplicationOption);
			gl_jvdescset->setDropOption(edropOption);
			gl_jvdescset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_jvdescset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RECPAYPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RECPAYPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RECPAYPOSTSET> ap_recpaypostset(new AP_RECPAYPOSTSET());
			ap_recpaypostset->open(sourceDSN, targetDSN);
			ap_recpaypostset->setRepositoryString(builder->getEnvyConnectionString());
			ap_recpaypostset->setProfileName(profileName);
			ap_recpaypostset->setReplicationOption(eReplicationOption);
			ap_recpaypostset->setDropOption(edropOption);
			ap_recpaypostset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_recpaypostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRHPONSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRHPONSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRHPONSET> prhponset(new PRHPONSET());
			prhponset->open(sourceDSN, targetDSN);
			prhponset->setRepositoryString(builder->getEnvyConnectionString());
			prhponset->setProfileName(profileName);
			prhponset->setReplicationOption(eReplicationOption);
			prhponset->setDropOption(edropOption);
			prhponset->setOdbcAttributes(builder->getOdbcAttributes());
			prhponset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACTSTGSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACTSTGSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACTSTGSET> ma_actstgset(new MA_ACTSTGSET());
			ma_actstgset->open(sourceDSN, targetDSN);
			ma_actstgset->setRepositoryString(builder->getEnvyConnectionString());
			ma_actstgset->setProfileName(profileName);
			ma_actstgset->setReplicationOption(eReplicationOption);
			ma_actstgset->setDropOption(edropOption);
			ma_actstgset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_actstgset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_COMCLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_COMCLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_COMCLREC> ma_comclrec(new MA_COMCLREC());
			ma_comclrec->open(sourceDSN, targetDSN);
			ma_comclrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_comclrec->setProfileName(profileName);
			ma_comclrec->setReplicationOption(eReplicationOption);
			ma_comclrec->setDropOption(edropOption);
			ma_comclrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_comclrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFLGREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FLGREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FLGREC> flgrec(new FLGREC());
			flgrec->open(sourceDSN, targetDSN);
			flgrec->setRepositoryString(builder->getEnvyConnectionString());
			flgrec->setProfileName(profileName);
			flgrec->setReplicationOption(eReplicationOption);
			flgrec->setDropOption(edropOption);
			flgrec->setOdbcAttributes(builder->getOdbcAttributes());
			flgrec->process(1);
// send the Update
			nt.run();
			nRtd.run();


			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHHSHSET> ma_sohhshset(new MA_SOHHSHSET());
			ma_sohhshset->open(sourceDSN, targetDSN);
			ma_sohhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohhshset->setProfileName(profileName);
			ma_sohhshset->setReplicationOption(eReplicationOption);
			ma_sohhshset->setDropOption(edropOption);
			ma_sohhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHPCOMOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHPCOMOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHPCOMOSET> ma_shpcomoset(new MA_SHPCOMOSET());
			ma_shpcomoset->open(sourceDSN, targetDSN);
			ma_shpcomoset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shpcomoset->setProfileName(profileName);
			ma_shpcomoset->setReplicationOption(eReplicationOption);
			ma_shpcomoset->setDropOption(edropOption);
			ma_shpcomoset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shpcomoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RECPAYHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RECPAYHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RECPAYHSHSET> ap_recpayhshset(new AP_RECPAYHSHSET());
			ap_recpayhshset->open(sourceDSN, targetDSN);
			ap_recpayhshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_recpayhshset->setProfileName(profileName);
			ap_recpayhshset->setReplicationOption(eReplicationOption);
			ap_recpayhshset->setDropOption(edropOption);
			ap_recpayhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_recpayhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FISCHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FISCHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FISCHSHSET> gl_fischshset(new GL_FISCHSHSET());
			gl_fischshset->open(sourceDSN, targetDSN);
			gl_fischshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fischshset->setProfileName(profileName);
			gl_fischshset->setReplicationOption(eReplicationOption);
			gl_fischshset->setDropOption(edropOption);
			gl_fischshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fischshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTLINDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTLINDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTLINDSET> ma_acctlindset(new MA_ACCTLINDSET());
			ma_acctlindset->open(sourceDSN, targetDSN);
			ma_acctlindset->setRepositoryString(builder->getEnvyConnectionString());
			ma_acctlindset->setProfileName(profileName);
			ma_acctlindset->setReplicationOption(eReplicationOption);
			ma_acctlindset->setDropOption(edropOption);
			ma_acctlindset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_acctlindset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHINHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHINHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHINHSET> ma_sohinhset(new MA_SOHINHSET());
			ma_sohinhset->open(sourceDSN, targetDSN);
			ma_sohinhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohinhset->setProfileName(profileName);
			ma_sohinhset->setReplicationOption(eReplicationOption);
			ma_sohinhset->setDropOption(edropOption);
			ma_sohinhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohinhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BNKVNDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BNKVNDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BNKVNDSET> ap_bnkvndset(new AP_BNKVNDSET());
			ap_bnkvndset->open(sourceDSN, targetDSN);
			ap_bnkvndset->setRepositoryString(builder->getEnvyConnectionString());
			ap_bnkvndset->setProfileName(profileName);
			ap_bnkvndset->setReplicationOption(eReplicationOption);
			ap_bnkvndset->setDropOption(edropOption);
			ap_bnkvndset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bnkvndset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_INVVCHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_INVVCHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_INVVCHSET> ap_invvchset(new AP_INVVCHSET());
			ap_invvchset->open(sourceDSN, targetDSN);
			ap_invvchset->setRepositoryString(builder->getEnvyConnectionString());
			ap_invvchset->setProfileName(profileName);
			ap_invvchset->setReplicationOption(eReplicationOption);
			ap_invvchset->setDropOption(edropOption);
			ap_invvchset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_invvchset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHHSODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHHSODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHHSODSET> ma_shhsodset(new MA_SHHSODSET());
			ma_shhsodset->open(sourceDSN, targetDSN);
			ma_shhsodset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shhsodset->setProfileName(profileName);
			ma_shhsodset->setReplicationOption(eReplicationOption);
			ma_shhsodset->setDropOption(edropOption);
			ma_shhsodset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shhsodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPBATSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPBATSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPBATSET> gl_vpbatset(new GL_VPBATSET());
			gl_vpbatset->open(sourceDSN, targetDSN);
			gl_vpbatset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpbatset->setProfileName(profileName);
			gl_vpbatset->setReplicationOption(eReplicationOption);
			gl_vpbatset->setDropOption(edropOption);
			gl_vpbatset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpbatset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FP_DREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FP_DREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FP_DREC> gl_fp_drec(new GL_FP_DREC());
			gl_fp_drec->open(sourceDSN, targetDSN);
			gl_fp_drec->setRepositoryString(builder->getEnvyConnectionString());
			gl_fp_drec->setProfileName(profileName);
			gl_fp_drec->setReplicationOption(eReplicationOption);
			gl_fp_drec->setDropOption(edropOption);
			gl_fp_drec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fp_drec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPDENACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPDENACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPDENACCTSET> gl_vpdenacctset(new GL_VPDENACCTSET());
			gl_vpdenacctset->open(sourceDSN, targetDSN);
			gl_vpdenacctset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpdenacctset->setProfileName(profileName);
			gl_vpdenacctset->setReplicationOption(eReplicationOption);
			gl_vpdenacctset->setDropOption(edropOption);
			gl_vpdenacctset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpdenacctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ARPTDESCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ARPTDESCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ARPTDESCSET> gl_arptdescset(new GL_ARPTDESCSET());
			gl_arptdescset->open(sourceDSN, targetDSN);
			gl_arptdescset->setRepositoryString(builder->getEnvyConnectionString());
			gl_arptdescset->setProfileName(profileName);
			gl_arptdescset->setReplicationOption(eReplicationOption);
			gl_arptdescset->setDropOption(edropOption);
			gl_arptdescset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_arptdescset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PROJMASET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PROJMASET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PROJMASET> gl_projmaset(new GL_PROJMASET());
			gl_projmaset->open(sourceDSN, targetDSN);
			gl_projmaset->setRepositoryString(builder->getEnvyConnectionString());
			gl_projmaset->setProfileName(profileName);
			gl_projmaset->setReplicationOption(eReplicationOption);
			gl_projmaset->setDropOption(edropOption);
			gl_projmaset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_projmaset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHPSHPSSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHPSHPSSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHPSHPSSET> ma_shpshpsset(new MA_SHPSHPSSET());
			ma_shpshpsset->open(sourceDSN, targetDSN);
			ma_shpshpsset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shpshpsset->setProfileName(profileName);
			ma_shpshpsset->setReplicationOption(eReplicationOption);
			ma_shpshpsset->setDropOption(edropOption);
			ma_shpshpsset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shpshpsset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SODSTGPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SODSTGPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SODSTGPSET> ma_sodstgpset(new MA_SODSTGPSET());
			ma_sodstgpset->open(sourceDSN, targetDSN);
			ma_sodstgpset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sodstgpset->setProfileName(profileName);
			ma_sodstgpset->setReplicationOption(eReplicationOption);
			ma_sodstgpset->setDropOption(edropOption);
			ma_sodstgpset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sodstgpset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTMRHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTMRHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTMRHSET> prtmrhset(new PRTMRHSET());
			prtmrhset->open(sourceDSN, targetDSN);
			prtmrhset->setRepositoryString(builder->getEnvyConnectionString());
			prtmrhset->setProfileName(profileName);
			prtmrhset->setReplicationOption(eReplicationOption);
			prtmrhset->setDropOption(edropOption);
			prtmrhset->setOdbcAttributes(builder->getOdbcAttributes());
			prtmrhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRTABREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRTABREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRTABREC> ma_prtabrec(new MA_PRTABREC());
			ma_prtabrec->open(sourceDSN, targetDSN);
			ma_prtabrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_prtabrec->setProfileName(profileName);
			ma_prtabrec->setReplicationOption(eReplicationOption);
			ma_prtabrec->setDropOption(edropOption);
			ma_prtabrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prtabrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPFAMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PFAMREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PFAMREC> pfamrec(new PFAMREC());
			pfamrec->open(sourceDSN, targetDSN);
			pfamrec->setRepositoryString(builder->getEnvyConnectionString());
			pfamrec->setProfileName(profileName);
			pfamrec->setReplicationOption(eReplicationOption);
			pfamrec->setDropOption(edropOption);
			pfamrec->setOdbcAttributes(builder->getOdbcAttributes());
			pfamrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_1099REC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_1099REC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_1099REC> ap_1099rec(new AP_1099REC());
			ap_1099rec->open(sourceDSN, targetDSN);
			ap_1099rec->setRepositoryString(builder->getEnvyConnectionString());
			ap_1099rec->setProfileName(profileName);
			ap_1099rec->setReplicationOption(eReplicationOption);
			ap_1099rec->setDropOption(edropOption);
			ap_1099rec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_1099rec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_TRDESCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_TRDESCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_TRDESCSET> gl_trdescset(new GL_TRDESCSET());
			gl_trdescset->open(sourceDSN, targetDSN);
			gl_trdescset->setRepositoryString(builder->getEnvyConnectionString());
			gl_trdescset->setProfileName(profileName);
			gl_trdescset->setReplicationOption(eReplicationOption);
			gl_trdescset->setDropOption(edropOption);
			gl_trdescset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_trdescset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumTOOHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("TOOHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<TOOHSHSET> toohshset(new TOOHSHSET());
			toohshset->open(sourceDSN, targetDSN);
			toohshset->setRepositoryString(builder->getEnvyConnectionString());
			toohshset->setProfileName(profileName);
			toohshset->setReplicationOption(eReplicationOption);
			toohshset->setDropOption(edropOption);
			toohshset->setOdbcAttributes(builder->getOdbcAttributes());
			toohshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ACCTBUDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ACCTBUDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ACCTBUDSET> gl_acctbudset(new GL_ACCTBUDSET());
			gl_acctbudset->open(sourceDSN, targetDSN);
			gl_acctbudset->setRepositoryString(builder->getEnvyConnectionString());
			gl_acctbudset->setProfileName(profileName);
			gl_acctbudset->setReplicationOption(eReplicationOption);
			gl_acctbudset->setDropOption(edropOption);
			gl_acctbudset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_acctbudset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_POHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_POHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_POHHSHSET> ap_pohhshset(new AP_POHHSHSET());
			ap_pohhshset->open(sourceDSN, targetDSN);
			ap_pohhshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_pohhshset->setProfileName(profileName);
			ap_pohhshset->setReplicationOption(eReplicationOption);
			ap_pohhshset->setDropOption(edropOption);
			ap_pohhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pohhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PROJHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PROJHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PROJHSHSET> ma_projhshset(new MA_PROJHSHSET());
			ma_projhshset->open(sourceDSN, targetDSN);
			ma_projhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_projhshset->setProfileName(profileName);
			ma_projhshset->setReplicationOption(eReplicationOption);
			ma_projhshset->setDropOption(edropOption);
			ma_projhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_projhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumENCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ENCREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ENCREC> encrec(new ENCREC());
			encrec->open(sourceDSN, targetDSN);
			encrec->setRepositoryString(builder->getEnvyConnectionString());
			encrec->setProfileName(profileName);
			encrec->setReplicationOption(eReplicationOption);
			encrec->setDropOption(edropOption);
			encrec->setOdbcAttributes(builder->getOdbcAttributes());
			encrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_ENTDOCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_ENTDOCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_ENTDOCSET> ed_entdocset(new ED_ENTDOCSET());
			ed_entdocset->open(sourceDSN, targetDSN);
			ed_entdocset->setRepositoryString(builder->getEnvyConnectionString());
			ed_entdocset->setProfileName(profileName);
			ed_entdocset->setReplicationOption(eReplicationOption);
			ed_entdocset->setDropOption(edropOption);
			ed_entdocset->setOdbcAttributes(builder->getOdbcAttributes());
			ed_entdocset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXSOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXSOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXSOHSET> ma_txsohset(new MA_TXSOHSET());
			ma_txsohset->open(sourceDSN, targetDSN);
			ma_txsohset->setRepositoryString(builder->getEnvyConnectionString());
			ma_txsohset->setProfileName(profileName);
			ma_txsohset->setReplicationOption(eReplicationOption);
			ma_txsohset->setDropOption(edropOption);
			ma_txsohset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txsohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRHCPRSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRHCPRSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRHCPRSET> prhcprset(new PRHCPRSET());
			prhcprset->open(sourceDSN, targetDSN);
			prhcprset->setRepositoryString(builder->getEnvyConnectionString());
			prhcprset->setProfileName(profileName);
			prhcprset->setReplicationOption(eReplicationOption);
			prhcprset->setDropOption(edropOption);
			prhcprset->setOdbcAttributes(builder->getOdbcAttributes());
			prhcprset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumECCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ECCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ECCSET> eccset(new ECCSET());
			eccset->open(sourceDSN, targetDSN);
			eccset->setRepositoryString(builder->getEnvyConnectionString());
			eccset->setProfileName(profileName);
			eccset->setReplicationOption(eReplicationOption);
			eccset->setDropOption(edropOption);
			eccset->setOdbcAttributes(builder->getOdbcAttributes());
			eccset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMDSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMDSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMDSPNLSET> ma_cmdspnlset(new MA_CMDSPNLSET());
			ma_cmdspnlset->open(sourceDSN, targetDSN);
			ma_cmdspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmdspnlset->setProfileName(profileName);
			ma_cmdspnlset->setReplicationOption(eReplicationOption);
			ma_cmdspnlset->setDropOption(edropOption);
			ma_cmdspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmdspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PROJHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PROJHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PROJHSHSET> gl_projhshset(new GL_PROJHSHSET());
			gl_projhshset->open(sourceDSN, targetDSN);
			gl_projhshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_projhshset->setProfileName(profileName);
			gl_projhshset->setReplicationOption(eReplicationOption);
			gl_projhshset->setDropOption(edropOption);
			gl_projhshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_projhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumLOCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("LOCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<LOCSET> locset(new LOCSET());
			locset->open(sourceDSN, targetDSN);
			locset->setRepositoryString(builder->getEnvyConnectionString());
			locset->setProfileName(profileName);
			locset->setReplicationOption(eReplicationOption);
			locset->setDropOption(edropOption);
			locset->setOdbcAttributes(builder->getOdbcAttributes());
			locset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_BATCHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_BATCHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_BATCHSHSET> gl_batchshset(new GL_BATCHSHSET());
			gl_batchshset->open(sourceDSN, targetDSN);
			gl_batchshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_batchshset->setProfileName(profileName);
			gl_batchshset->setReplicationOption(eReplicationOption);
			gl_batchshset->setDropOption(edropOption);
			gl_batchshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_batchshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTHSHSET> ma_accthshset(new MA_ACCTHSHSET());
			ma_accthshset->open(sourceDSN, targetDSN);
			ma_accthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_accthshset->setProfileName(profileName);
			ma_accthshset->setReplicationOption(eReplicationOption);
			ma_accthshset->setDropOption(edropOption);
			ma_accthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_accthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_MCLINKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_MCLINKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_MCLINKSET> gl_mclinkset(new GL_MCLINKSET());
			gl_mclinkset->open(sourceDSN, targetDSN);
			gl_mclinkset->setRepositoryString(builder->getEnvyConnectionString());
			gl_mclinkset->setProfileName(profileName);
			gl_mclinkset->setReplicationOption(eReplicationOption);
			gl_mclinkset->setDropOption(edropOption);
			gl_mclinkset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_mclinkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumUSGREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("USGREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<USGREC> usgrec(new USGREC());
			usgrec->open(sourceDSN, targetDSN);
			usgrec->setRepositoryString(builder->getEnvyConnectionString());
			usgrec->setProfileName(profileName);
			usgrec->setReplicationOption(eReplicationOption);
			usgrec->setDropOption(edropOption);
			usgrec->setOdbcAttributes(builder->getOdbcAttributes());
			usgrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILDMHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILDMHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILDMHSET> ma_bildmhset(new MA_BILDMHSET());
			ma_bildmhset->open(sourceDSN, targetDSN);
			ma_bildmhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bildmhset->setProfileName(profileName);
			ma_bildmhset->setReplicationOption(eReplicationOption);
			ma_bildmhset->setDropOption(edropOption);
			ma_bildmhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bildmhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHCOMCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHCOMCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHCOMCSET> ma_sohcomcset(new MA_SOHCOMCSET());
			ma_sohcomcset->open(sourceDSN, targetDSN);
			ma_sohcomcset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohcomcset->setProfileName(profileName);
			ma_sohcomcset->setReplicationOption(eReplicationOption);
			ma_sohcomcset->setDropOption(edropOption);
			ma_sohcomcset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohcomcset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SPNHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SPNHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SPNHSHSET> ma_spnhshset(new MA_SPNHSHSET());
			ma_spnhshset->open(sourceDSN, targetDSN);
			ma_spnhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_spnhshset->setProfileName(profileName);
			ma_spnhshset->setReplicationOption(eReplicationOption);
			ma_spnhshset->setDropOption(edropOption);
			ma_spnhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_spnhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SAMSAMSSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SAMSAMSSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SAMSAMSSET> ma_samsamsset(new MA_SAMSAMSSET());
			ma_samsamsset->open(sourceDSN, targetDSN);
			ma_samsamsset->setRepositoryString(builder->getEnvyConnectionString());
			ma_samsamsset->setProfileName(profileName);
			ma_samsamsset->setReplicationOption(eReplicationOption);
			ma_samsamsset->setDropOption(edropOption);
			ma_samsamsset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_samsamsset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILBILSSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILBILSSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILBILSSET> ma_bilbilsset(new MA_BILBILSSET());
			ma_bilbilsset->open(sourceDSN, targetDSN);
			ma_bilbilsset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilbilsset->setProfileName(profileName);
			ma_bilbilsset->setReplicationOption(eReplicationOption);
			ma_bilbilsset->setDropOption(edropOption);
			ma_bilbilsset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilbilsset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUODHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUODHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUODHSHSET> ma_quodhshset(new MA_QUODHSHSET());
			ma_quodhshset->open(sourceDSN, targetDSN);
			ma_quodhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_quodhshset->setProfileName(profileName);
			ma_quodhshset->setReplicationOption(eReplicationOption);
			ma_quodhshset->setDropOption(edropOption);
			ma_quodhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quodhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VATPOST2SET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VATPOST2SET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VATPOST2SET> ap_vatpost2set(new AP_VATPOST2SET());
			ap_vatpost2set->open(sourceDSN, targetDSN);
			ap_vatpost2set->setRepositoryString(builder->getEnvyConnectionString());
			ap_vatpost2set->setProfileName(profileName);
			ap_vatpost2set->setReplicationOption(eReplicationOption);
			ap_vatpost2set->setDropOption(edropOption);
			ap_vatpost2set->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vatpost2set->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_JVHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_JVHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_JVHSHSET> gl_jvhshset(new GL_JVHSHSET());
			gl_jvhshset->open(sourceDSN, targetDSN);
			gl_jvhshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_jvhshset->setProfileName(profileName);
			gl_jvhshset->setReplicationOption(eReplicationOption);
			gl_jvhshset->setDropOption(edropOption);
			gl_jvhshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_jvhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BEFTPMTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BEFTPMTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BEFTPMTSET> ap_beftpmtset(new AP_BEFTPMTSET());
			ap_beftpmtset->open(sourceDSN, targetDSN);
			ap_beftpmtset->setRepositoryString(builder->getEnvyConnectionString());
			ap_beftpmtset->setProfileName(profileName);
			ap_beftpmtset->setReplicationOption(eReplicationOption);
			ap_beftpmtset->setDropOption(edropOption);
			ap_beftpmtset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_beftpmtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTLOCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTLOCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTLOCSET> actlocset(new ACTLOCSET());
			actlocset->open(sourceDSN, targetDSN);
			actlocset->setRepositoryString(builder->getEnvyConnectionString());
			actlocset->setProfileName(profileName);
			actlocset->setReplicationOption(eReplicationOption);
			actlocset->setDropOption(edropOption);
			actlocset->setOdbcAttributes(builder->getOdbcAttributes());
			actlocset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_HDRSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_HDRSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_HDRSET> ap_hdrset(new AP_HDRSET());
			ap_hdrset->open(sourceDSN, targetDSN);
			ap_hdrset->setRepositoryString(builder->getEnvyConnectionString());
			ap_hdrset->setProfileName(profileName);
			ap_hdrset->setReplicationOption(eReplicationOption);
			ap_hdrset->setDropOption(edropOption);
			ap_hdrset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_hdrset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMISREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MISREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MISREC> misrec(new MISREC());
			misrec->open(sourceDSN, targetDSN);
			misrec->setRepositoryString(builder->getEnvyConnectionString());
			misrec->setProfileName(profileName);
			misrec->setReplicationOption(eReplicationOption);
			misrec->setDropOption(edropOption);
			misrec->setOdbcAttributes(builder->getOdbcAttributes());
			misrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTREC> ma_acctrec(new MA_ACCTREC());
			ma_acctrec->open(sourceDSN, targetDSN);
			ma_acctrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_acctrec->setProfileName(profileName);
			ma_acctrec->setReplicationOption(eReplicationOption);
			ma_acctrec->setDropOption(edropOption);
			ma_acctrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_acctrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VCHPOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VCHPOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VCHPOHSET> ap_vchpohset(new AP_VCHPOHSET());
			ap_vchpohset->open(sourceDSN, targetDSN);
			ap_vchpohset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vchpohset->setProfileName(profileName);
			ap_vchpohset->setReplicationOption(eReplicationOption);
			ap_vchpohset->setDropOption(edropOption);
			ap_vchpohset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vchpohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_ACCTTYPEREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_ACCTTYPEREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_ACCTTYPEREC> ap_accttyperec(new AP_ACCTTYPEREC());
			ap_accttyperec->open(sourceDSN, targetDSN);
			ap_accttyperec->setRepositoryString(builder->getEnvyConnectionString());
			ap_accttyperec->setProfileName(profileName);
			ap_accttyperec->setReplicationOption(eReplicationOption);
			ap_accttyperec->setDropOption(edropOption);
			ap_accttyperec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_accttyperec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumBOLBOLLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("BOLBOLLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<BOLBOLLSET> bolbollset(new BOLBOLLSET());
			bolbollset->open(sourceDSN, targetDSN);
			bolbollset->setRepositoryString(builder->getEnvyConnectionString());
			bolbollset->setProfileName(profileName);
			bolbollset->setReplicationOption(eReplicationOption);
			bolbollset->setDropOption(edropOption);
			bolbollset->setOdbcAttributes(builder->getOdbcAttributes());
			bolbollset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VATHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VATHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VATHSHSET> ap_vathshset(new AP_VATHSHSET());
			ap_vathshset->open(sourceDSN, targetDSN);
			ap_vathshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vathshset->setProfileName(profileName);
			ap_vathshset->setReplicationOption(eReplicationOption);
			ap_vathshset->setDropOption(edropOption);
			ap_vathshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vathshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ARPTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ARPTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ARPTSET> gl_arptset(new GL_ARPTSET());
			gl_arptset->open(sourceDSN, targetDSN);
			gl_arptset->setRepositoryString(builder->getEnvyConnectionString());
			gl_arptset->setProfileName(profileName);
			gl_arptset->setReplicationOption(eReplicationOption);
			gl_arptset->setDropOption(edropOption);
			gl_arptset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_arptset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RECPAYNOTESET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RECPAYNOTESET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RECPAYNOTESET> ap_recpaynoteset(new AP_RECPAYNOTESET());
			ap_recpaynoteset->open(sourceDSN, targetDSN);
			ap_recpaynoteset->setRepositoryString(builder->getEnvyConnectionString());
			ap_recpaynoteset->setProfileName(profileName);
			ap_recpaynoteset->setReplicationOption(eReplicationOption);
			ap_recpaynoteset->setDropOption(edropOption);
			ap_recpaynoteset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_recpaynoteset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHLREC> ma_inhlrec(new MA_INHLREC());
			ma_inhlrec->open(sourceDSN, targetDSN);
			ma_inhlrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhlrec->setProfileName(profileName);
			ma_inhlrec->setReplicationOption(eReplicationOption);
			ma_inhlrec->setDropOption(edropOption);
			ma_inhlrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhlrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMHPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMHPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMHPOSTSET> ma_cmhpostset(new MA_CMHPOSTSET());
			ma_cmhpostset->open(sourceDSN, targetDSN);
			ma_cmhpostset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmhpostset->setProfileName(profileName);
			ma_cmhpostset->setReplicationOption(eReplicationOption);
			ma_cmhpostset->setDropOption(edropOption);
			ma_cmhpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmhpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPOFFPROJSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPOFFPROJSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPOFFPROJSET> gl_vpoffprojset(new GL_VPOFFPROJSET());
			gl_vpoffprojset->open(sourceDSN, targetDSN);
			gl_vpoffprojset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpoffprojset->setProfileName(profileName);
			gl_vpoffprojset->setReplicationOption(eReplicationOption);
			gl_vpoffprojset->setDropOption(edropOption);
			gl_vpoffprojset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpoffprojset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_CHKPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_CHKPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_CHKPOSTSET> ap_chkpostset(new AP_CHKPOSTSET());
			ap_chkpostset->open(sourceDSN, targetDSN);
			ap_chkpostset->setRepositoryString(builder->getEnvyConnectionString());
			ap_chkpostset->setProfileName(profileName);
			ap_chkpostset->setReplicationOption(eReplicationOption);
			ap_chkpostset->setDropOption(edropOption);
			ap_chkpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_chkpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXTHSHSET> ma_txthshset(new MA_TXTHSHSET());
			ma_txthshset->open(sourceDSN, targetDSN);
			ma_txthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_txthshset->setProfileName(profileName);
			ma_txthshset->setReplicationOption(eReplicationOption);
			ma_txthshset->setDropOption(edropOption);
			ma_txthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INDMCMDMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INDMCMDMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INDMCMDMSET> ma_indmcmdmset(new MA_INDMCMDMSET());
			ma_indmcmdmset->open(sourceDSN, targetDSN);
			ma_indmcmdmset->setRepositoryString(builder->getEnvyConnectionString());
			ma_indmcmdmset->setProfileName(profileName);
			ma_indmcmdmset->setReplicationOption(eReplicationOption);
			ma_indmcmdmset->setDropOption(edropOption);
			ma_indmcmdmset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_indmcmdmset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FPHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FPHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FPHSHSET> gl_fphshset(new GL_FPHSHSET());
			gl_fphshset->open(sourceDSN, targetDSN);
			gl_fphshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fphshset->setProfileName(profileName);
			gl_fphshset->setReplicationOption(eReplicationOption);
			gl_fphshset->setDropOption(edropOption);
			gl_fphshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fphshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHAPCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHAPCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHAPCSET> ma_inhapcset(new MA_INHAPCSET());
			ma_inhapcset->open(sourceDSN, targetDSN);
			ma_inhapcset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhapcset->setProfileName(profileName);
			ma_inhapcset->setReplicationOption(eReplicationOption);
			ma_inhapcset->setDropOption(edropOption);
			ma_inhapcset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhapcset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ARPT_NREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ARPT_NREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ARPT_NREC> gl_arpt_nrec(new GL_ARPT_NREC());
			gl_arpt_nrec->open(sourceDSN, targetDSN);
			gl_arpt_nrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_arpt_nrec->setProfileName(profileName);
			gl_arpt_nrec->setReplicationOption(eReplicationOption);
			gl_arpt_nrec->setDropOption(edropOption);
			gl_arpt_nrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_arpt_nrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUOHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUOHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUOHHSHSET> ma_quohhshset(new MA_QUOHHSHSET());
			ma_quohhshset->open(sourceDSN, targetDSN);
			ma_quohhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_quohhshset->setProfileName(profileName);
			ma_quohhshset->setReplicationOption(eReplicationOption);
			ma_quohhshset->setDropOption(edropOption);
			ma_quohhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quohhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_STGPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_STGPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_STGPREC> ma_stgprec(new MA_STGPREC());
			ma_stgprec->open(sourceDSN, targetDSN);
			ma_stgprec->setRepositoryString(builder->getEnvyConnectionString());
			ma_stgprec->setProfileName(profileName);
			ma_stgprec->setReplicationOption(eReplicationOption);
			ma_stgprec->setDropOption(edropOption);
			ma_stgprec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_stgprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFLDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FLDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FLDREC> fldrec(new FLDREC());
			fldrec->open(sourceDSN, targetDSN);
			fldrec->setRepositoryString(builder->getEnvyConnectionString());
			fldrec->setProfileName(profileName);
			fldrec->setReplicationOption(eReplicationOption);
			fldrec->setDropOption(edropOption);
			fldrec->setOdbcAttributes(builder->getOdbcAttributes());
			fldrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRESBORSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RESBORSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RESBORSET> resborset(new RESBORSET());
			resborset->open(sourceDSN, targetDSN);
			resborset->setRepositoryString(builder->getEnvyConnectionString());
			resborset->setProfileName(profileName);
			resborset->setReplicationOption(eReplicationOption);
			resborset->setDropOption(edropOption);
			resborset->setOdbcAttributes(builder->getOdbcAttributes());
			resborset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVENSHPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VENSHPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VENSHPSET> venshpset(new VENSHPSET());
			venshpset->open(sourceDSN, targetDSN);
			venshpset->setRepositoryString(builder->getEnvyConnectionString());
			venshpset->setProfileName(profileName);
			venshpset->setReplicationOption(eReplicationOption);
			venshpset->setDropOption(edropOption);
			venshpset->setOdbcAttributes(builder->getOdbcAttributes());
			venshpset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRCTPRTABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRCTPRTABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRCTPRTABSET> ma_prctprtabset(new MA_PRCTPRTABSET());
			ma_prctprtabset->open(sourceDSN, targetDSN);
			ma_prctprtabset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prctprtabset->setProfileName(profileName);
			ma_prctprtabset->setReplicationOption(eReplicationOption);
			ma_prctprtabset->setDropOption(edropOption);
			ma_prctprtabset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prctprtabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODPRODSSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODPRODSSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODPRODSSET> ma_prodprodsset(new MA_PRODPRODSSET());
			ma_prodprodsset->open(sourceDSN, targetDSN);
			ma_prodprodsset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodprodsset->setProfileName(profileName);
			ma_prodprodsset->setReplicationOption(eReplicationOption);
			ma_prodprodsset->setDropOption(edropOption);
			ma_prodprodsset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodprodsset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCODREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CODREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CODREC> codrec(new CODREC());
			codrec->open(sourceDSN, targetDSN);
			codrec->setRepositoryString(builder->getEnvyConnectionString());
			codrec->setProfileName(profileName);
			codrec->setReplicationOption(eReplicationOption);
			codrec->setDropOption(edropOption);
			codrec->setOdbcAttributes(builder->getOdbcAttributes());
			codrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUODOPTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUODOPTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUODOPTSET> ma_quodoptset(new MA_QUODOPTSET());
			ma_quodoptset->open(sourceDSN, targetDSN);
			ma_quodoptset->setRepositoryString(builder->getEnvyConnectionString());
			ma_quodoptset->setProfileName(profileName);
			ma_quodoptset->setReplicationOption(eReplicationOption);
			ma_quodoptset->setDropOption(edropOption);
			ma_quodoptset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quodoptset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CPOREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CPOREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CPOREC> ma_cporec(new MA_CPOREC());
			ma_cporec->open(sourceDSN, targetDSN);
			ma_cporec->setRepositoryString(builder->getEnvyConnectionString());
			ma_cporec->setProfileName(profileName);
			ma_cporec->setReplicationOption(eReplicationOption);
			ma_cporec->setDropOption(edropOption);
			ma_cporec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cporec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMHCMDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMHCMDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMHCMDSET> ma_cmhcmdset(new MA_CMHCMDSET());
			ma_cmhcmdset->open(sourceDSN, targetDSN);
			ma_cmhcmdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmhcmdset->setProfileName(profileName);
			ma_cmhcmdset->setReplicationOption(eReplicationOption);
			ma_cmhcmdset->setDropOption(edropOption);
			ma_cmhcmdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmhcmdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_AUDDOCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_AUDDOCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_AUDDOCSET> ed_auddocset(new ED_AUDDOCSET());
			ed_auddocset->open(sourceDSN, targetDSN);
			ed_auddocset->setRepositoryString(builder->getEnvyConnectionString());
			ed_auddocset->setProfileName(profileName);
			ed_auddocset->setReplicationOption(eReplicationOption);
			ed_auddocset->setDropOption(edropOption);
			ed_auddocset->setOdbcAttributes(builder->getOdbcAttributes());
			ed_auddocset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWKCTRKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WKCTRKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WKCTRKSET> wkctrkset(new WKCTRKSET());
			wkctrkset->open(sourceDSN, targetDSN);
			wkctrkset->setRepositoryString(builder->getEnvyConnectionString());
			wkctrkset->setProfileName(profileName);
			wkctrkset->setReplicationOption(eReplicationOption);
			wkctrkset->setDropOption(edropOption);
			wkctrkset->setOdbcAttributes(builder->getOdbcAttributes());
			wkctrkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_OPTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_OPTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_OPTREC> ma_optrec(new MA_OPTREC());
			ma_optrec->open(sourceDSN, targetDSN);
			ma_optrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_optrec->setProfileName(profileName);
			ma_optrec->setReplicationOption(eReplicationOption);
			ma_optrec->setDropOption(edropOption);
			ma_optrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_optrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ACCTMASET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ACCTMASET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ACCTMASET> gl_acctmaset(new GL_ACCTMASET());
			gl_acctmaset->open(sourceDSN, targetDSN);
			gl_acctmaset->setRepositoryString(builder->getEnvyConnectionString());
			gl_acctmaset->setProfileName(profileName);
			gl_acctmaset->setReplicationOption(eReplicationOption);
			gl_acctmaset->setDropOption(edropOption);
			gl_acctmaset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_acctmaset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRPTPRTABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRPTPRTABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRPTPRTABSET> ma_prptprtabset(new MA_PRPTPRTABSET());
			ma_prptprtabset->open(sourceDSN, targetDSN);
			ma_prptprtabset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prptprtabset->setProfileName(profileName);
			ma_prptprtabset->setReplicationOption(eReplicationOption);
			ma_prptprtabset->setDropOption(edropOption);
			ma_prptprtabset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prptprtabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INDCOMOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INDCOMOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INDCOMOSET> ma_indcomoset(new MA_INDCOMOSET());
			ma_indcomoset->open(sourceDSN, targetDSN);
			ma_indcomoset->setRepositoryString(builder->getEnvyConnectionString());
			ma_indcomoset->setProfileName(profileName);
			ma_indcomoset->setReplicationOption(eReplicationOption);
			ma_indcomoset->setDropOption(edropOption);
			ma_indcomoset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_indcomoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTMTRSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTMTRSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTMTRSET> prtmtrset(new PRTMTRSET());
			prtmtrset->open(sourceDSN, targetDSN);
			prtmtrset->setRepositoryString(builder->getEnvyConnectionString());
			prtmtrset->setProfileName(profileName);
			prtmtrset->setReplicationOption(eReplicationOption);
			prtmtrset->setDropOption(edropOption);
			prtmtrset->setOdbcAttributes(builder->getOdbcAttributes());
			prtmtrset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTCOGSSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTCOGSSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTCOGSSET> ma_acctcogsset(new MA_ACCTCOGSSET());
			ma_acctcogsset->open(sourceDSN, targetDSN);
			ma_acctcogsset->setRepositoryString(builder->getEnvyConnectionString());
			ma_acctcogsset->setProfileName(profileName);
			ma_acctcogsset->setReplicationOption(eReplicationOption);
			ma_acctcogsset->setDropOption(edropOption);
			ma_acctcogsset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_acctcogsset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHSPNLSET> ma_inhspnlset(new MA_INHSPNLSET());
			ma_inhspnlset->open(sourceDSN, targetDSN);
			ma_inhspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhspnlset->setProfileName(profileName);
			ma_inhspnlset->setReplicationOption(eReplicationOption);
			ma_inhspnlset->setDropOption(edropOption);
			ma_inhspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumSOHSODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("SOHSODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<SOHSODSET> sohsodset(new SOHSODSET());
			sohsodset->open(sourceDSN, targetDSN);
			sohsodset->setRepositoryString(builder->getEnvyConnectionString());
			sohsodset->setProfileName(profileName);
			sohsodset->setReplicationOption(eReplicationOption);
			sohsodset->setDropOption(edropOption);
			sohsodset->setOdbcAttributes(builder->getOdbcAttributes());
			sohsodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SVINDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SVINDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SVINDREC> ma_svindrec(new MA_SVINDREC());
			ma_svindrec->open(sourceDSN, targetDSN);
			ma_svindrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_svindrec->setProfileName(profileName);
			ma_svindrec->setReplicationOption(eReplicationOption);
			ma_svindrec->setDropOption(edropOption);
			ma_svindrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_svindrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCRLABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CRLABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CRLABSET> crlabset(new CRLABSET());
			crlabset->open(sourceDSN, targetDSN);
			crlabset->setRepositoryString(builder->getEnvyConnectionString());
			crlabset->setProfileName(profileName);
			crlabset->setReplicationOption(eReplicationOption);
			crlabset->setDropOption(edropOption);
			crlabset->setOdbcAttributes(builder->getOdbcAttributes());
			crlabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGENHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GENHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GENHSHSET> genhshset(new GENHSHSET());
			genhshset->open(sourceDSN, targetDSN);
			genhshset->setRepositoryString(builder->getEnvyConnectionString());
			genhshset->setProfileName(profileName);
			genhshset->setReplicationOption(eReplicationOption);
			genhshset->setDropOption(edropOption);
			genhshset->setOdbcAttributes(builder->getOdbcAttributes());
			genhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumTOOTWUSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("TOOTWUSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<TOOTWUSET> tootwuset(new TOOTWUSET());
			tootwuset->open(sourceDSN, targetDSN);
			tootwuset->setRepositoryString(builder->getEnvyConnectionString());
			tootwuset->setProfileName(profileName);
			tootwuset->setReplicationOption(eReplicationOption);
			tootwuset->setDropOption(edropOption);
			tootwuset->setOdbcAttributes(builder->getOdbcAttributes());
			tootwuset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTTRASET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTTRASET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTTRASET> ma_accttraset(new MA_ACCTTRASET());
			ma_accttraset->open(sourceDSN, targetDSN);
			ma_accttraset->setRepositoryString(builder->getEnvyConnectionString());
			ma_accttraset->setProfileName(profileName);
			ma_accttraset->setReplicationOption(eReplicationOption);
			ma_accttraset->setDropOption(edropOption);
			ma_accttraset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_accttraset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_AUDHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_AUDHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_AUDHSHSET> ed_audhshset(new ED_AUDHSHSET());
			ed_audhshset->open(sourceDSN, targetDSN);
			ed_audhshset->setRepositoryString(builder->getEnvyConnectionString());
			ed_audhshset->setProfileName(profileName);
			ed_audhshset->setReplicationOption(eReplicationOption);
			ed_audhshset->setDropOption(edropOption);
			ed_audhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ed_audhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHSHHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHSHHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHSHHSET> ma_sohshhset(new MA_SOHSHHSET());
			ma_sohshhset->open(sourceDSN, targetDSN);
			ma_sohshhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohshhset->setProfileName(profileName);
			ma_sohshhset->setReplicationOption(eReplicationOption);
			ma_sohshhset->setDropOption(edropOption);
			ma_sohshhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohshhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PAMTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PAMTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PAMTREC> gl_pamtrec(new GL_PAMTREC());
			gl_pamtrec->open(sourceDSN, targetDSN);
			gl_pamtrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_pamtrec->setProfileName(profileName);
			gl_pamtrec->setReplicationOption(eReplicationOption);
			gl_pamtrec->setDropOption(edropOption);
			gl_pamtrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_pamtrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_ENTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_ENTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_ENTREC> ed_entrec(new ED_ENTREC());
			ed_entrec->open(sourceDSN, targetDSN);
			ed_entrec->setRepositoryString(builder->getEnvyConnectionString());
			ed_entrec->setProfileName(profileName);
			ed_entrec->setReplicationOption(eReplicationOption);
			ed_entrec->setDropOption(edropOption);
			ed_entrec->setOdbcAttributes(builder->getOdbcAttributes());
			ed_entrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHSPISET> ma_inhspiset(new MA_INHSPISET());
			ma_inhspiset->open(sourceDSN, targetDSN);
			ma_inhspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhspiset->setProfileName(profileName);
			ma_inhspiset->setReplicationOption(eReplicationOption);
			ma_inhspiset->setDropOption(edropOption);
			ma_inhspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_LINK_NREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_LINK_NREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_LINK_NREC> gl_link_nrec(new GL_LINK_NREC());
			gl_link_nrec->open(sourceDSN, targetDSN);
			gl_link_nrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_link_nrec->setProfileName(profileName);
			gl_link_nrec->setReplicationOption(eReplicationOption);
			gl_link_nrec->setDropOption(edropOption);
			gl_link_nrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_link_nrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FPFRACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FPFRACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FPFRACCTSET> gl_fpfracctset(new GL_FPFRACCTSET());
			gl_fpfracctset->open(sourceDSN, targetDSN);
			gl_fpfracctset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fpfracctset->setProfileName(profileName);
			gl_fpfracctset->setReplicationOption(eReplicationOption);
			gl_fpfracctset->setDropOption(edropOption);
			gl_fpfracctset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fpfracctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_POHVCHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_POHVCHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_POHVCHREC> ap_pohvchrec(new AP_POHVCHREC());
			ap_pohvchrec->open(sourceDSN, targetDSN);
			ap_pohvchrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_pohvchrec->setProfileName(profileName);
			ap_pohvchrec->setReplicationOption(eReplicationOption);
			ap_pohvchrec->setDropOption(edropOption);
			ap_pohvchrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pohvchrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CTERSHPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CTERSHPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CTERSHPSET> ma_ctershpset(new MA_CTERSHPSET());
			ma_ctershpset->open(sourceDSN, targetDSN);
			ma_ctershpset->setRepositoryString(builder->getEnvyConnectionString());
			ma_ctershpset->setProfileName(profileName);
			ma_ctershpset->setReplicationOption(eReplicationOption);
			ma_ctershpset->setDropOption(edropOption);
			ma_ctershpset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_ctershpset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCSTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CSTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CSTREC> cstrec(new CSTREC());
			cstrec->open(sourceDSN, targetDSN);
			cstrec->setRepositoryString(builder->getEnvyConnectionString());
			cstrec->setProfileName(profileName);
			cstrec->setReplicationOption(eReplicationOption);
			cstrec->setDropOption(edropOption);
			cstrec->setOdbcAttributes(builder->getOdbcAttributes());
			cstrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PPVNDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PPVNDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PPVNDSET> ap_ppvndset(new AP_PPVNDSET());
			ap_ppvndset->open(sourceDSN, targetDSN);
			ap_ppvndset->setRepositoryString(builder->getEnvyConnectionString());
			ap_ppvndset->setProfileName(profileName);
			ap_ppvndset->setReplicationOption(eReplicationOption);
			ap_ppvndset->setDropOption(edropOption);
			ap_ppvndset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_ppvndset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_INVHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_INVHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_INVHSHSET> ap_invhshset(new AP_INVHSHSET());
			ap_invhshset->open(sourceDSN, targetDSN);
			ap_invhshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_invhshset->setProfileName(profileName);
			ap_invhshset->setReplicationOption(eReplicationOption);
			ap_invhshset->setDropOption(edropOption);
			ap_invhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_invhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumIDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("IDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<IDREC> idrec(new IDREC());
			idrec->open(sourceDSN, targetDSN);
			idrec->setRepositoryString(builder->getEnvyConnectionString());
			idrec->setProfileName(profileName);
			idrec->setReplicationOption(eReplicationOption);
			idrec->setDropOption(edropOption);
			idrec->setOdbcAttributes(builder->getOdbcAttributes());
			idrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHHHSHSET> ma_shhhshset(new MA_SHHHSHSET());
			ma_shhhshset->open(sourceDSN, targetDSN);
			ma_shhhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shhhshset->setProfileName(profileName);
			ma_shhhshset->setReplicationOption(eReplicationOption);
			ma_shhhshset->setDropOption(edropOption);
			ma_shhhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shhhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHREC> ma_inhrec(new MA_INHREC());
			ma_inhrec->open(sourceDSN, targetDSN);
			ma_inhrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhrec->setProfileName(profileName);
			ma_inhrec->setReplicationOption(eReplicationOption);
			ma_inhrec->setDropOption(edropOption);
			ma_inhrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumIRCTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("IRCTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<IRCTREC> irctrec(new IRCTREC());
			irctrec->open(sourceDSN, targetDSN);
			irctrec->setRepositoryString(builder->getEnvyConnectionString());
			irctrec->setProfileName(profileName);
			irctrec->setReplicationOption(eReplicationOption);
			irctrec->setDropOption(edropOption);
			irctrec->setOdbcAttributes(builder->getOdbcAttributes());
			irctrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CPOHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CPOHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CPOHSHSET> ma_cpohshset(new MA_CPOHSHSET());
			ma_cpohshset->open(sourceDSN, targetDSN);
			ma_cpohshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cpohshset->setProfileName(profileName);
			ma_cpohshset->setReplicationOption(eReplicationOption);
			ma_cpohshset->setDropOption(edropOption);
			ma_cpohshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cpohshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PLINREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PLINREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PLINREC> ma_plinrec(new MA_PLINREC());
			ma_plinrec->open(sourceDSN, targetDSN);
			ma_plinrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_plinrec->setProfileName(profileName);
			ma_plinrec->setReplicationOption(eReplicationOption);
			ma_plinrec->setDropOption(edropOption);
			ma_plinrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_plinrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumBOLRCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("BOLRCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<BOLRCTSET> bolrctset(new BOLRCTSET());
			bolrctset->open(sourceDSN, targetDSN);
			bolrctset->setRepositoryString(builder->getEnvyConnectionString());
			bolrctset->setProfileName(profileName);
			bolrctset->setReplicationOption(eReplicationOption);
			bolrctset->setDropOption(edropOption);
			bolrctset->setOdbcAttributes(builder->getOdbcAttributes());
			bolrctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_INVRCTRCTMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_INVRCTRCTMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_INVRCTRCTMSET> ap_invrctrctmset(new AP_INVRCTRCTMSET());
			ap_invrctrctmset->open(sourceDSN, targetDSN);
			ap_invrctrctmset->setRepositoryString(builder->getEnvyConnectionString());
			ap_invrctrctmset->setProfileName(profileName);
			ap_invrctrctmset->setReplicationOption(eReplicationOption);
			ap_invrctrctmset->setDropOption(edropOption);
			ap_invrctrctmset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_invrctrctmset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_RE_HREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_RE_HREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_RE_HREC> gl_re_hrec(new GL_RE_HREC());
			gl_re_hrec->open(sourceDSN, targetDSN);
			gl_re_hrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_re_hrec->setProfileName(profileName);
			gl_re_hrec->setReplicationOption(eReplicationOption);
			gl_re_hrec->setDropOption(edropOption);
			gl_re_hrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_re_hrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_STGPHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_STGPHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_STGPHSHSET> ma_stgphshset(new MA_STGPHSHSET());
			ma_stgphshset->open(sourceDSN, targetDSN);
			ma_stgphshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_stgphshset->setProfileName(profileName);
			ma_stgphshset->setReplicationOption(eReplicationOption);
			ma_stgphshset->setDropOption(edropOption);
			ma_stgphshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_stgphshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ISBSREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ISBSREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ISBSREC> gl_isbsrec(new GL_ISBSREC());
			gl_isbsrec->open(sourceDSN, targetDSN);
			gl_isbsrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_isbsrec->setProfileName(profileName);
			gl_isbsrec->setReplicationOption(eReplicationOption);
			gl_isbsrec->setDropOption(edropOption);
			gl_isbsrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_isbsrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAUTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AUTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AUTREC> autrec(new AUTREC());
			autrec->open(sourceDSN, targetDSN);
			autrec->setRepositoryString(builder->getEnvyConnectionString());
			autrec->setProfileName(profileName);
			autrec->setReplicationOption(eReplicationOption);
			autrec->setDropOption(edropOption);
			autrec->setOdbcAttributes(builder->getOdbcAttributes());
			autrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SPNSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SPNSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SPNSPNLSET> ma_spnspnlset(new MA_SPNSPNLSET());
			ma_spnspnlset->open(sourceDSN, targetDSN);
			ma_spnspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_spnspnlset->setProfileName(profileName);
			ma_spnspnlset->setReplicationOption(eReplicationOption);
			ma_spnspnlset->setDropOption(edropOption);
			ma_spnspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_spnspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumSPNHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("SPNHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<SPNHSHSET> spnhshset(new SPNHSHSET());
			spnhshset->open(sourceDSN, targetDSN);
			spnhshset->setRepositoryString(builder->getEnvyConnectionString());
			spnhshset->setProfileName(profileName);
			spnhshset->setReplicationOption(eReplicationOption);
			spnhshset->setDropOption(edropOption);
			spnhshset->setOdbcAttributes(builder->getOdbcAttributes());
			spnhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SPIREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SPIREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SPIREC> ma_spirec(new MA_SPIREC());
			ma_spirec->open(sourceDSN, targetDSN);
			ma_spirec->setRepositoryString(builder->getEnvyConnectionString());
			ma_spirec->setProfileName(profileName);
			ma_spirec->setReplicationOption(eReplicationOption);
			ma_spirec->setDropOption(edropOption);
			ma_spirec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_spirec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPTOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPTOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPTOSET> gl_vptoset(new GL_VPTOSET());
			gl_vptoset->open(sourceDSN, targetDSN);
			gl_vptoset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vptoset->setProfileName(profileName);
			gl_vptoset->setReplicationOption(eReplicationOption);
			gl_vptoset->setDropOption(edropOption);
			gl_vptoset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vptoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHSVINHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHSVINHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHSVINHSET> ma_inhsvinhset(new MA_INHSVINHSET());
			ma_inhsvinhset->open(sourceDSN, targetDSN);
			ma_inhsvinhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhsvinhset->setProfileName(profileName);
			ma_inhsvinhset->setReplicationOption(eReplicationOption);
			ma_inhsvinhset->setDropOption(edropOption);
			ma_inhsvinhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhsvinhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACTCOGSSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACTCOGSSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACTCOGSSET> ma_actcogsset(new MA_ACTCOGSSET());
			ma_actcogsset->open(sourceDSN, targetDSN);
			ma_actcogsset->setRepositoryString(builder->getEnvyConnectionString());
			ma_actcogsset->setProfileName(profileName);
			ma_actcogsset->setReplicationOption(eReplicationOption);
			ma_actcogsset->setDropOption(edropOption);
			ma_actcogsset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_actcogsset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHDSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHDSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHDSPNLSET> ma_shdspnlset(new MA_SHDSPNLSET());
			ma_shdspnlset->open(sourceDSN, targetDSN);
			ma_shdspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shdspnlset->setProfileName(profileName);
			ma_shdspnlset->setReplicationOption(eReplicationOption);
			ma_shdspnlset->setDropOption(edropOption);
			ma_shdspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shdspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VNDBOLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VNDBOLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VNDBOLSET> ap_vndbolset(new AP_VNDBOLSET());
			ap_vndbolset->open(sourceDSN, targetDSN);
			ap_vndbolset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vndbolset->setProfileName(profileName);
			ap_vndbolset->setReplicationOption(eReplicationOption);
			ap_vndbolset->setDropOption(edropOption);
			ap_vndbolset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vndbolset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVENIRCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VENIRCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VENIRCTSET> venirctset(new VENIRCTSET());
			venirctset->open(sourceDSN, targetDSN);
			venirctset->setRepositoryString(builder->getEnvyConnectionString());
			venirctset->setProfileName(profileName);
			venirctset->setReplicationOption(eReplicationOption);
			venirctset->setDropOption(edropOption);
			venirctset->setOdbcAttributes(builder->getOdbcAttributes());
			venirctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_CNOTEREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_CNOTEREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_CNOTEREC> ap_cnoterec(new AP_CNOTEREC());
			ap_cnoterec->open(sourceDSN, targetDSN);
			ap_cnoterec->setRepositoryString(builder->getEnvyConnectionString());
			ap_cnoterec->setProfileName(profileName);
			ap_cnoterec->setReplicationOption(eReplicationOption);
			ap_cnoterec->setDropOption(edropOption);
			ap_cnoterec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_cnoterec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_POHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_POHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_POHREC> ap_pohrec(new AP_POHREC());
			ap_pohrec->open(sourceDSN, targetDSN);
			ap_pohrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_pohrec->setProfileName(profileName);
			ap_pohrec->setReplicationOption(eReplicationOption);
			ap_pohrec->setDropOption(edropOption);
			ap_pohrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pohrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PNOTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PNOTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PNOTREC> ap_pnotrec(new AP_PNOTREC());
			ap_pnotrec->open(sourceDSN, targetDSN);
			ap_pnotrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_pnotrec->setProfileName(profileName);
			ap_pnotrec->setReplicationOption(eReplicationOption);
			ap_pnotrec->setDropOption(edropOption);
			ap_pnotrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pnotrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMISMISREFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MISMISREFSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MISMISREFSET> mismisrefset(new MISMISREFSET());
			mismisrefset->open(sourceDSN, targetDSN);
			mismisrefset->setRepositoryString(builder->getEnvyConnectionString());
			mismisrefset->setProfileName(profileName);
			mismisrefset->setReplicationOption(eReplicationOption);
			mismisrefset->setDropOption(edropOption);
			mismisrefset->setOdbcAttributes(builder->getOdbcAttributes());
			mismisrefset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODFCPRTABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODFCPRTABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODFCPRTABSET> ma_prodfcprtabset(new MA_PRODFCPRTABSET());
			ma_prodfcprtabset->open(sourceDSN, targetDSN);
			ma_prodfcprtabset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodfcprtabset->setProfileName(profileName);
			ma_prodfcprtabset->setReplicationOption(eReplicationOption);
			ma_prodfcprtabset->setDropOption(edropOption);
			ma_prodfcprtabset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodfcprtabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODOPTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODOPTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODOPTSET> ma_prodoptset(new MA_PRODOPTSET());
			ma_prodoptset->open(sourceDSN, targetDSN);
			ma_prodoptset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodoptset->setProfileName(profileName);
			ma_prodoptset->setReplicationOption(eReplicationOption);
			ma_prodoptset->setDropOption(edropOption);
			ma_prodoptset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodoptset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RCTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RCTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RCTHSHSET> ap_rcthshset(new AP_RCTHSHSET());
			ap_rcthshset->open(sourceDSN, targetDSN);
			ap_rcthshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_rcthshset->setProfileName(profileName);
			ap_rcthshset->setReplicationOption(eReplicationOption);
			ap_rcthshset->setDropOption(edropOption);
			ap_rcthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_rcthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FPFRLINKREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FPFRLINKREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FPFRLINKREC> gl_fpfrlinkrec(new GL_FPFRLINKREC());
			gl_fpfrlinkrec->open(sourceDSN, targetDSN);
			gl_fpfrlinkrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_fpfrlinkrec->setProfileName(profileName);
			gl_fpfrlinkrec->setReplicationOption(eReplicationOption);
			gl_fpfrlinkrec->setDropOption(edropOption);
			gl_fpfrlinkrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fpfrlinkrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_HLDHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_HLDHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_HLDHSHSET> ma_hldhshset(new MA_HLDHSHSET());
			ma_hldhshset->open(sourceDSN, targetDSN);
			ma_hldhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_hldhshset->setProfileName(profileName);
			ma_hldhshset->setReplicationOption(eReplicationOption);
			ma_hldhshset->setDropOption(edropOption);
			ma_hldhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_hldhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INDMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INDMREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INDMREC> ma_indmrec(new MA_INDMREC());
			ma_indmrec->open(sourceDSN, targetDSN);
			ma_indmrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_indmrec->setProfileName(profileName);
			ma_indmrec->setReplicationOption(eReplicationOption);
			ma_indmrec->setDropOption(edropOption);
			ma_indmrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_indmrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PAYTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PAYTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PAYTHSHSET> ma_paythshset(new MA_PAYTHSHSET());
			ma_paythshset->open(sourceDSN, targetDSN);
			ma_paythshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_paythshset->setProfileName(profileName);
			ma_paythshset->setReplicationOption(eReplicationOption);
			ma_paythshset->setDropOption(edropOption);
			ma_paythshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_paythshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_POSTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_POSTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_POSTREC> ma_postrec(new MA_POSTREC());
			ma_postrec->open(sourceDSN, targetDSN);
			ma_postrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_postrec->setProfileName(profileName);
			ma_postrec->setReplicationOption(eReplicationOption);
			ma_postrec->setDropOption(edropOption);
			ma_postrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_postrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ABUDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ABUDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ABUDSET> gl_abudset(new GL_ABUDSET());
			gl_abudset->open(sourceDSN, targetDSN);
			gl_abudset->setRepositoryString(builder->getEnvyConnectionString());
			gl_abudset->setProfileName(profileName);
			gl_abudset->setReplicationOption(eReplicationOption);
			gl_abudset->setDropOption(edropOption);
			gl_abudset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_abudset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRCTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RCTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RCTREC> rctrec(new RCTREC());
			rctrec->open(sourceDSN, targetDSN);
			rctrec->setRepositoryString(builder->getEnvyConnectionString());
			rctrec->setProfileName(profileName);
			rctrec->setReplicationOption(eReplicationOption);
			rctrec->setDropOption(edropOption);
			rctrec->setOdbcAttributes(builder->getOdbcAttributes());
			rctrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SODCOMOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SODCOMOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SODCOMOSET> ma_sodcomoset(new MA_SODCOMOSET());
			ma_sodcomoset->open(sourceDSN, targetDSN);
			ma_sodcomoset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sodcomoset->setProfileName(profileName);
			ma_sodcomoset->setReplicationOption(eReplicationOption);
			ma_sodcomoset->setDropOption(edropOption);
			ma_sodcomoset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sodcomoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SAMCOMOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SAMCOMOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SAMCOMOSET> ma_samcomoset(new MA_SAMCOMOSET());
			ma_samcomoset->open(sourceDSN, targetDSN);
			ma_samcomoset->setRepositoryString(builder->getEnvyConnectionString());
			ma_samcomoset->setProfileName(profileName);
			ma_samcomoset->setReplicationOption(eReplicationOption);
			ma_samcomoset->setDropOption(edropOption);
			ma_samcomoset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_samcomoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWKCLABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WKCLABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WKCLABSET> wkclabset(new WKCLABSET());
			wkclabset->open(sourceDSN, targetDSN);
			wkclabset->setRepositoryString(builder->getEnvyConnectionString());
			wkclabset->setProfileName(profileName);
			wkclabset->setReplicationOption(eReplicationOption);
			wkclabset->setDropOption(edropOption);
			wkclabset->setOdbcAttributes(builder->getOdbcAttributes());
			wkclabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_GLPTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_GLPTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_GLPTREC> ma_glptrec(new MA_GLPTREC());
			ma_glptrec->open(sourceDSN, targetDSN);
			ma_glptrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_glptrec->setProfileName(profileName);
			ma_glptrec->setReplicationOption(eReplicationOption);
			ma_glptrec->setDropOption(edropOption);
			ma_glptrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_glptrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumTRKTRDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("TRKTRDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<TRKTRDSET> trktrdset(new TRKTRDSET());
			trktrdset->open(sourceDSN, targetDSN);
			trktrdset->setRepositoryString(builder->getEnvyConnectionString());
			trktrdset->setProfileName(profileName);
			trktrdset->setReplicationOption(eReplicationOption);
			trktrdset->setDropOption(edropOption);
			trktrdset->setOdbcAttributes(builder->getOdbcAttributes());
			trktrdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ARPTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ARPTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ARPTHSHSET> gl_arpthshset(new GL_ARPTHSHSET());
			gl_arpthshset->open(sourceDSN, targetDSN);
			gl_arpthshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_arpthshset->setProfileName(profileName);
			gl_arpthshset->setReplicationOption(eReplicationOption);
			gl_arpthshset->setDropOption(edropOption);
			gl_arpthshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_arpthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_GLCTBILSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_GLCTBILSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_GLCTBILSET> ma_glctbilset(new MA_GLCTBILSET());
			ma_glctbilset->open(sourceDSN, targetDSN);
			ma_glctbilset->setRepositoryString(builder->getEnvyConnectionString());
			ma_glctbilset->setProfileName(profileName);
			ma_glctbilset->setReplicationOption(eReplicationOption);
			ma_glctbilset->setDropOption(edropOption);
			ma_glctbilset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_glctbilset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTPFAMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTPFAMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTPFAMSET> prtpfamset(new PRTPFAMSET());
			prtpfamset->open(sourceDSN, targetDSN);
			prtpfamset->setRepositoryString(builder->getEnvyConnectionString());
			prtpfamset->setProfileName(profileName);
			prtpfamset->setReplicationOption(eReplicationOption);
			prtpfamset->setDropOption(edropOption);
			prtpfamset->setOdbcAttributes(builder->getOdbcAttributes());
			prtpfamset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BOLHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BOLHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BOLHSHSET> ap_bolhshset(new AP_BOLHSHSET());
			ap_bolhshset->open(sourceDSN, targetDSN);
			ap_bolhshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_bolhshset->setProfileName(profileName);
			ap_bolhshset->setReplicationOption(eReplicationOption);
			ap_bolhshset->setDropOption(edropOption);
			ap_bolhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bolhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCOPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("COPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<COPREC> coprec(new COPREC());
			coprec->open(sourceDSN, targetDSN);
			coprec->setRepositoryString(builder->getEnvyConnectionString());
			coprec->setProfileName(profileName);
			coprec->setReplicationOption(eReplicationOption);
			coprec->setDropOption(edropOption);
			coprec->setOdbcAttributes(builder->getOdbcAttributes());
			coprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVENRCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VENRCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VENRCTSET> venrctset(new VENRCTSET());
			venrctset->open(sourceDSN, targetDSN);
			venrctset->setRepositoryString(builder->getEnvyConnectionString());
			venrctset->setProfileName(profileName);
			venrctset->setReplicationOption(eReplicationOption);
			venrctset->setDropOption(edropOption);
			venrctset->setOdbcAttributes(builder->getOdbcAttributes());
			venrctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHCMHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHCMHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHCMHSET> ma_inhcmhset(new MA_INHCMHSET());
			ma_inhcmhset->open(sourceDSN, targetDSN);
			ma_inhcmhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhcmhset->setProfileName(profileName);
			ma_inhcmhset->setReplicationOption(eReplicationOption);
			ma_inhcmhset->setDropOption(edropOption);
			ma_inhcmhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhcmhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILCTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILCTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILCTREC> ma_bilctrec(new MA_BILCTREC());
			ma_bilctrec->open(sourceDSN, targetDSN);
			ma_bilctrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilctrec->setProfileName(profileName);
			ma_bilctrec->setReplicationOption(eReplicationOption);
			ma_bilctrec->setDropOption(edropOption);
			ma_bilctrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilctrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_ENTMMHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_ENTMMHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_ENTMMHSHSET> ed_entmmhshset(new ED_ENTMMHSHSET());
			ed_entmmhshset->open(sourceDSN, targetDSN);
			ed_entmmhshset->setRepositoryString(builder->getEnvyConnectionString());
			ed_entmmhshset->setProfileName(profileName);
			ed_entmmhshset->setReplicationOption(eReplicationOption);
			ed_entmmhshset->setDropOption(edropOption);
			ed_entmmhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ed_entmmhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_GLPTPRODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_GLPTPRODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_GLPTPRODSET> ma_glptprodset(new MA_GLPTPRODSET());
			ma_glptprodset->open(sourceDSN, targetDSN);
			ma_glptprodset->setRepositoryString(builder->getEnvyConnectionString());
			ma_glptprodset->setProfileName(profileName);
			ma_glptprodset->setReplicationOption(eReplicationOption);
			ma_glptprodset->setDropOption(edropOption);
			ma_glptprodset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_glptprodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_TPHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_TPHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_TPHSHSET> ed_tphshset(new ED_TPHSHSET());
			ed_tphshset->open(sourceDSN, targetDSN);
			ed_tphshset->setRepositoryString(builder->getEnvyConnectionString());
			ed_tphshset->setProfileName(profileName);
			ed_tphshset->setReplicationOption(eReplicationOption);
			ed_tphshset->setDropOption(edropOption);
			ed_tphshset->setOdbcAttributes(builder->getOdbcAttributes());
			ed_tphshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INDCMDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INDCMDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INDCMDSET> ma_indcmdset(new MA_INDCMDSET());
			ma_indcmdset->open(sourceDSN, targetDSN);
			ma_indcmdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_indcmdset->setProfileName(profileName);
			ma_indcmdset->setReplicationOption(eReplicationOption);
			ma_indcmdset->setDropOption(edropOption);
			ma_indcmdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_indcmdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILCIASET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILCIASET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILCIASET> ma_bilciaset(new MA_BILCIASET());
			ma_bilciaset->open(sourceDSN, targetDSN);
			ma_bilciaset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilciaset->setProfileName(profileName);
			ma_bilciaset->setReplicationOption(eReplicationOption);
			ma_bilciaset->setDropOption(edropOption);
			ma_bilciaset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilciaset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMHVDPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMHVDPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMHVDPOSTSET> ma_cmhvdpostset(new MA_CMHVDPOSTSET());
			ma_cmhvdpostset->open(sourceDSN, targetDSN);
			ma_cmhvdpostset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmhvdpostset->setProfileName(profileName);
			ma_cmhvdpostset->setReplicationOption(eReplicationOption);
			ma_cmhvdpostset->setDropOption(edropOption);
			ma_cmhvdpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmhvdpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODSREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODSREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODSREC> ma_prodsrec(new MA_PRODSREC());
			ma_prodsrec->open(sourceDSN, targetDSN);
			ma_prodsrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodsrec->setProfileName(profileName);
			ma_prodsrec->setReplicationOption(eReplicationOption);
			ma_prodsrec->setDropOption(edropOption);
			ma_prodsrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodsrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTPODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTPODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTPODSET> prtpodset(new PRTPODSET());
			prtpodset->open(sourceDSN, targetDSN);
			prtpodset->setRepositoryString(builder->getEnvyConnectionString());
			prtpodset->setProfileName(profileName);
			prtpodset->setReplicationOption(eReplicationOption);
			prtpodset->setDropOption(edropOption);
			prtpodset->setOdbcAttributes(builder->getOdbcAttributes());
			prtpodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumINVLOC2SET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("INVLOC2SET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<INVLOC2SET> invloc2set(new INVLOC2SET());
			invloc2set->open(sourceDSN, targetDSN);
			invloc2set->setRepositoryString(builder->getEnvyConnectionString());
			invloc2set->setProfileName(profileName);
			invloc2set->setReplicationOption(eReplicationOption);
			invloc2set->setDropOption(edropOption);
			invloc2set->setOdbcAttributes(builder->getOdbcAttributes());
			invloc2set->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWOHMOVSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WOHMOVSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WOHMOVSET> wohmovset(new WOHMOVSET());
			wohmovset->open(sourceDSN, targetDSN);
			wohmovset->setRepositoryString(builder->getEnvyConnectionString());
			wohmovset->setProfileName(profileName);
			wohmovset->setReplicationOption(eReplicationOption);
			wohmovset->setDropOption(edropOption);
			wohmovset->setOdbcAttributes(builder->getOdbcAttributes());
			wohmovset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFSCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FSCREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FSCREC> fscrec(new FSCREC());
			fscrec->open(sourceDSN, targetDSN);
			fscrec->setRepositoryString(builder->getEnvyConnectionString());
			fscrec->setProfileName(profileName);
			fscrec->setReplicationOption(eReplicationOption);
			fscrec->setDropOption(edropOption);
			fscrec->setOdbcAttributes(builder->getOdbcAttributes());
			fscrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_INVRCTMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_INVRCTMREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_INVRCTMREC> ap_invrctmrec(new AP_INVRCTMREC());
			ap_invrctmrec->open(sourceDSN, targetDSN);
			ap_invrctmrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_invrctmrec->setProfileName(profileName);
			ap_invrctmrec->setReplicationOption(eReplicationOption);
			ap_invrctmrec->setDropOption(edropOption);
			ap_invrctmrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_invrctmrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_DMVCHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_DMVCHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_DMVCHREC> ap_dmvchrec(new AP_DMVCHREC());
			ap_dmvchrec->open(sourceDSN, targetDSN);
			ap_dmvchrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_dmvchrec->setProfileName(profileName);
			ap_dmvchrec->setReplicationOption(eReplicationOption);
			ap_dmvchrec->setDropOption(edropOption);
			ap_dmvchrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_dmvchrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ACCTPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ACCTPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ACCTPOSTSET> gl_acctpostset(new GL_ACCTPOSTSET());
			gl_acctpostset->open(sourceDSN, targetDSN);
			gl_acctpostset->setRepositoryString(builder->getEnvyConnectionString());
			gl_acctpostset->setProfileName(profileName);
			gl_acctpostset->setReplicationOption(eReplicationOption);
			gl_acctpostset->setDropOption(edropOption);
			gl_acctpostset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_acctpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCOMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("COMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<COMSET> comset(new COMSET());
			comset->open(sourceDSN, targetDSN);
			comset->setRepositoryString(builder->getEnvyConnectionString());
			comset->setProfileName(profileName);
			comset->setReplicationOption(eReplicationOption);
			comset->setDropOption(edropOption);
			comset->setOdbcAttributes(builder->getOdbcAttributes());
			comset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VATPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VATPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VATPOSTSET> ap_vatpostset(new AP_VATPOSTSET());
			ap_vatpostset->open(sourceDSN, targetDSN);
			ap_vatpostset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vatpostset->setProfileName(profileName);
			ap_vatpostset->setReplicationOption(eReplicationOption);
			ap_vatpostset->setDropOption(edropOption);
			ap_vatpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vatpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRQHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RQHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RQHREC> rqhrec(new RQHREC());
			rqhrec->open(sourceDSN, targetDSN);
			rqhrec->setRepositoryString(builder->getEnvyConnectionString());
			rqhrec->setProfileName(profileName);
			rqhrec->setReplicationOption(eReplicationOption);
			rqhrec->setDropOption(edropOption);
			rqhrec->setOdbcAttributes(builder->getOdbcAttributes());
			rqhrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SAMHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SAMHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SAMHSHSET> ma_samhshset(new MA_SAMHSHSET());
			ma_samhshset->open(sourceDSN, targetDSN);
			ma_samhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_samhshset->setProfileName(profileName);
			ma_samhshset->setReplicationOption(eReplicationOption);
			ma_samhshset->setDropOption(edropOption);
			ma_samhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_samhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHINDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHINDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHINDSET> ma_inhindset(new MA_INHINDSET());
			ma_inhindset->open(sourceDSN, targetDSN);
			ma_inhindset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhindset->setProfileName(profileName);
			ma_inhindset->setReplicationOption(eReplicationOption);
			ma_inhindset->setDropOption(edropOption);
			ma_inhindset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhindset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCURCUREXSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CURCUREXSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CURCUREXSET> curcurexset(new CURCUREXSET());
			curcurexset->open(sourceDSN, targetDSN);
			curcurexset->setRepositoryString(builder->getEnvyConnectionString());
			curcurexset->setProfileName(profileName);
			curcurexset->setReplicationOption(eReplicationOption);
			curcurexset->setDropOption(edropOption);
			curcurexset->setOdbcAttributes(builder->getOdbcAttributes());
			curcurexset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BTCHEFTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BTCHEFTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BTCHEFTREC> ap_btcheftrec(new AP_BTCHEFTREC());
			ap_btcheftrec->open(sourceDSN, targetDSN);
			ap_btcheftrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_btcheftrec->setProfileName(profileName);
			ap_btcheftrec->setReplicationOption(eReplicationOption);
			ap_btcheftrec->setDropOption(edropOption);
			ap_btcheftrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_btcheftrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPODPRDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PODPRDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PODPRDSET> podprdset(new PODPRDSET());
			podprdset->open(sourceDSN, targetDSN);
			podprdset->setRepositoryString(builder->getEnvyConnectionString());
			podprdset->setProfileName(profileName);
			podprdset->setReplicationOption(eReplicationOption);
			podprdset->setDropOption(edropOption);
			podprdset->setOdbcAttributes(builder->getOdbcAttributes());
			podprdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ISBSACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ISBSACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ISBSACCTSET> gl_isbsacctset(new GL_ISBSACCTSET());
			gl_isbsacctset->open(sourceDSN, targetDSN);
			gl_isbsacctset->setRepositoryString(builder->getEnvyConnectionString());
			gl_isbsacctset->setProfileName(profileName);
			gl_isbsacctset->setReplicationOption(eReplicationOption);
			gl_isbsacctset->setDropOption(edropOption);
			gl_isbsacctset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_isbsacctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPFRLINKREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPFRLINKREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPFRLINKREC> gl_vpfrlinkrec(new GL_VPFRLINKREC());
			gl_vpfrlinkrec->open(sourceDSN, targetDSN);
			gl_vpfrlinkrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpfrlinkrec->setProfileName(profileName);
			gl_vpfrlinkrec->setReplicationOption(eReplicationOption);
			gl_vpfrlinkrec->setDropOption(edropOption);
			gl_vpfrlinkrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpfrlinkrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_COMCCOMCLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_COMCCOMCLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_COMCCOMCLSET> ma_comccomclset(new MA_COMCCOMCLSET());
			ma_comccomclset->open(sourceDSN, targetDSN);
			ma_comccomclset->setRepositoryString(builder->getEnvyConnectionString());
			ma_comccomclset->setProfileName(profileName);
			ma_comccomclset->setReplicationOption(eReplicationOption);
			ma_comccomclset->setDropOption(edropOption);
			ma_comccomclset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_comccomclset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPFAMHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PFAMHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PFAMHSHSET> pfamhshset(new PFAMHSHSET());
			pfamhshset->open(sourceDSN, targetDSN);
			pfamhshset->setRepositoryString(builder->getEnvyConnectionString());
			pfamhshset->setProfileName(profileName);
			pfamhshset->setReplicationOption(eReplicationOption);
			pfamhshset->setDropOption(edropOption);
			pfamhshset->setOdbcAttributes(builder->getOdbcAttributes());
			pfamhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_POSTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_POSTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_POSTREC> ap_postrec(new AP_POSTREC());
			ap_postrec->open(sourceDSN, targetDSN);
			ap_postrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_postrec->setProfileName(profileName);
			ap_postrec->setReplicationOption(eReplicationOption);
			ap_postrec->setDropOption(edropOption);
			ap_postrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_postrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMRHMRQSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MRHMRQSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MRHMRQSET> mrhmrqset(new MRHMRQSET());
			mrhmrqset->open(sourceDSN, targetDSN);
			mrhmrqset->setRepositoryString(builder->getEnvyConnectionString());
			mrhmrqset->setProfileName(profileName);
			mrhmrqset->setReplicationOption(eReplicationOption);
			mrhmrqset->setDropOption(edropOption);
			mrhmrqset->setOdbcAttributes(builder->getOdbcAttributes());
			mrhmrqset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_STGSTGPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_STGSTGPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_STGSTGPSET> ma_stgstgpset(new MA_STGSTGPSET());
			ma_stgstgpset->open(sourceDSN, targetDSN);
			ma_stgstgpset->setRepositoryString(builder->getEnvyConnectionString());
			ma_stgstgpset->setProfileName(profileName);
			ma_stgstgpset->setReplicationOption(eReplicationOption);
			ma_stgstgpset->setDropOption(edropOption);
			ma_stgstgpset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_stgstgpset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPNUMACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPNUMACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPNUMACCTSET> gl_vpnumacctset(new GL_VPNUMACCTSET());
			gl_vpnumacctset->open(sourceDSN, targetDSN);
			gl_vpnumacctset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpnumacctset->setProfileName(profileName);
			gl_vpnumacctset->setReplicationOption(eReplicationOption);
			gl_vpnumacctset->setDropOption(edropOption);
			gl_vpnumacctset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpnumacctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BNKCHKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BNKCHKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BNKCHKSET> ap_bnkchkset(new AP_BNKCHKSET());
			ap_bnkchkset->open(sourceDSN, targetDSN);
			ap_bnkchkset->setRepositoryString(builder->getEnvyConnectionString());
			ap_bnkchkset->setProfileName(profileName);
			ap_bnkchkset->setReplicationOption(eReplicationOption);
			ap_bnkchkset->setDropOption(edropOption);
			ap_bnkchkset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bnkchkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_RE_NREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_RE_NREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_RE_NREC> gl_re_nrec(new GL_RE_NREC());
			gl_re_nrec->open(sourceDSN, targetDSN);
			gl_re_nrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_re_nrec->setProfileName(profileName);
			gl_re_nrec->setReplicationOption(eReplicationOption);
			gl_re_nrec->setDropOption(edropOption);
			gl_re_nrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_re_nrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHINHLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHINHLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHINHLSET> ma_inhinhlset(new MA_INHINHLSET());
			ma_inhinhlset->open(sourceDSN, targetDSN);
			ma_inhinhlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhinhlset->setProfileName(profileName);
			ma_inhinhlset->setReplicationOption(eReplicationOption);
			ma_inhinhlset->setDropOption(edropOption);
			ma_inhinhlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhinhlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWKCHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WKCHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WKCHSHSET> wkchshset(new WKCHSHSET());
			wkchshset->open(sourceDSN, targetDSN);
			wkchshset->setRepositoryString(builder->getEnvyConnectionString());
			wkchshset->setProfileName(profileName);
			wkchshset->setReplicationOption(eReplicationOption);
			wkchshset->setDropOption(edropOption);
			wkchshset->setOdbcAttributes(builder->getOdbcAttributes());
			wkchshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHPNOTINVSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHPNOTINVSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHPNOTINVSET> ma_inhpnotinvset(new MA_INHPNOTINVSET());
			ma_inhpnotinvset->open(sourceDSN, targetDSN);
			ma_inhpnotinvset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhpnotinvset->setProfileName(profileName);
			ma_inhpnotinvset->setReplicationOption(eReplicationOption);
			ma_inhpnotinvset->setDropOption(edropOption);
			ma_inhpnotinvset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhpnotinvset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPODPONSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PODPONSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PODPONSET> podponset(new PODPONSET());
			podponset->open(sourceDSN, targetDSN);
			podponset->setRepositoryString(builder->getEnvyConnectionString());
			podponset->setProfileName(profileName);
			podponset->setReplicationOption(eReplicationOption);
			podponset->setDropOption(edropOption);
			podponset->setOdbcAttributes(builder->getOdbcAttributes());
			podponset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_CHKHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_CHKHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_CHKHSHSET> ap_chkhshset(new AP_CHKHSHSET());
			ap_chkhshset->open(sourceDSN, targetDSN);
			ap_chkhshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_chkhshset->setProfileName(profileName);
			ap_chkhshset->setReplicationOption(eReplicationOption);
			ap_chkhshset->setDropOption(edropOption);
			ap_chkhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_chkhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PROJ_NREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PROJ_NREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PROJ_NREC> gl_proj_nrec(new GL_PROJ_NREC());
			gl_proj_nrec->open(sourceDSN, targetDSN);
			gl_proj_nrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_proj_nrec->setProfileName(profileName);
			gl_proj_nrec->setReplicationOption(eReplicationOption);
			gl_proj_nrec->setDropOption(edropOption);
			gl_proj_nrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_proj_nrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCLDPOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CLDPOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CLDPOHSET> cldpohset(new CLDPOHSET());
			cldpohset->open(sourceDSN, targetDSN);
			cldpohset->setRepositoryString(builder->getEnvyConnectionString());
			cldpohset->setProfileName(profileName);
			cldpohset->setReplicationOption(eReplicationOption);
			cldpohset->setDropOption(edropOption);
			cldpohset->setOdbcAttributes(builder->getOdbcAttributes());
			cldpohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VNDHOLDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VNDHOLDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VNDHOLDSET> ap_vndholdset(new AP_VNDHOLDSET());
			ap_vndholdset->open(sourceDSN, targetDSN);
			ap_vndholdset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vndholdset->setProfileName(profileName);
			ap_vndholdset->setReplicationOption(eReplicationOption);
			ap_vndholdset->setDropOption(edropOption);
			ap_vndholdset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vndholdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVENHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VENHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VENHSHSET> venhshset(new VENHSHSET());
			venhshset->open(sourceDSN, targetDSN);
			venhshset->setRepositoryString(builder->getEnvyConnectionString());
			venhshset->setProfileName(profileName);
			venhshset->setReplicationOption(eReplicationOption);
			venhshset->setDropOption(edropOption);
			venhshset->setOdbcAttributes(builder->getOdbcAttributes());
			venhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTFOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTFOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTFOSET> actfoset(new ACTFOSET());
			actfoset->open(sourceDSN, targetDSN);
			actfoset->setRepositoryString(builder->getEnvyConnectionString());
			actfoset->setProfileName(profileName);
			actfoset->setReplicationOption(eReplicationOption);
			actfoset->setDropOption(edropOption);
			actfoset->setOdbcAttributes(builder->getOdbcAttributes());
			actfoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTRCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTRCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTRCTSET> prtrctset(new PRTRCTSET());
			prtrctset->open(sourceDSN, targetDSN);
			prtrctset->setRepositoryString(builder->getEnvyConnectionString());
			prtrctset->setProfileName(profileName);
			prtrctset->setReplicationOption(eReplicationOption);
			prtrctset->setDropOption(edropOption);
			prtrctset->setOdbcAttributes(builder->getOdbcAttributes());
			prtrctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPTOPROJSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPTOPROJSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPTOPROJSET> gl_vptoprojset(new GL_VPTOPROJSET());
			gl_vptoprojset->open(sourceDSN, targetDSN);
			gl_vptoprojset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vptoprojset->setProfileName(profileName);
			gl_vptoprojset->setReplicationOption(eReplicationOption);
			gl_vptoprojset->setDropOption(edropOption);
			gl_vptoprojset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vptoprojset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SVINDSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SVINDSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SVINDSPNLSET> ma_svindspnlset(new MA_SVINDSPNLSET());
			ma_svindspnlset->open(sourceDSN, targetDSN);
			ma_svindspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_svindspnlset->setProfileName(profileName);
			ma_svindspnlset->setReplicationOption(eReplicationOption);
			ma_svindspnlset->setDropOption(edropOption);
			ma_svindspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_svindspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRTABHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRTABHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRTABHSHSET> ma_prtabhshset(new MA_PRTABHSHSET());
			ma_prtabhshset->open(sourceDSN, targetDSN);
			ma_prtabhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prtabhshset->setProfileName(profileName);
			ma_prtabhshset->setReplicationOption(eReplicationOption);
			ma_prtabhshset->setDropOption(edropOption);
			ma_prtabhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prtabhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VP_HREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VP_HREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VP_HREC> gl_vp_hrec(new GL_VP_HREC());
			gl_vp_hrec->open(sourceDSN, targetDSN);
			gl_vp_hrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_vp_hrec->setProfileName(profileName);
			gl_vp_hrec->setReplicationOption(eReplicationOption);
			gl_vp_hrec->setDropOption(edropOption);
			gl_vp_hrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vp_hrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SAMCOMCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SAMCOMCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SAMCOMCSET> ma_samcomcset(new MA_SAMCOMCSET());
			ma_samcomcset->open(sourceDSN, targetDSN);
			ma_samcomcset->setRepositoryString(builder->getEnvyConnectionString());
			ma_samcomcset->setProfileName(profileName);
			ma_samcomcset->setReplicationOption(eReplicationOption);
			ma_samcomcset->setDropOption(edropOption);
			ma_samcomcset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_samcomcset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHSPISET> ma_sohspiset(new MA_SOHSPISET());
			ma_sohspiset->open(sourceDSN, targetDSN);
			ma_sohspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohspiset->setProfileName(profileName);
			ma_sohspiset->setReplicationOption(eReplicationOption);
			ma_sohspiset->setDropOption(edropOption);
			ma_sohspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SPNSPNDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SPNSPNDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SPNSPNDSET> ma_spnspndset(new MA_SPNSPNDSET());
			ma_spnspndset->open(sourceDSN, targetDSN);
			ma_spnspndset->setRepositoryString(builder->getEnvyConnectionString());
			ma_spnspndset->setProfileName(profileName);
			ma_spnspndset->setReplicationOption(eReplicationOption);
			ma_spnspndset->setDropOption(edropOption);
			ma_spnspndset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_spnspndset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PBUDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PBUDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PBUDREC> gl_pbudrec(new GL_PBUDREC());
			gl_pbudrec->open(sourceDSN, targetDSN);
			gl_pbudrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_pbudrec->setProfileName(profileName);
			gl_pbudrec->setReplicationOption(eReplicationOption);
			gl_pbudrec->setDropOption(edropOption);
			gl_pbudrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_pbudrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHPRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHPRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHPRTSET> ma_sohprtset(new MA_SOHPRTSET());
			ma_sohprtset->open(sourceDSN, targetDSN);
			ma_sohprtset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohprtset->setProfileName(profileName);
			ma_sohprtset->setReplicationOption(eReplicationOption);
			ma_sohprtset->setDropOption(edropOption);
			ma_sohprtset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohprtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumEMPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("EMPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<EMPSET> empset(new EMPSET());
			empset->open(sourceDSN, targetDSN);
			empset->setRepositoryString(builder->getEnvyConnectionString());
			empset->setProfileName(profileName);
			empset->setReplicationOption(eReplicationOption);
			empset->setDropOption(edropOption);
			empset->setOdbcAttributes(builder->getOdbcAttributes());
			empset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMRLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MRLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MRLREC> mrlrec(new MRLREC());
			mrlrec->open(sourceDSN, targetDSN);
			mrlrec->setRepositoryString(builder->getEnvyConnectionString());
			mrlrec->setProfileName(profileName);
			mrlrec->setReplicationOption(eReplicationOption);
			mrlrec->setDropOption(edropOption);
			mrlrec->setOdbcAttributes(builder->getOdbcAttributes());
			mrlrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAUTPRHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AUTPRHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AUTPRHSET> autprhset(new AUTPRHSET());
			autprhset->open(sourceDSN, targetDSN);
			autprhset->setRepositoryString(builder->getEnvyConnectionString());
			autprhset->setProfileName(profileName);
			autprhset->setReplicationOption(eReplicationOption);
			autprhset->setDropOption(edropOption);
			autprhset->setOdbcAttributes(builder->getOdbcAttributes());
			autprhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPFRACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPFRACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPFRACCTSET> gl_vpfracctset(new GL_VPFRACCTSET());
			gl_vpfracctset->open(sourceDSN, targetDSN);
			gl_vpfracctset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpfracctset->setProfileName(profileName);
			gl_vpfracctset->setReplicationOption(eReplicationOption);
			gl_vpfracctset->setDropOption(edropOption);
			gl_vpfracctset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpfracctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODCMDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODCMDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODCMDSET> ma_prodcmdset(new MA_PRODCMDSET());
			ma_prodcmdset->open(sourceDSN, targetDSN);
			ma_prodcmdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodcmdset->setProfileName(profileName);
			ma_prodcmdset->setReplicationOption(eReplicationOption);
			ma_prodcmdset->setDropOption(edropOption);
			ma_prodcmdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodcmdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SAMSREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SAMSREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SAMSREC> ma_samsrec(new MA_SAMSREC());
			ma_samsrec->open(sourceDSN, targetDSN);
			ma_samsrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_samsrec->setProfileName(profileName);
			ma_samsrec->setReplicationOption(eReplicationOption);
			ma_samsrec->setDropOption(edropOption);
			ma_samsrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_samsrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUODSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUODSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUODSPNLSET> ma_quodspnlset(new MA_QUODSPNLSET());
			ma_quodspnlset->open(sourceDSN, targetDSN);
			ma_quodspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_quodspnlset->setProfileName(profileName);
			ma_quodspnlset->setReplicationOption(eReplicationOption);
			ma_quodspnlset->setDropOption(edropOption);
			ma_quodspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quodspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMATREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MATREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MATREC> matrec(new MATREC());
			matrec->open(sourceDSN, targetDSN);
			matrec->setRepositoryString(builder->getEnvyConnectionString());
			matrec->setProfileName(profileName);
			matrec->setReplicationOption(eReplicationOption);
			matrec->setDropOption(edropOption);
			matrec->setOdbcAttributes(builder->getOdbcAttributes());
			matrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILHSHSET> ma_bilhshset(new MA_BILHSHSET());
			ma_bilhshset->open(sourceDSN, targetDSN);
			ma_bilhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilhshset->setProfileName(profileName);
			ma_bilhshset->setReplicationOption(eReplicationOption);
			ma_bilhshset->setDropOption(edropOption);
			ma_bilhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BEFTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BEFTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BEFTHSHSET> ap_befthshset(new AP_BEFTHSHSET());
			ap_befthshset->open(sourceDSN, targetDSN);
			ap_befthshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_befthshset->setProfileName(profileName);
			ap_befthshset->setReplicationOption(eReplicationOption);
			ap_befthshset->setDropOption(edropOption);
			ap_befthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_befthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BOLLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BOLLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BOLLREC> ap_bollrec(new AP_BOLLREC());
			ap_bollrec->open(sourceDSN, targetDSN);
			ap_bollrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_bollrec->setProfileName(profileName);
			ap_bollrec->setReplicationOption(eReplicationOption);
			ap_bollrec->setDropOption(edropOption);
			ap_bollrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bollrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUOHCOMOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUOHCOMOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUOHCOMOSET> ma_quohcomoset(new MA_QUOHCOMOSET());
			ma_quohcomoset->open(sourceDSN, targetDSN);
			ma_quohcomoset->setRepositoryString(builder->getEnvyConnectionString());
			ma_quohcomoset->setProfileName(profileName);
			ma_quohcomoset->setReplicationOption(eReplicationOption);
			ma_quohcomoset->setDropOption(edropOption);
			ma_quohcomoset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quohcomoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPODREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PODREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PODREC> podrec(new PODREC());
			podrec->open(sourceDSN, targetDSN);
			podrec->setRepositoryString(builder->getEnvyConnectionString());
			podrec->setProfileName(profileName);
			podrec->setReplicationOption(eReplicationOption);
			podrec->setDropOption(edropOption);
			podrec->setOdbcAttributes(builder->getOdbcAttributes());
			podrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PDCHKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PDCHKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PDCHKSET> ap_pdchkset(new AP_PDCHKSET());
			ap_pdchkset->open(sourceDSN, targetDSN);
			ap_pdchkset->setRepositoryString(builder->getEnvyConnectionString());
			ap_pdchkset->setProfileName(profileName);
			ap_pdchkset->setReplicationOption(eReplicationOption);
			ap_pdchkset->setDropOption(edropOption);
			ap_pdchkset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pdchkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCDPCDPLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CDPCDPLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CDPCDPLSET> cdpcdplset(new CDPCDPLSET());
			cdpcdplset->open(sourceDSN, targetDSN);
			cdpcdplset->setRepositoryString(builder->getEnvyConnectionString());
			cdpcdplset->setProfileName(profileName);
			cdpcdplset->setReplicationOption(eReplicationOption);
			cdpcdplset->setDropOption(edropOption);
			cdpcdplset->setOdbcAttributes(builder->getOdbcAttributes());
			cdpcdplset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPUNREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PUNREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PUNREC> punrec(new PUNREC());
			punrec->open(sourceDSN, targetDSN);
			punrec->setRepositoryString(builder->getEnvyConnectionString());
			punrec->setProfileName(profileName);
			punrec->setReplicationOption(eReplicationOption);
			punrec->setDropOption(edropOption);
			punrec->setOdbcAttributes(builder->getOdbcAttributes());
			punrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_ACCTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_ACCTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_ACCTHSHSET> ap_accthshset(new AP_ACCTHSHSET());
			ap_accthshset->open(sourceDSN, targetDSN);
			ap_accthshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_accthshset->setProfileName(profileName);
			ap_accthshset->setReplicationOption(eReplicationOption);
			ap_accthshset->setDropOption(edropOption);
			ap_accthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_accthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFSCHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FSCHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FSCHSHSET> fschshset(new FSCHSHSET());
			fschshset->open(sourceDSN, targetDSN);
			fschshset->setRepositoryString(builder->getEnvyConnectionString());
			fschshset->setProfileName(profileName);
			fschshset->setReplicationOption(eReplicationOption);
			fschshset->setDropOption(edropOption);
			fschshset->setOdbcAttributes(builder->getOdbcAttributes());
			fschshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CIAPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CIAPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CIAPOSTSET> ma_ciapostset(new MA_CIAPOSTSET());
			ma_ciapostset->open(sourceDSN, targetDSN);
			ma_ciapostset->setRepositoryString(builder->getEnvyConnectionString());
			ma_ciapostset->setProfileName(profileName);
			ma_ciapostset->setReplicationOption(eReplicationOption);
			ma_ciapostset->setDropOption(edropOption);
			ma_ciapostset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_ciapostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VCHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VCHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VCHREC> ap_vchrec(new AP_VCHREC());
			ap_vchrec->open(sourceDSN, targetDSN);
			ap_vchrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_vchrec->setProfileName(profileName);
			ap_vchrec->setReplicationOption(eReplicationOption);
			ap_vchrec->setDropOption(edropOption);
			ap_vchrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vchrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUODSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUODSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUODSPISET> ma_quodspiset(new MA_QUODSPISET());
			ma_quodspiset->open(sourceDSN, targetDSN);
			ma_quodspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_quodspiset->setProfileName(profileName);
			ma_quodspiset->setReplicationOption(eReplicationOption);
			ma_quodspiset->setDropOption(edropOption);
			ma_quodspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quodspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMDREC> ma_cmdrec(new MA_CMDREC());
			ma_cmdrec->open(sourceDSN, targetDSN);
			ma_cmdrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmdrec->setProfileName(profileName);
			ma_cmdrec->setReplicationOption(eReplicationOption);
			ma_cmdrec->setDropOption(edropOption);
			ma_cmdrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmdrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCDPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CDPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CDPREC> cdprec(new CDPREC());
			cdprec->open(sourceDSN, targetDSN);
			cdprec->setRepositoryString(builder->getEnvyConnectionString());
			cdprec->setProfileName(profileName);
			cdprec->setReplicationOption(eReplicationOption);
			cdprec->setDropOption(edropOption);
			cdprec->setOdbcAttributes(builder->getOdbcAttributes());
			cdprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTUPPDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTUPPDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTUPPDSET> ma_acctuppdset(new MA_ACCTUPPDSET());
			ma_acctuppdset->open(sourceDSN, targetDSN);
			ma_acctuppdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_acctuppdset->setProfileName(profileName);
			ma_acctuppdset->setReplicationOption(eReplicationOption);
			ma_acctuppdset->setDropOption(edropOption);
			ma_acctuppdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_acctuppdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_ENTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_ENTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_ENTHSHSET> ed_enthshset(new ED_ENTHSHSET());
			ed_enthshset->open(sourceDSN, targetDSN);
			ed_enthshset->setRepositoryString(builder->getEnvyConnectionString());
			ed_enthshset->setProfileName(profileName);
			ed_enthshset->setReplicationOption(eReplicationOption);
			ed_enthshset->setDropOption(edropOption);
			ed_enthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ed_enthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INDMSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INDMSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INDMSPISET> ma_indmspiset(new MA_INDMSPISET());
			ma_indmspiset->open(sourceDSN, targetDSN);
			ma_indmspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_indmspiset->setProfileName(profileName);
			ma_indmspiset->setReplicationOption(eReplicationOption);
			ma_indmspiset->setDropOption(edropOption);
			ma_indmspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_indmspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_JVTRSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_JVTRSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_JVTRSET> gl_jvtrset(new GL_JVTRSET());
			gl_jvtrset->open(sourceDSN, targetDSN);
			gl_jvtrset->setRepositoryString(builder->getEnvyConnectionString());
			gl_jvtrset->setProfileName(profileName);
			gl_jvtrset->setReplicationOption(eReplicationOption);
			gl_jvtrset->setDropOption(edropOption);
			gl_jvtrset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_jvtrset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODTOPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODTOPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODTOPSET> ma_prodtopset(new MA_PRODTOPSET());
			ma_prodtopset->open(sourceDSN, targetDSN);
			ma_prodtopset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodtopset->setProfileName(profileName);
			ma_prodtopset->setReplicationOption(eReplicationOption);
			ma_prodtopset->setDropOption(edropOption);
			ma_prodtopset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodtopset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PMTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PMTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PMTHSHSET> ap_pmthshset(new AP_PMTHSHSET());
			ap_pmthshset->open(sourceDSN, targetDSN);
			ap_pmthshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_pmthshset->setProfileName(profileName);
			ap_pmthshset->setReplicationOption(eReplicationOption);
			ap_pmthshset->setDropOption(edropOption);
			ap_pmthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pmthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PROJREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PROJREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PROJREC> ap_projrec(new AP_PROJREC());
			ap_projrec->open(sourceDSN, targetDSN);
			ap_projrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_projrec->setProfileName(profileName);
			ap_projrec->setReplicationOption(eReplicationOption);
			ap_projrec->setDropOption(edropOption);
			ap_projrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_projrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_USRFLDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_USRFLDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_USRFLDSET> ma_usrfldset(new MA_USRFLDSET());
			ma_usrfldset->open(sourceDSN, targetDSN);
			ma_usrfldset->setRepositoryString(builder->getEnvyConnectionString());
			ma_usrfldset->setProfileName(profileName);
			ma_usrfldset->setReplicationOption(eReplicationOption);
			ma_usrfldset->setDropOption(edropOption);
			ma_usrfldset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_usrfldset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRDPONSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRDPONSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRDPONSET> prdponset(new PRDPONSET());
			prdponset->open(sourceDSN, targetDSN);
			prdponset->setRepositoryString(builder->getEnvyConnectionString());
			prdponset->setProfileName(profileName);
			prdponset->setReplicationOption(eReplicationOption);
			prdponset->setDropOption(edropOption);
			prdponset->setOdbcAttributes(builder->getOdbcAttributes());
			prdponset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODPRTABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODPRTABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODPRTABSET> ma_prodprtabset(new MA_PRODPRTABSET());
			ma_prodprtabset->open(sourceDSN, targetDSN);
			ma_prodprtabset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodprtabset->setProfileName(profileName);
			ma_prodprtabset->setReplicationOption(eReplicationOption);
			ma_prodprtabset->setDropOption(edropOption);
			ma_prodprtabset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodprtabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRPTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRPTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRPTREC> ma_prptrec(new MA_PRPTREC());
			ma_prptrec->open(sourceDSN, targetDSN);
			ma_prptrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_prptrec->setProfileName(profileName);
			ma_prptrec->setReplicationOption(eReplicationOption);
			ma_prptrec->setDropOption(edropOption);
			ma_prptrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prptrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ACCTAPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ACCTAPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ACCTAPSET> gl_acctapset(new GL_ACCTAPSET());
			gl_acctapset->open(sourceDSN, targetDSN);
			gl_acctapset->setRepositoryString(builder->getEnvyConnectionString());
			gl_acctapset->setProfileName(profileName);
			gl_acctapset->setReplicationOption(eReplicationOption);
			gl_acctapset->setDropOption(edropOption);
			gl_acctapset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_acctapset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VNDINVSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VNDINVSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VNDINVSET> ap_vndinvset(new AP_VNDINVSET());
			ap_vndinvset->open(sourceDSN, targetDSN);
			ap_vndinvset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vndinvset->setProfileName(profileName);
			ap_vndinvset->setReplicationOption(eReplicationOption);
			ap_vndinvset->setDropOption(edropOption);
			ap_vndinvset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vndinvset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_AAMTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_AAMTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_AAMTREC> gl_aamtrec(new GL_AAMTREC());
			gl_aamtrec->open(sourceDSN, targetDSN);
			gl_aamtrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_aamtrec->setProfileName(profileName);
			gl_aamtrec->setReplicationOption(eReplicationOption);
			gl_aamtrec->setDropOption(edropOption);
			gl_aamtrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_aamtrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRESREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RESREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RESREC> resrec(new RESREC());
			resrec->open(sourceDSN, targetDSN);
			resrec->setRepositoryString(builder->getEnvyConnectionString());
			resrec->setProfileName(profileName);
			resrec->setReplicationOption(eReplicationOption);
			resrec->setDropOption(edropOption);
			resrec->setOdbcAttributes(builder->getOdbcAttributes());
			resrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumBOMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("BOMREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<BOMREC> bomrec(new BOMREC());
			bomrec->open(sourceDSN, targetDSN);
			bomrec->setRepositoryString(builder->getEnvyConnectionString());
			bomrec->setProfileName(profileName);
			bomrec->setReplicationOption(eReplicationOption);
			bomrec->setDropOption(edropOption);
			bomrec->setOdbcAttributes(builder->getOdbcAttributes());
			bomrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POHREC> pohrec(new POHREC());
			pohrec->open(sourceDSN, targetDSN);
			pohrec->setRepositoryString(builder->getEnvyConnectionString());
			pohrec->setProfileName(profileName);
			pohrec->setReplicationOption(eReplicationOption);
			pohrec->setDropOption(edropOption);
			pohrec->setOdbcAttributes(builder->getOdbcAttributes());
			pohrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXHSHSET> ma_txhshset(new MA_TXHSHSET());
			ma_txhshset->open(sourceDSN, targetDSN);
			ma_txhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_txhshset->setProfileName(profileName);
			ma_txhshset->setReplicationOption(eReplicationOption);
			ma_txhshset->setDropOption(edropOption);
			ma_txhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTPODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTPODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTPODSET> actpodset(new ACTPODSET());
			actpodset->open(sourceDSN, targetDSN);
			actpodset->setRepositoryString(builder->getEnvyConnectionString());
			actpodset->setProfileName(profileName);
			actpodset->setReplicationOption(eReplicationOption);
			actpodset->setDropOption(edropOption);
			actpodset->setOdbcAttributes(builder->getOdbcAttributes());
			actpodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INTINHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INTINHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INTINHSET> ma_intinhset(new MA_INTINHSET());
			ma_intinhset->open(sourceDSN, targetDSN);
			ma_intinhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_intinhset->setProfileName(profileName);
			ma_intinhset->setReplicationOption(eReplicationOption);
			ma_intinhset->setDropOption(edropOption);
			ma_intinhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_intinhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POPREC> poprec(new POPREC());
			poprec->open(sourceDSN, targetDSN);
			poprec->setRepositoryString(builder->getEnvyConnectionString());
			poprec->setProfileName(profileName);
			poprec->setReplicationOption(eReplicationOption);
			poprec->setDropOption(edropOption);
			poprec->setOdbcAttributes(builder->getOdbcAttributes());
			poprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPDENSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPDENSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPDENSET> gl_vpdenset(new GL_VPDENSET());
			gl_vpdenset->open(sourceDSN, targetDSN);
			gl_vpdenset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpdenset->setProfileName(profileName);
			gl_vpdenset->setReplicationOption(eReplicationOption);
			gl_vpdenset->setDropOption(edropOption);
			gl_vpdenset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpdenset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMDMSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMDMSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMDMSPNLSET> ma_cmdmspnlset(new MA_CMDMSPNLSET());
			ma_cmdmspnlset->open(sourceDSN, targetDSN);
			ma_cmdmspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmdmspnlset->setProfileName(profileName);
			ma_cmdmspnlset->setReplicationOption(eReplicationOption);
			ma_cmdmspnlset->setDropOption(edropOption);
			ma_cmdmspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmdmspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOCOHSRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POCOHSRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POCOHSRTSET> pocohsrtset(new POCOHSRTSET());
			pocohsrtset->open(sourceDSN, targetDSN);
			pocohsrtset->setRepositoryString(builder->getEnvyConnectionString());
			pocohsrtset->setProfileName(profileName);
			pocohsrtset->setReplicationOption(eReplicationOption);
			pocohsrtset->setDropOption(edropOption);
			pocohsrtset->setOdbcAttributes(builder->getOdbcAttributes());
			pocohsrtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTPRTDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTPRTDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTPRTDSET> ma_acctprtdset(new MA_ACCTPRTDSET());
			ma_acctprtdset->open(sourceDSN, targetDSN);
			ma_acctprtdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_acctprtdset->setProfileName(profileName);
			ma_acctprtdset->setReplicationOption(eReplicationOption);
			ma_acctprtdset->setDropOption(edropOption);
			ma_acctprtdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_acctprtdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_TR_NREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_TR_NREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_TR_NREC> gl_tr_nrec(new GL_TR_NREC());
			gl_tr_nrec->open(sourceDSN, targetDSN);
			gl_tr_nrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_tr_nrec->setProfileName(profileName);
			gl_tr_nrec->setReplicationOption(eReplicationOption);
			gl_tr_nrec->setDropOption(edropOption);
			gl_tr_nrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_tr_nrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VATVTPSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VATVTPSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VATVTPSTSET> ap_vatvtpstset(new AP_VATVTPSTSET());
			ap_vatvtpstset->open(sourceDSN, targetDSN);
			ap_vatvtpstset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vatvtpstset->setProfileName(profileName);
			ap_vatvtpstset->setReplicationOption(eReplicationOption);
			ap_vatvtpstset->setDropOption(edropOption);
			ap_vatvtpstset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vatvtpstset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRCTRCTMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RCTRCTMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RCTRCTMSET> rctrctmset(new RCTRCTMSET());
			rctrctmset->open(sourceDSN, targetDSN);
			rctrctmset->setRepositoryString(builder->getEnvyConnectionString());
			rctrctmset->setProfileName(profileName);
			rctrctmset->setReplicationOption(eReplicationOption);
			rctrctmset->setDropOption(edropOption);
			rctrctmset->setOdbcAttributes(builder->getOdbcAttributes());
			rctrctmset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PMTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PMTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PMTREC> ap_pmtrec(new AP_PMTREC());
			ap_pmtrec->open(sourceDSN, targetDSN);
			ap_pmtrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_pmtrec->setProfileName(profileName);
			ap_pmtrec->setReplicationOption(eReplicationOption);
			ap_pmtrec->setDropOption(edropOption);
			ap_pmtrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pmtrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SVINHSVINDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SVINHSVINDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SVINHSVINDSET> ma_svinhsvindset(new MA_SVINHSVINDSET());
			ma_svinhsvindset->open(sourceDSN, targetDSN);
			ma_svinhsvindset->setRepositoryString(builder->getEnvyConnectionString());
			ma_svinhsvindset->setProfileName(profileName);
			ma_svinhsvindset->setReplicationOption(eReplicationOption);
			ma_svinhsvindset->setDropOption(edropOption);
			ma_svinhsvindset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_svinhsvindset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_TPPRDXRFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_TPPRDXRFSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_TPPRDXRFSET> ed_tpprdxrfset(new ED_TPPRDXRFSET());
			ed_tpprdxrfset->open(sourceDSN, targetDSN);
			ed_tpprdxrfset->setRepositoryString(builder->getEnvyConnectionString());
			ed_tpprdxrfset->setProfileName(profileName);
			ed_tpprdxrfset->setReplicationOption(eReplicationOption);
			ed_tpprdxrfset->setDropOption(edropOption);
			ed_tpprdxrfset->setOdbcAttributes(builder->getOdbcAttributes());
			ed_tpprdxrfset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumECOREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ECOREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ECOREC> ecorec(new ECOREC());
			ecorec->open(sourceDSN, targetDSN);
			ecorec->setRepositoryString(builder->getEnvyConnectionString());
			ecorec->setProfileName(profileName);
			ecorec->setReplicationOption(eReplicationOption);
			ecorec->setDropOption(edropOption);
			ecorec->setOdbcAttributes(builder->getOdbcAttributes());
			ecorec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_INVRCTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_INVRCTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_INVRCTREC> ap_invrctrec(new AP_INVRCTREC());
			ap_invrctrec->open(sourceDSN, targetDSN);
			ap_invrctrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_invrctrec->setProfileName(profileName);
			ap_invrctrec->setReplicationOption(eReplicationOption);
			ap_invrctrec->setDropOption(edropOption);
			ap_invrctrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_invrctrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SODSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SODSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SODSPISET> ma_sodspiset(new MA_SODSPISET());
			ma_sodspiset->open(sourceDSN, targetDSN);
			ma_sodspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sodspiset->setProfileName(profileName);
			ma_sodspiset->setReplicationOption(eReplicationOption);
			ma_sodspiset->setDropOption(edropOption);
			ma_sodspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sodspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_APPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_APPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_APPOSTSET> ap_appostset(new AP_APPOSTSET());
			ap_appostset->open(sourceDSN, targetDSN);
			ap_appostset->setRepositoryString(builder->getEnvyConnectionString());
			ap_appostset->setProfileName(profileName);
			ap_appostset->setReplicationOption(eReplicationOption);
			ap_appostset->setDropOption(edropOption);
			ap_appostset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_appostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPCONSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPCONSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPCONSET> wipconset(new WIPCONSET());
			wipconset->open(sourceDSN, targetDSN);
			wipconset->setRepositoryString(builder->getEnvyConnectionString());
			wipconset->setProfileName(profileName);
			wipconset->setReplicationOption(eReplicationOption);
			wipconset->setDropOption(edropOption);
			wipconset->setOdbcAttributes(builder->getOdbcAttributes());
			wipconset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PROJREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PROJREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PROJREC> gl_projrec(new GL_PROJREC());
			gl_projrec->open(sourceDSN, targetDSN);
			gl_projrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_projrec->setProfileName(profileName);
			gl_projrec->setReplicationOption(eReplicationOption);
			gl_projrec->setDropOption(edropOption);
			gl_projrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_projrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXTTXRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXTTXRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXTTXRTSET> ma_txttxrtset(new MA_TXTTXRTSET());
			ma_txttxrtset->open(sourceDSN, targetDSN);
			ma_txttxrtset->setRepositoryString(builder->getEnvyConnectionString());
			ma_txttxrtset->setProfileName(profileName);
			ma_txttxrtset->setReplicationOption(eReplicationOption);
			ma_txttxrtset->setDropOption(edropOption);
			ma_txttxrtset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txttxrtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FISCTRSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FISCTRSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FISCTRSET> gl_fisctrset(new GL_FISCTRSET());
			gl_fisctrset->open(sourceDSN, targetDSN);
			gl_fisctrset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fisctrset->setProfileName(profileName);
			gl_fisctrset->setReplicationOption(eReplicationOption);
			gl_fisctrset->setDropOption(edropOption);
			gl_fisctrset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fisctrset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PRPT_HREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PRPT_HREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PRPT_HREC> gl_prpt_hrec(new GL_PRPT_HREC());
			gl_prpt_hrec->open(sourceDSN, targetDSN);
			gl_prpt_hrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_prpt_hrec->setProfileName(profileName);
			gl_prpt_hrec->setReplicationOption(eReplicationOption);
			gl_prpt_hrec->setDropOption(edropOption);
			gl_prpt_hrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_prpt_hrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VOLINKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VOLINKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VOLINKSET> gl_volinkset(new GL_VOLINKSET());
			gl_volinkset->open(sourceDSN, targetDSN);
			gl_volinkset->setRepositoryString(builder->getEnvyConnectionString());
			gl_volinkset->setProfileName(profileName);
			gl_volinkset->setReplicationOption(eReplicationOption);
			gl_volinkset->setDropOption(edropOption);
			gl_volinkset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_volinkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHQUOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHQUOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHQUOHSET> ma_sohquohset(new MA_SOHQUOHSET());
			ma_sohquohset->open(sourceDSN, targetDSN);
			ma_sohquohset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohquohset->setProfileName(profileName);
			ma_sohquohset->setReplicationOption(eReplicationOption);
			ma_sohquohset->setDropOption(edropOption);
			ma_sohquohset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohquohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PLINHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PLINHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PLINHSHSET> ma_plinhshset(new MA_PLINHSHSET());
			ma_plinhshset->open(sourceDSN, targetDSN);
			ma_plinhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_plinhshset->setProfileName(profileName);
			ma_plinhshset->setReplicationOption(eReplicationOption);
			ma_plinhshset->setDropOption(edropOption);
			ma_plinhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_plinhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PRPTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PRPTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PRPTSET> gl_prptset(new GL_PRPTSET());
			gl_prptset->open(sourceDSN, targetDSN);
			gl_prptset->setRepositoryString(builder->getEnvyConnectionString());
			gl_prptset->setProfileName(profileName);
			gl_prptset->setReplicationOption(eReplicationOption);
			gl_prptset->setDropOption(edropOption);
			gl_prptset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_prptset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPMIXSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPMIXSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPMIXSET> wipmixset(new WIPMIXSET());
			wipmixset->open(sourceDSN, targetDSN);
			wipmixset->setRepositoryString(builder->getEnvyConnectionString());
			wipmixset->setProfileName(profileName);
			wipmixset->setReplicationOption(eReplicationOption);
			wipmixset->setDropOption(edropOption);
			wipmixset->setOdbcAttributes(builder->getOdbcAttributes());
			wipmixset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVENVMCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VENVMCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VENVMCSET> venvmcset(new VENVMCSET());
			venvmcset->open(sourceDSN, targetDSN);
			venvmcset->setRepositoryString(builder->getEnvyConnectionString());
			venvmcset->setProfileName(profileName);
			venvmcset->setReplicationOption(eReplicationOption);
			venvmcset->setDropOption(edropOption);
			venvmcset->setOdbcAttributes(builder->getOdbcAttributes());
			venvmcset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_LINKMFGSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_LINKMFGSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_LINKMFGSET> gl_linkmfgset(new GL_LINKMFGSET());
			gl_linkmfgset->open(sourceDSN, targetDSN);
			gl_linkmfgset->setRepositoryString(builder->getEnvyConnectionString());
			gl_linkmfgset->setProfileName(profileName);
			gl_linkmfgset->setReplicationOption(eReplicationOption);
			gl_linkmfgset->setDropOption(edropOption);
			gl_linkmfgset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_linkmfgset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_GLCTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_GLCTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_GLCTREC> ma_glctrec(new MA_GLCTREC());
			ma_glctrec->open(sourceDSN, targetDSN);
			ma_glctrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_glctrec->setProfileName(profileName);
			ma_glctrec->setReplicationOption(eReplicationOption);
			ma_glctrec->setDropOption(edropOption);
			ma_glctrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_glctrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRCTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRCTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRCTHSHSET> ma_prcthshset(new MA_PRCTHSHSET());
			ma_prcthshset->open(sourceDSN, targetDSN);
			ma_prcthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prcthshset->setProfileName(profileName);
			ma_prcthshset->setReplicationOption(eReplicationOption);
			ma_prcthshset->setDropOption(edropOption);
			ma_prcthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prcthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFRTBOLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FRTBOLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FRTBOLSET> frtbolset(new FRTBOLSET());
			frtbolset->open(sourceDSN, targetDSN);
			frtbolset->setRepositoryString(builder->getEnvyConnectionString());
			frtbolset->setProfileName(profileName);
			frtbolset->setReplicationOption(eReplicationOption);
			frtbolset->setDropOption(edropOption);
			frtbolset->setOdbcAttributes(builder->getOdbcAttributes());
			frtbolset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BANKREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BANKREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BANKREC> ap_bankrec(new AP_BANKREC());
			ap_bankrec->open(sourceDSN, targetDSN);
			ap_bankrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_bankrec->setProfileName(profileName);
			ap_bankrec->setReplicationOption(eReplicationOption);
			ap_bankrec->setDropOption(edropOption);
			ap_bankrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bankrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PAYTPAYTDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PAYTPAYTDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PAYTPAYTDSET> ma_paytpaytdset(new MA_PAYTPAYTDSET());
			ma_paytpaytdset->open(sourceDSN, targetDSN);
			ma_paytpaytdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_paytpaytdset->setProfileName(profileName);
			ma_paytpaytdset->setReplicationOption(eReplicationOption);
			ma_paytpaytdset->setDropOption(edropOption);
			ma_paytpaytdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_paytpaytdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FPDESCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FPDESCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FPDESCSET> gl_fpdescset(new GL_FPDESCSET());
			gl_fpdescset->open(sourceDSN, targetDSN);
			gl_fpdescset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fpdescset->setProfileName(profileName);
			gl_fpdescset->setReplicationOption(eReplicationOption);
			gl_fpdescset->setDropOption(edropOption);
			gl_fpdescset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fpdescset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VCHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VCHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VCHHSHSET> ap_vchhshset(new AP_VCHHSHSET());
			ap_vchhshset->open(sourceDSN, targetDSN);
			ap_vchhshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vchhshset->setProfileName(profileName);
			ap_vchhshset->setReplicationOption(eReplicationOption);
			ap_vchhshset->setDropOption(edropOption);
			ap_vchhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vchhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWARSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WARSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WARSET> warset(new WARSET());
			warset->open(sourceDSN, targetDSN);
			warset->setRepositoryString(builder->getEnvyConnectionString());
			warset->setProfileName(profileName);
			warset->setReplicationOption(eReplicationOption);
			warset->setDropOption(edropOption);
			warset->setOdbcAttributes(builder->getOdbcAttributes());
			warset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_DMVCHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_DMVCHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_DMVCHSET> ap_dmvchset(new AP_DMVCHSET());
			ap_dmvchset->open(sourceDSN, targetDSN);
			ap_dmvchset->setRepositoryString(builder->getEnvyConnectionString());
			ap_dmvchset->setProfileName(profileName);
			ap_dmvchset->setReplicationOption(eReplicationOption);
			ap_dmvchset->setDropOption(edropOption);
			ap_dmvchset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_dmvchset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAUTAPPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AUTAPPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AUTAPPSET> autappset(new AUTAPPSET());
			autappset->open(sourceDSN, targetDSN);
			autappset->setRepositoryString(builder->getEnvyConnectionString());
			autappset->setProfileName(profileName);
			autappset->setReplicationOption(eReplicationOption);
			autappset->setDropOption(edropOption);
			autappset->setOdbcAttributes(builder->getOdbcAttributes());
			autappset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_GLTABREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_GLTABREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_GLTABREC> ma_gltabrec(new MA_GLTABREC());
			ma_gltabrec->open(sourceDSN, targetDSN);
			ma_gltabrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_gltabrec->setProfileName(profileName);
			ma_gltabrec->setReplicationOption(eReplicationOption);
			ma_gltabrec->setDropOption(edropOption);
			ma_gltabrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_gltabrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUOHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUOHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUOHREC> ma_quohrec(new MA_QUOHREC());
			ma_quohrec->open(sourceDSN, targetDSN);
			ma_quohrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_quohrec->setProfileName(profileName);
			ma_quohrec->setReplicationOption(eReplicationOption);
			ma_quohrec->setDropOption(edropOption);
			ma_quohrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quohrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTMISSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTMISSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTMISSET> prtmisset(new PRTMISSET());
			prtmisset->open(sourceDSN, targetDSN);
			prtmisset->setRepositoryString(builder->getEnvyConnectionString());
			prtmisset->setProfileName(profileName);
			prtmisset->setReplicationOption(eReplicationOption);
			prtmisset->setDropOption(edropOption);
			prtmisset->setOdbcAttributes(builder->getOdbcAttributes());
			prtmisset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVENCOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VENCOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VENCOHSET> vencohset(new VENCOHSET());
			vencohset->open(sourceDSN, targetDSN);
			vencohset->setRepositoryString(builder->getEnvyConnectionString());
			vencohset->setProfileName(profileName);
			vencohset->setReplicationOption(eReplicationOption);
			vencohset->setDropOption(edropOption);
			vencohset->setOdbcAttributes(builder->getOdbcAttributes());
			vencohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPLOTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPLOTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPLOTSET> wiplotset(new WIPLOTSET());
			wiplotset->open(sourceDSN, targetDSN);
			wiplotset->setRepositoryString(builder->getEnvyConnectionString());
			wiplotset->setProfileName(profileName);
			wiplotset->setReplicationOption(eReplicationOption);
			wiplotset->setDropOption(edropOption);
			wiplotset->setOdbcAttributes(builder->getOdbcAttributes());
			wiplotset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHSODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHSODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHSODSET> ma_sohsodset(new MA_SOHSODSET());
			ma_sohsodset->open(sourceDSN, targetDSN);
			ma_sohsodset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohsodset->setProfileName(profileName);
			ma_sohsodset->setReplicationOption(eReplicationOption);
			ma_sohsodset->setDropOption(edropOption);
			ma_sohsodset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohsodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RCTINRCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RCTINRCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RCTINRCSET> ap_rctinrcset(new AP_RCTINRCSET());
			ap_rctinrcset->open(sourceDSN, targetDSN);
			ap_rctinrcset->setRepositoryString(builder->getEnvyConnectionString());
			ap_rctinrcset->setProfileName(profileName);
			ap_rctinrcset->setReplicationOption(eReplicationOption);
			ap_rctinrcset->setDropOption(edropOption);
			ap_rctinrcset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_rctinrcset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_CASHBNKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_CASHBNKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_CASHBNKSET> ap_cashbnkset(new AP_CASHBNKSET());
			ap_cashbnkset->open(sourceDSN, targetDSN);
			ap_cashbnkset->setRepositoryString(builder->getEnvyConnectionString());
			ap_cashbnkset->setProfileName(profileName);
			ap_cashbnkset->setReplicationOption(eReplicationOption);
			ap_cashbnkset->setDropOption(edropOption);
			ap_cashbnkset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_cashbnkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXREC> ma_txrec(new MA_TXREC());
			ma_txrec->open(sourceDSN, targetDSN);
			ma_txrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_txrec->setProfileName(profileName);
			ma_txrec->setReplicationOption(eReplicationOption);
			ma_txrec->setDropOption(edropOption);
			ma_txrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHCRPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHCRPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHCRPOSTSET> ma_inhcrpostset(new MA_INHCRPOSTSET());
			ma_inhcrpostset->open(sourceDSN, targetDSN);
			ma_inhcrpostset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhcrpostset->setProfileName(profileName);
			ma_inhcrpostset->setReplicationOption(eReplicationOption);
			ma_inhcrpostset->setDropOption(edropOption);
			ma_inhcrpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhcrpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumSPNREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("SPNREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<SPNREC> spnrec(new SPNREC());
			spnrec->open(sourceDSN, targetDSN);
			spnrec->setRepositoryString(builder->getEnvyConnectionString());
			spnrec->setProfileName(profileName);
			spnrec->setReplicationOption(eReplicationOption);
			spnrec->setDropOption(edropOption);
			spnrec->setOdbcAttributes(builder->getOdbcAttributes());
			spnrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTBORSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTBORSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTBORSET> prtborset(new PRTBORSET());
			prtborset->open(sourceDSN, targetDSN);
			prtborset->setRepositoryString(builder->getEnvyConnectionString());
			prtborset->setProfileName(profileName);
			prtborset->setReplicationOption(eReplicationOption);
			prtborset->setDropOption(edropOption);
			prtborset->setOdbcAttributes(builder->getOdbcAttributes());
			prtborset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUOHSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUOHSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUOHSPNLSET> ma_quohspnlset(new MA_QUOHSPNLSET());
			ma_quohspnlset->open(sourceDSN, targetDSN);
			ma_quohspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_quohspnlset->setProfileName(profileName);
			ma_quohspnlset->setReplicationOption(eReplicationOption);
			ma_quohspnlset->setDropOption(edropOption);
			ma_quohspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quohspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHUPDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHUPDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHUPDSET> ma_sohupdset(new MA_SOHUPDSET());
			ma_sohupdset->open(sourceDSN, targetDSN);
			ma_sohupdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohupdset->setProfileName(profileName);
			ma_sohupdset->setReplicationOption(eReplicationOption);
			ma_sohupdset->setDropOption(edropOption);
			ma_sohupdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohupdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_DISCBNKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_DISCBNKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_DISCBNKSET> ap_discbnkset(new AP_DISCBNKSET());
			ap_discbnkset->open(sourceDSN, targetDSN);
			ap_discbnkset->setRepositoryString(builder->getEnvyConnectionString());
			ap_discbnkset->setProfileName(profileName);
			ap_discbnkset->setReplicationOption(eReplicationOption);
			ap_discbnkset->setDropOption(edropOption);
			ap_discbnkset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_discbnkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumBYDHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("BYDHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<BYDHSHSET> bydhshset(new BYDHSHSET());
			bydhshset->open(sourceDSN, targetDSN);
			bydhshset->setRepositoryString(builder->getEnvyConnectionString());
			bydhshset->setProfileName(profileName);
			bydhshset->setReplicationOption(eReplicationOption);
			bydhshset->setDropOption(edropOption);
			bydhshset->setOdbcAttributes(builder->getOdbcAttributes());
			bydhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHINDMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHINDMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHINDMSET> ma_inhindmset(new MA_INHINDMSET());
			ma_inhindmset->open(sourceDSN, targetDSN);
			ma_inhindmset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhindmset->setProfileName(profileName);
			ma_inhindmset->setReplicationOption(eReplicationOption);
			ma_inhindmset->setDropOption(edropOption);
			ma_inhindmset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhindmset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FP_HREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FP_HREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FP_HREC> gl_fp_hrec(new GL_FP_HREC());
			gl_fp_hrec->open(sourceDSN, targetDSN);
			gl_fp_hrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_fp_hrec->setProfileName(profileName);
			gl_fp_hrec->setReplicationOption(eReplicationOption);
			gl_fp_hrec->setDropOption(edropOption);
			gl_fp_hrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fp_hrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PARTTOPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PARTTOPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PARTTOPSET> ma_parttopset(new MA_PARTTOPSET());
			ma_parttopset->open(sourceDSN, targetDSN);
			ma_parttopset->setRepositoryString(builder->getEnvyConnectionString());
			ma_parttopset->setProfileName(profileName);
			ma_parttopset->setReplicationOption(eReplicationOption);
			ma_parttopset->setDropOption(edropOption);
			ma_parttopset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_parttopset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_REDESCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_REDESCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_REDESCSET> gl_redescset(new GL_REDESCSET());
			gl_redescset->open(sourceDSN, targetDSN);
			gl_redescset->setRepositoryString(builder->getEnvyConnectionString());
			gl_redescset->setProfileName(profileName);
			gl_redescset->setReplicationOption(eReplicationOption);
			gl_redescset->setDropOption(edropOption);
			gl_redescset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_redescset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPOFFACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPOFFACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPOFFACCTSET> gl_vpoffacctset(new GL_VPOFFACCTSET());
			gl_vpoffacctset->open(sourceDSN, targetDSN);
			gl_vpoffacctset->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpoffacctset->setProfileName(profileName);
			gl_vpoffacctset->setReplicationOption(eReplicationOption);
			gl_vpoffacctset->setDropOption(edropOption);
			gl_vpoffacctset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpoffacctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BOLBOLLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BOLBOLLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BOLBOLLSET> ap_bolbollset(new AP_BOLBOLLSET());
			ap_bolbollset->open(sourceDSN, targetDSN);
			ap_bolbollset->setRepositoryString(builder->getEnvyConnectionString());
			ap_bolbollset->setProfileName(profileName);
			ap_bolbollset->setReplicationOption(eReplicationOption);
			ap_bolbollset->setDropOption(edropOption);
			ap_bolbollset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bolbollset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SPFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SPFREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SPFREC> ma_spfrec(new MA_SPFREC());
			ma_spfrec->open(sourceDSN, targetDSN);
			ma_spfrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_spfrec->setProfileName(profileName);
			ma_spfrec->setReplicationOption(eReplicationOption);
			ma_spfrec->setDropOption(edropOption);
			ma_spfrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_spfrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumBOLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("BOLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<BOLREC> bolrec(new BOLREC());
			bolrec->open(sourceDSN, targetDSN);
			bolrec->setRepositoryString(builder->getEnvyConnectionString());
			bolrec->setProfileName(profileName);
			bolrec->setReplicationOption(eReplicationOption);
			bolrec->setDropOption(edropOption);
			bolrec->setOdbcAttributes(builder->getOdbcAttributes());
			bolrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCURHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CURHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CURHSHSET> curhshset(new CURHSHSET());
			curhshset->open(sourceDSN, targetDSN);
			curhshset->setRepositoryString(builder->getEnvyConnectionString());
			curhshset->setProfileName(profileName);
			curhshset->setReplicationOption(eReplicationOption);
			curhshset->setDropOption(edropOption);
			curhshset->setOdbcAttributes(builder->getOdbcAttributes());
			curhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODSODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODSODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODSODSET> ma_prodsodset(new MA_PRODSODSET());
			ma_prodsodset->open(sourceDSN, targetDSN);
			ma_prodsodset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodsodset->setProfileName(profileName);
			ma_prodsodset->setReplicationOption(eReplicationOption);
			ma_prodsodset->setDropOption(edropOption);
			ma_prodsodset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodsodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumREFSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("REFSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<REFSET> refset(new REFSET());
			refset->open(sourceDSN, targetDSN);
			refset->setRepositoryString(builder->getEnvyConnectionString());
			refset->setProfileName(profileName);
			refset->setReplicationOption(eReplicationOption);
			refset->setDropOption(edropOption);
			refset->setOdbcAttributes(builder->getOdbcAttributes());
			refset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INDSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INDSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INDSPISET> ma_indspiset(new MA_INDSPISET());
			ma_indspiset->open(sourceDSN, targetDSN);
			ma_indspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_indspiset->setProfileName(profileName);
			ma_indspiset->setReplicationOption(eReplicationOption);
			ma_indspiset->setDropOption(edropOption);
			ma_indspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_indspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumLOTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("LOTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<LOTREC> lotrec(new LOTREC());
			lotrec->open(sourceDSN, targetDSN);
			lotrec->setRepositoryString(builder->getEnvyConnectionString());
			lotrec->setProfileName(profileName);
			lotrec->setReplicationOption(eReplicationOption);
			lotrec->setDropOption(edropOption);
			lotrec->setOdbcAttributes(builder->getOdbcAttributes());
			lotrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumINVHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("INVHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<INVHSHSET> invhshset(new INVHSHSET());
			invhshset->open(sourceDSN, targetDSN);
			invhshset->setRepositoryString(builder->getEnvyConnectionString());
			invhshset->setProfileName(profileName);
			invhshset->setReplicationOption(eReplicationOption);
			invhshset->setDropOption(edropOption);
			invhshset->setOdbcAttributes(builder->getOdbcAttributes());
			invhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUOHPRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUOHPRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUOHPRTSET> ma_quohprtset(new MA_QUOHPRTSET());
			ma_quohprtset->open(sourceDSN, targetDSN);
			ma_quohprtset->setRepositoryString(builder->getEnvyConnectionString());
			ma_quohprtset->setProfileName(profileName);
			ma_quohprtset->setReplicationOption(eReplicationOption);
			ma_quohprtset->setDropOption(edropOption);
			ma_quohprtset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quohprtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CTERREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CTERREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CTERREC> ma_cterrec(new MA_CTERREC());
			ma_cterrec->open(sourceDSN, targetDSN);
			ma_cterrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_cterrec->setProfileName(profileName);
			ma_cterrec->setReplicationOption(eReplicationOption);
			ma_cterrec->setDropOption(edropOption);
			ma_cterrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cterrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PAKPRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PAKPRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PAKPRTSET> ma_pakprtset(new MA_PAKPRTSET());
			ma_pakprtset->open(sourceDSN, targetDSN);
			ma_pakprtset->setRepositoryString(builder->getEnvyConnectionString());
			ma_pakprtset->setProfileName(profileName);
			ma_pakprtset->setReplicationOption(eReplicationOption);
			ma_pakprtset->setDropOption(edropOption);
			ma_pakprtset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_pakprtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRHPRDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRHPRDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRHPRDSET> prhprdset(new PRHPRDSET());
			prhprdset->open(sourceDSN, targetDSN);
			prhprdset->setRepositoryString(builder->getEnvyConnectionString());
			prhprdset->setProfileName(profileName);
			prhprdset->setReplicationOption(eReplicationOption);
			prhprdset->setDropOption(edropOption);
			prhprdset->setOdbcAttributes(builder->getOdbcAttributes());
			prhprdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMSCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MSCREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MSCREC> mscrec(new MSCREC());
			mscrec->open(sourceDSN, targetDSN);
			mscrec->setRepositoryString(builder->getEnvyConnectionString());
			mscrec->setProfileName(profileName);
			mscrec->setReplicationOption(eReplicationOption);
			mscrec->setDropOption(edropOption);
			mscrec->setOdbcAttributes(builder->getOdbcAttributes());
			mscrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWOHMISSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WOHMISSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WOHMISSET> wohmisset(new WOHMISSET());
			wohmisset->open(sourceDSN, targetDSN);
			wohmisset->setRepositoryString(builder->getEnvyConnectionString());
			wohmisset->setProfileName(profileName);
			wohmisset->setReplicationOption(eReplicationOption);
			wohmisset->setDropOption(edropOption);
			wohmisset->setOdbcAttributes(builder->getOdbcAttributes());
			wohmisset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PAYOR1099REC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PAYOR1099REC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PAYOR1099REC> ap_payor1099rec(new AP_PAYOR1099REC());
			ap_payor1099rec->open(sourceDSN, targetDSN);
			ap_payor1099rec->setRepositoryString(builder->getEnvyConnectionString());
			ap_payor1099rec->setProfileName(profileName);
			ap_payor1099rec->setReplicationOption(eReplicationOption);
			ap_payor1099rec->setDropOption(edropOption);
			ap_payor1099rec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_payor1099rec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_DMHLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_DMHLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_DMHLREC> ma_dmhlrec(new MA_DMHLREC());
			ma_dmhlrec->open(sourceDSN, targetDSN);
			ma_dmhlrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_dmhlrec->setProfileName(profileName);
			ma_dmhlrec->setReplicationOption(eReplicationOption);
			ma_dmhlrec->setDropOption(edropOption);
			ma_dmhlrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_dmhlrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCCSRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CCSRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CCSRTSET> ccsrtset(new CCSRTSET());
			ccsrtset->open(sourceDSN, targetDSN);
			ccsrtset->setRepositoryString(builder->getEnvyConnectionString());
			ccsrtset->setProfileName(profileName);
			ccsrtset->setReplicationOption(eReplicationOption);
			ccsrtset->setDropOption(edropOption);
			ccsrtset->setOdbcAttributes(builder->getOdbcAttributes());
			ccsrtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCODHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CODHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CODHSHSET> codhshset(new CODHSHSET());
			codhshset->open(sourceDSN, targetDSN);
			codhshset->setRepositoryString(builder->getEnvyConnectionString());
			codhshset->setProfileName(profileName);
			codhshset->setReplicationOption(eReplicationOption);
			codhshset->setDropOption(edropOption);
			codhshset->setOdbcAttributes(builder->getOdbcAttributes());
			codhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RCTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RCTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RCTREC> ap_rctrec(new AP_RCTREC());
			ap_rctrec->open(sourceDSN, targetDSN);
			ap_rctrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_rctrec->setProfileName(profileName);
			ap_rctrec->setReplicationOption(eReplicationOption);
			ap_rctrec->setDropOption(edropOption);
			ap_rctrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_rctrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_REACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_REACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_REACCTSET> gl_reacctset(new GL_REACCTSET());
			gl_reacctset->open(sourceDSN, targetDSN);
			gl_reacctset->setRepositoryString(builder->getEnvyConnectionString());
			gl_reacctset->setProfileName(profileName);
			gl_reacctset->setReplicationOption(eReplicationOption);
			gl_reacctset->setDropOption(edropOption);
			gl_reacctset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_reacctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_GLCTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_GLCTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_GLCTHSHSET> ma_glcthshset(new MA_GLCTHSHSET());
			ma_glcthshset->open(sourceDSN, targetDSN);
			ma_glcthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_glcthshset->setProfileName(profileName);
			ma_glcthshset->setReplicationOption(eReplicationOption);
			ma_glcthshset->setDropOption(edropOption);
			ma_glcthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_glcthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_TPENTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_TPENTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_TPENTSET> ed_tpentset(new ED_TPENTSET());
			ed_tpentset->open(sourceDSN, targetDSN);
			ed_tpentset->setRepositoryString(builder->getEnvyConnectionString());
			ed_tpentset->setProfileName(profileName);
			ed_tpentset->setReplicationOption(eReplicationOption);
			ed_tpentset->setDropOption(edropOption);
			ed_tpentset->setOdbcAttributes(builder->getOdbcAttributes());
			ed_tpentset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_GLPTTABSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_GLPTTABSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_GLPTTABSET> ma_glpttabset(new MA_GLPTTABSET());
			ma_glpttabset->open(sourceDSN, targetDSN);
			ma_glpttabset->setRepositoryString(builder->getEnvyConnectionString());
			ma_glpttabset->setProfileName(profileName);
			ma_glpttabset->setReplicationOption(eReplicationOption);
			ma_glpttabset->setDropOption(edropOption);
			ma_glpttabset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_glpttabset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumDFAHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("DFAHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<DFAHSHSET> dfahshset(new DFAHSHSET());
			dfahshset->open(sourceDSN, targetDSN);
			dfahshset->setRepositoryString(builder->getEnvyConnectionString());
			dfahshset->setProfileName(profileName);
			dfahshset->setReplicationOption(eReplicationOption);
			dfahshset->setDropOption(edropOption);
			dfahshset->setOdbcAttributes(builder->getOdbcAttributes());
			dfahshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ACCT_NREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ACCT_NREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ACCT_NREC> gl_acct_nrec(new GL_ACCT_NREC());
			gl_acct_nrec->open(sourceDSN, targetDSN);
			gl_acct_nrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_acct_nrec->setProfileName(profileName);
			gl_acct_nrec->setReplicationOption(eReplicationOption);
			gl_acct_nrec->setDropOption(edropOption);
			gl_acct_nrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_acct_nrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFSCCALREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FSCCALREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FSCCALREC> fsccalrec(new FSCCALREC());
			fsccalrec->open(sourceDSN, targetDSN);
			fsccalrec->setRepositoryString(builder->getEnvyConnectionString());
			fsccalrec->setProfileName(profileName);
			fsccalrec->setReplicationOption(eReplicationOption);
			fsccalrec->setDropOption(edropOption);
			fsccalrec->setOdbcAttributes(builder->getOdbcAttributes());
			fsccalrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCDPLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CDPLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CDPLREC> cdplrec(new CDPLREC());
			cdplrec->open(sourceDSN, targetDSN);
			cdplrec->setRepositoryString(builder->getEnvyConnectionString());
			cdplrec->setProfileName(profileName);
			cdplrec->setReplicationOption(eReplicationOption);
			cdplrec->setDropOption(edropOption);
			cdplrec->setOdbcAttributes(builder->getOdbcAttributes());
			cdplrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RCTSET> ap_rctset(new AP_RCTSET());
			ap_rctset->open(sourceDSN, targetDSN);
			ap_rctset->setRepositoryString(builder->getEnvyConnectionString());
			ap_rctset->setProfileName(profileName);
			ap_rctset->setReplicationOption(eReplicationOption);
			ap_rctset->setDropOption(edropOption);
			ap_rctset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_rctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRTGTRKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RTGTRKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RTGTRKSET> rtgtrkset(new RTGTRKSET());
			rtgtrkset->open(sourceDSN, targetDSN);
			rtgtrkset->setRepositoryString(builder->getEnvyConnectionString());
			rtgtrkset->setProfileName(profileName);
			rtgtrkset->setReplicationOption(eReplicationOption);
			rtgtrkset->setDropOption(edropOption);
			rtgtrkset->setOdbcAttributes(builder->getOdbcAttributes());
			rtgtrkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCDLCDASET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CDLCDASET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CDLCDASET> cdlcdaset(new CDLCDASET());
			cdlcdaset->open(sourceDSN, targetDSN);
			cdlcdaset->setRepositoryString(builder->getEnvyConnectionString());
			cdlcdaset->setProfileName(profileName);
			cdlcdaset->setReplicationOption(eReplicationOption);
			cdlcdaset->setDropOption(edropOption);
			cdlcdaset->setOdbcAttributes(builder->getOdbcAttributes());
			cdlcdaset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_STATETXSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_STATETXSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_STATETXSET> ma_statetxset(new MA_STATETXSET());
			ma_statetxset->open(sourceDSN, targetDSN);
			ma_statetxset->setRepositoryString(builder->getEnvyConnectionString());
			ma_statetxset->setProfileName(profileName);
			ma_statetxset->setReplicationOption(eReplicationOption);
			ma_statetxset->setDropOption(edropOption);
			ma_statetxset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_statetxset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHHSHDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHHSHDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHHSHDSET> ma_shhshdset(new MA_SHHSHDSET());
			ma_shhshdset->open(sourceDSN, targetDSN);
			ma_shhshdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shhshdset->setProfileName(profileName);
			ma_shhshdset->setReplicationOption(eReplicationOption);
			ma_shhshdset->setDropOption(edropOption);
			ma_shhshdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shhshdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumTOOREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("TOOREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<TOOREC> toorec(new TOOREC());
			toorec->open(sourceDSN, targetDSN);
			toorec->setRepositoryString(builder->getEnvyConnectionString());
			toorec->setProfileName(profileName);
			toorec->setReplicationOption(eReplicationOption);
			toorec->setDropOption(edropOption);
			toorec->setOdbcAttributes(builder->getOdbcAttributes());
			toorec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTPCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTPCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTPCSET> actpcset(new ACTPCSET());
			actpcset->open(sourceDSN, targetDSN);
			actpcset->setRepositoryString(builder->getEnvyConnectionString());
			actpcset->setProfileName(profileName);
			actpcset->setReplicationOption(eReplicationOption);
			actpcset->setDropOption(edropOption);
			actpcset->setOdbcAttributes(builder->getOdbcAttributes());
			actpcset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PAYTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PAYTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PAYTREC> ma_paytrec(new MA_PAYTREC());
			ma_paytrec->open(sourceDSN, targetDSN);
			ma_paytrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_paytrec->setProfileName(profileName);
			ma_paytrec->setReplicationOption(eReplicationOption);
			ma_paytrec->setDropOption(edropOption);
			ma_paytrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_paytrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_APVNDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_APVNDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_APVNDSET> ap_apvndset(new AP_APVNDSET());
			ap_apvndset->open(sourceDSN, targetDSN);
			ap_apvndset->setRepositoryString(builder->getEnvyConnectionString());
			ap_apvndset->setProfileName(profileName);
			ap_apvndset->setReplicationOption(eReplicationOption);
			ap_apvndset->setDropOption(edropOption);
			ap_apvndset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_apvndset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRTDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RTDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RTDSET> rtdset(new RTDSET());
			rtdset->open(sourceDSN, targetDSN);
			rtdset->setRepositoryString(builder->getEnvyConnectionString());
			rtdset->setProfileName(profileName);
			rtdset->setReplicationOption(eReplicationOption);
			rtdset->setDropOption(edropOption);
			rtdset->setOdbcAttributes(builder->getOdbcAttributes());
			rtdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHSPNLSET> ma_sohspnlset(new MA_SOHSPNLSET());
			ma_sohspnlset->open(sourceDSN, targetDSN);
			ma_sohspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohspnlset->setProfileName(profileName);
			ma_sohspnlset->setReplicationOption(eReplicationOption);
			ma_sohspnlset->setDropOption(edropOption);
			ma_sohspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTRQDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTRQDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTRQDSET> prtrqdset(new PRTRQDSET());
			prtrqdset->open(sourceDSN, targetDSN);
			prtrqdset->setRepositoryString(builder->getEnvyConnectionString());
			prtrqdset->setProfileName(profileName);
			prtrqdset->setReplicationOption(eReplicationOption);
			prtrqdset->setDropOption(edropOption);
			prtrqdset->setOdbcAttributes(builder->getOdbcAttributes());
			prtrqdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTMOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTMOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTMOSET> actmoset(new ACTMOSET());
			actmoset->open(sourceDSN, targetDSN);
			actmoset->setRepositoryString(builder->getEnvyConnectionString());
			actmoset->setProfileName(profileName);
			actmoset->setReplicationOption(eReplicationOption);
			actmoset->setDropOption(edropOption);
			actmoset->setOdbcAttributes(builder->getOdbcAttributes());
			actmoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PLTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PLTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PLTREC> ap_pltrec(new AP_PLTREC());
			ap_pltrec->open(sourceDSN, targetDSN);
			ap_pltrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_pltrec->setProfileName(profileName);
			ap_pltrec->setReplicationOption(eReplicationOption);
			ap_pltrec->setDropOption(edropOption);
			ap_pltrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pltrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_LINKHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_LINKHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_LINKHSHSET> gl_linkhshset(new GL_LINKHSHSET());
			gl_linkhshset->open(sourceDSN, targetDSN);
			gl_linkhshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_linkhshset->setProfileName(profileName);
			gl_linkhshset->setReplicationOption(eReplicationOption);
			gl_linkhshset->setDropOption(edropOption);
			gl_linkhshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_linkhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PMTNOTTRANSSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PMTNOTTRANSSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PMTNOTTRANSSET> ap_pmtnottransset(new AP_PMTNOTTRANSSET());
			ap_pmtnottransset->open(sourceDSN, targetDSN);
			ap_pmtnottransset->setRepositoryString(builder->getEnvyConnectionString());
			ap_pmtnottransset->setProfileName(profileName);
			ap_pmtnottransset->setReplicationOption(eReplicationOption);
			ap_pmtnottransset->setDropOption(edropOption);
			ap_pmtnottransset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pmtnottransset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VND1099SET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VND1099SET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VND1099SET> ap_vnd1099set(new AP_VND1099SET());
			ap_vnd1099set->open(sourceDSN, targetDSN);
			ap_vnd1099set->setRepositoryString(builder->getEnvyConnectionString());
			ap_vnd1099set->setProfileName(profileName);
			ap_vnd1099set->setReplicationOption(eReplicationOption);
			ap_vnd1099set->setDropOption(edropOption);
			ap_vnd1099set->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vnd1099set->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PROJREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PROJREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PROJREC> ma_projrec(new MA_PROJREC());
			ma_projrec->open(sourceDSN, targetDSN);
			ma_projrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_projrec->setProfileName(profileName);
			ma_projrec->setReplicationOption(eReplicationOption);
			ma_projrec->setDropOption(edropOption);
			ma_projrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_projrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_REMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_REMREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_REMREC> ma_remrec(new MA_REMREC());
			ma_remrec->open(sourceDSN, targetDSN);
			ma_remrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_remrec->setProfileName(profileName);
			ma_remrec->setReplicationOption(eReplicationOption);
			ma_remrec->setDropOption(edropOption);
			ma_remrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_remrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_POHVCHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_POHVCHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_POHVCHSET> ap_pohvchset(new AP_POHVCHSET());
			ap_pohvchset->open(sourceDSN, targetDSN);
			ap_pohvchset->setRepositoryString(builder->getEnvyConnectionString());
			ap_pohvchset->setProfileName(profileName);
			ap_pohvchset->setReplicationOption(eReplicationOption);
			ap_pohvchset->setDropOption(edropOption);
			ap_pohvchset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pohvchset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumSODINTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("SODINTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<SODINTSET> sodintset(new SODINTSET());
			sodintset->open(sourceDSN, targetDSN);
			sodintset->setRepositoryString(builder->getEnvyConnectionString());
			sodintset->setProfileName(profileName);
			sodintset->setReplicationOption(eReplicationOption);
			sodintset->setDropOption(edropOption);
			sodintset->setOdbcAttributes(builder->getOdbcAttributes());
			sodintset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CSTSET> cstset(new CSTSET());
			cstset->open(sourceDSN, targetDSN);
			cstset->setRepositoryString(builder->getEnvyConnectionString());
			cstset->setProfileName(profileName);
			cstset->setReplicationOption(eReplicationOption);
			cstset->setDropOption(edropOption);
			cstset->setOdbcAttributes(builder->getOdbcAttributes());
			cstset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SODSHDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SODSHDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SODSHDSET> ma_sodshdset(new MA_SODSHDSET());
			ma_sodshdset->open(sourceDSN, targetDSN);
			ma_sodshdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sodshdset->setProfileName(profileName);
			ma_sodshdset->setReplicationOption(eReplicationOption);
			ma_sodshdset->setDropOption(edropOption);
			ma_sodshdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sodshdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFORREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FORREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FORREC> forrec(new FORREC());
			forrec->open(sourceDSN, targetDSN);
			forrec->setRepositoryString(builder->getEnvyConnectionString());
			forrec->setProfileName(profileName);
			forrec->setReplicationOption(eReplicationOption);
			forrec->setDropOption(edropOption);
			forrec->setOdbcAttributes(builder->getOdbcAttributes());
			forrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumBOMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("BOMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<BOMSET> bomset(new BOMSET());
			bomset->open(sourceDSN, targetDSN);
			bomset->setRepositoryString(builder->getEnvyConnectionString());
			bomset->setProfileName(profileName);
			bomset->setReplicationOption(eReplicationOption);
			bomset->setDropOption(edropOption);
			bomset->setOdbcAttributes(builder->getOdbcAttributes());
			bomset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumTRDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("TRDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<TRDREC> trdrec(new TRDREC());
			trdrec->open(sourceDSN, targetDSN);
			trdrec->setRepositoryString(builder->getEnvyConnectionString());
			trdrec->setProfileName(profileName);
			trdrec->setReplicationOption(eReplicationOption);
			trdrec->setDropOption(edropOption);
			trdrec->setOdbcAttributes(builder->getOdbcAttributes());
			trdrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRTGTWUSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RTGTWUSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RTGTWUSET> rtgtwuset(new RTGTWUSET());
			rtgtwuset->open(sourceDSN, targetDSN);
			rtgtwuset->setRepositoryString(builder->getEnvyConnectionString());
			rtgtwuset->setProfileName(profileName);
			rtgtwuset->setReplicationOption(eReplicationOption);
			rtgtwuset->setDropOption(edropOption);
			rtgtwuset->setOdbcAttributes(builder->getOdbcAttributes());
			rtgtwuset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PARTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PARTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PARTHSHSET> ma_parthshset(new MA_PARTHSHSET());
			ma_parthshset->open(sourceDSN, targetDSN);
			ma_parthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_parthshset->setProfileName(profileName);
			ma_parthshset->setReplicationOption(eReplicationOption);
			ma_parthshset->setDropOption(edropOption);
			ma_parthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_parthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOHPRNTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POHPRNTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POHPRNTSET> pohprntset(new POHPRNTSET());
			pohprntset->open(sourceDSN, targetDSN);
			pohprntset->setRepositoryString(builder->getEnvyConnectionString());
			pohprntset->setProfileName(profileName);
			pohprntset->setReplicationOption(eReplicationOption);
			pohprntset->setDropOption(edropOption);
			pohprntset->setOdbcAttributes(builder->getOdbcAttributes());
			pohprntset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHPSREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHPSREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHPSREC> ma_shpsrec(new MA_SHPSREC());
			ma_shpsrec->open(sourceDSN, targetDSN);
			ma_shpsrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_shpsrec->setProfileName(profileName);
			ma_shpsrec->setReplicationOption(eReplicationOption);
			ma_shpsrec->setDropOption(edropOption);
			ma_shpsrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shpsrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_STGREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_STGREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_STGREC> ma_stgrec(new MA_STGREC());
			ma_stgrec->open(sourceDSN, targetDSN);
			ma_stgrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_stgrec->setProfileName(profileName);
			ma_stgrec->setReplicationOption(eReplicationOption);
			ma_stgrec->setDropOption(edropOption);
			ma_stgrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_stgrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMRLHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MRLHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MRLHSHSET> mrlhshset(new MRLHSHSET());
			mrlhshset->open(sourceDSN, targetDSN);
			mrlhshset->setRepositoryString(builder->getEnvyConnectionString());
			mrlhshset->setProfileName(profileName);
			mrlhshset->setReplicationOption(eReplicationOption);
			mrlhshset->setDropOption(edropOption);
			mrlhshset->setOdbcAttributes(builder->getOdbcAttributes());
			mrlhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PAYOR1099HSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PAYOR1099HSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PAYOR1099HSHSET> ap_payor1099hshset(new AP_PAYOR1099HSHSET());
			ap_payor1099hshset->open(sourceDSN, targetDSN);
			ap_payor1099hshset->setRepositoryString(builder->getEnvyConnectionString());
			ap_payor1099hshset->setProfileName(profileName);
			ap_payor1099hshset->setReplicationOption(eReplicationOption);
			ap_payor1099hshset->setDropOption(edropOption);
			ap_payor1099hshset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_payor1099hshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FPBATSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FPBATSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FPBATSET> gl_fpbatset(new GL_FPBATSET());
			gl_fpbatset->open(sourceDSN, targetDSN);
			gl_fpbatset->setRepositoryString(builder->getEnvyConnectionString());
			gl_fpbatset->setProfileName(profileName);
			gl_fpbatset->setReplicationOption(eReplicationOption);
			gl_fpbatset->setDropOption(edropOption);
			gl_fpbatset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fpbatset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTCDLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTCDLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTCDLSET> prtcdlset(new PRTCDLSET());
			prtcdlset->open(sourceDSN, targetDSN);
			prtcdlset->setRepositoryString(builder->getEnvyConnectionString());
			prtcdlset->setProfileName(profileName);
			prtcdlset->setReplicationOption(eReplicationOption);
			prtcdlset->setDropOption(edropOption);
			prtcdlset->setOdbcAttributes(builder->getOdbcAttributes());
			prtcdlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_FRTTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_FRTTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_FRTTHSHSET> ma_frtthshset(new MA_FRTTHSHSET());
			ma_frtthshset->open(sourceDSN, targetDSN);
			ma_frtthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_frtthshset->setProfileName(profileName);
			ma_frtthshset->setReplicationOption(eReplicationOption);
			ma_frtthshset->setDropOption(edropOption);
			ma_frtthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_frtthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMHPRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMHPRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMHPRTSET> ma_cmhprtset(new MA_CMHPRTSET());
			ma_cmhprtset->open(sourceDSN, targetDSN);
			ma_cmhprtset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmhprtset->setProfileName(profileName);
			ma_cmhprtset->setReplicationOption(eReplicationOption);
			ma_cmhprtset->setDropOption(edropOption);
			ma_cmhprtset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmhprtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_BATCHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_BATCHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_BATCHREC> gl_batchrec(new GL_BATCHREC());
			gl_batchrec->open(sourceDSN, targetDSN);
			gl_batchrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_batchrec->setProfileName(profileName);
			gl_batchrec->setReplicationOption(eReplicationOption);
			gl_batchrec->setDropOption(edropOption);
			gl_batchrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_batchrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_POSTSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_POSTSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_POSTSPISET> ma_postspiset(new MA_POSTSPISET());
			ma_postspiset->open(sourceDSN, targetDSN);
			ma_postspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_postspiset->setProfileName(profileName);
			ma_postspiset->setReplicationOption(eReplicationOption);
			ma_postspiset->setDropOption(edropOption);
			ma_postspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_postspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CPOSOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CPOSOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CPOSOHSET> ma_cposohset(new MA_CPOSOHSET());
			ma_cposohset->open(sourceDSN, targetDSN);
			ma_cposohset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cposohset->setProfileName(profileName);
			ma_cposohset->setReplicationOption(eReplicationOption);
			ma_cposohset->setDropOption(edropOption);
			ma_cposohset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cposohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_USRREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_USRREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_USRREC> ma_usrrec(new MA_USRREC());
			ma_usrrec->open(sourceDSN, targetDSN);
			ma_usrrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_usrrec->setProfileName(profileName);
			ma_usrrec->setReplicationOption(eReplicationOption);
			ma_usrrec->setDropOption(edropOption);
			ma_usrrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_usrrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXRTTXLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXRTTXLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXRTTXLSET> ma_txrttxlset(new MA_TXRTTXLSET());
			ma_txrttxlset->open(sourceDSN, targetDSN);
			ma_txrttxlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_txrttxlset->setProfileName(profileName);
			ma_txrttxlset->setReplicationOption(eReplicationOption);
			ma_txrttxlset->setDropOption(edropOption);
			ma_txrttxlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txrttxlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUODREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUODREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUODREC> ma_quodrec(new MA_QUODREC());
			ma_quodrec->open(sourceDSN, targetDSN);
			ma_quodrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_quodrec->setProfileName(profileName);
			ma_quodrec->setReplicationOption(eReplicationOption);
			ma_quodrec->setDropOption(edropOption);
			ma_quodrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quodrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWOHMSCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WOHMSCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WOHMSCSET> wohmscset(new WOHMSCSET());
			wohmscset->open(sourceDSN, targetDSN);
			wohmscset->setRepositoryString(builder->getEnvyConnectionString());
			wohmscset->setProfileName(profileName);
			wohmscset->setReplicationOption(eReplicationOption);
			wohmscset->setDropOption(edropOption);
			wohmscset->setOdbcAttributes(builder->getOdbcAttributes());
			wohmscset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CIAAPCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CIAAPCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CIAAPCSET> ma_ciaapcset(new MA_CIAAPCSET());
			ma_ciaapcset->open(sourceDSN, targetDSN);
			ma_ciaapcset->setRepositoryString(builder->getEnvyConnectionString());
			ma_ciaapcset->setProfileName(profileName);
			ma_ciaapcset->setReplicationOption(eReplicationOption);
			ma_ciaapcset->setDropOption(edropOption);
			ma_ciaapcset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_ciaapcset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILCTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILCTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILCTHSHSET> ma_bilcthshset(new MA_BILCTHSHSET());
			ma_bilcthshset->open(sourceDSN, targetDSN);
			ma_bilcthshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilcthshset->setProfileName(profileName);
			ma_bilcthshset->setReplicationOption(eReplicationOption);
			ma_bilcthshset->setDropOption(edropOption);
			ma_bilcthshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilcthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SPFHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SPFHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SPFHSHSET> ma_spfhshset(new MA_SPFHSHSET());
			ma_spfhshset->open(sourceDSN, targetDSN);
			ma_spfhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_spfhshset->setProfileName(profileName);
			ma_spfhshset->setReplicationOption(eReplicationOption);
			ma_spfhshset->setDropOption(edropOption);
			ma_spfhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_spfhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXTREC> ma_txtrec(new MA_TXTREC());
			ma_txtrec->open(sourceDSN, targetDSN);
			ma_txtrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_txtrec->setProfileName(profileName);
			ma_txtrec->setReplicationOption(eReplicationOption);
			ma_txtrec->setDropOption(edropOption);
			ma_txtrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txtrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMHCMDMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMHCMDMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMHCMDMSET> ma_cmhcmdmset(new MA_CMHCMDMSET());
			ma_cmhcmdmset->open(sourceDSN, targetDSN);
			ma_cmhcmdmset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmhcmdmset->setProfileName(profileName);
			ma_cmhcmdmset->setReplicationOption(eReplicationOption);
			ma_cmhcmdmset->setDropOption(edropOption);
			ma_cmhcmdmset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmhcmdmset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRTSTGPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRTSTGPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRTSTGPSET> ma_prtstgpset(new MA_PRTSTGPSET());
			ma_prtstgpset->open(sourceDSN, targetDSN);
			ma_prtstgpset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prtstgpset->setProfileName(profileName);
			ma_prtstgpset->setReplicationOption(eReplicationOption);
			ma_prtstgpset->setDropOption(edropOption);
			ma_prtstgpset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prtstgpset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_BILSODSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_BILSODSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_BILSODSET> ma_bilsodset(new MA_BILSODSET());
			ma_bilsodset->open(sourceDSN, targetDSN);
			ma_bilsodset->setRepositoryString(builder->getEnvyConnectionString());
			ma_bilsodset->setProfileName(profileName);
			ma_bilsodset->setReplicationOption(eReplicationOption);
			ma_bilsodset->setDropOption(edropOption);
			ma_bilsodset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_bilsodset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_ACCTTYPESET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_ACCTTYPESET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_ACCTTYPESET> ap_accttypeset(new AP_ACCTTYPESET());
			ap_accttypeset->open(sourceDSN, targetDSN);
			ap_accttypeset->setRepositoryString(builder->getEnvyConnectionString());
			ap_accttypeset->setProfileName(profileName);
			ap_accttypeset->setReplicationOption(eReplicationOption);
			ap_accttypeset->setDropOption(edropOption);
			ap_accttypeset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_accttypeset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SAMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SAMREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SAMREC> ma_samrec(new MA_SAMREC());
			ma_samrec->open(sourceDSN, targetDSN);
			ma_samrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_samrec->setProfileName(profileName);
			ma_samrec->setReplicationOption(eReplicationOption);
			ma_samrec->setDropOption(edropOption);
			ma_samrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_samrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumDESREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("DESREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<DESREC> desrec(new DESREC());
			desrec->open(sourceDSN, targetDSN);
			desrec->setRepositoryString(builder->getEnvyConnectionString());
			desrec->setProfileName(profileName);
			desrec->setReplicationOption(eReplicationOption);
			desrec->setDropOption(edropOption);
			desrec->setOdbcAttributes(builder->getOdbcAttributes());
			desrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCOHCONSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("COHCONSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<COHCONSET> cohconset(new COHCONSET());
			cohconset->open(sourceDSN, targetDSN);
			cohconset->setRepositoryString(builder->getEnvyConnectionString());
			cohconset->setProfileName(profileName);
			cohconset->setReplicationOption(eReplicationOption);
			cohconset->setDropOption(edropOption);
			cohconset->setOdbcAttributes(builder->getOdbcAttributes());
			cohconset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumENDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ENDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ENDREC> endrec(new ENDREC());
			endrec->open(sourceDSN, targetDSN);
			endrec->setRepositoryString(builder->getEnvyConnectionString());
			endrec->setProfileName(profileName);
			endrec->setReplicationOption(eReplicationOption);
			endrec->setDropOption(edropOption);
			endrec->setOdbcAttributes(builder->getOdbcAttributes());
			endrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWARHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WARHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WARHSHSET> warhshset(new WARHSHSET());
			warhshset->open(sourceDSN, targetDSN);
			warhshset->setRepositoryString(builder->getEnvyConnectionString());
			warhshset->setProfileName(profileName);
			warhshset->setReplicationOption(eReplicationOption);
			warhshset->setDropOption(edropOption);
			warhshset->setOdbcAttributes(builder->getOdbcAttributes());
			warhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PNOTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PNOTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PNOTREC> ma_pnotrec(new MA_PNOTREC());
			ma_pnotrec->open(sourceDSN, targetDSN);
			ma_pnotrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_pnotrec->setProfileName(profileName);
			ma_pnotrec->setReplicationOption(eReplicationOption);
			ma_pnotrec->setDropOption(edropOption);
			ma_pnotrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_pnotrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWOHTRKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WOHTRKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WOHTRKSET> wohtrkset(new WOHTRKSET());
			wohtrkset->open(sourceDSN, targetDSN);
			wohtrkset->setRepositoryString(builder->getEnvyConnectionString());
			wohtrkset->setProfileName(profileName);
			wohtrkset->setReplicationOption(eReplicationOption);
			wohtrkset->setDropOption(edropOption);
			wohtrkset->setOdbcAttributes(builder->getOdbcAttributes());
			wohtrkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SPNLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SPNLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SPNLREC> ma_spnlrec(new MA_SPNLREC());
			ma_spnlrec->open(sourceDSN, targetDSN);
			ma_spnlrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_spnlrec->setProfileName(profileName);
			ma_spnlrec->setReplicationOption(eReplicationOption);
			ma_spnlrec->setDropOption(edropOption);
			ma_spnlrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_spnlrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCRMTRSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CRMTRSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CRMTRSET> crmtrset(new CRMTRSET());
			crmtrset->open(sourceDSN, targetDSN);
			crmtrset->setRepositoryString(builder->getEnvyConnectionString());
			crmtrset->setProfileName(profileName);
			crmtrset->setReplicationOption(eReplicationOption);
			crmtrset->setDropOption(edropOption);
			crmtrset->setOdbcAttributes(builder->getOdbcAttributes());
			crmtrset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CHGHCHGDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CHGHCHGDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CHGHCHGDSET> ma_chghchgdset(new MA_CHGHCHGDSET());
			ma_chghchgdset->open(sourceDSN, targetDSN);
			ma_chghchgdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_chghchgdset->setProfileName(profileName);
			ma_chghchgdset->setReplicationOption(eReplicationOption);
			ma_chghchgdset->setDropOption(edropOption);
			ma_chghchgdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_chghchgdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ABUDHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ABUDHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ABUDHSHSET> gl_abudhshset(new GL_ABUDHSHSET());
			gl_abudhshset->open(sourceDSN, targetDSN);
			gl_abudhshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_abudhshset->setProfileName(profileName);
			gl_abudhshset->setReplicationOption(eReplicationOption);
			gl_abudhshset->setDropOption(edropOption);
			gl_abudhshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_abudhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumDFAREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("DFAREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<DFAREC> dfarec(new DFAREC());
			dfarec->open(sourceDSN, targetDSN);
			dfarec->setRepositoryString(builder->getEnvyConnectionString());
			dfarec->setProfileName(profileName);
			dfarec->setReplicationOption(eReplicationOption);
			dfarec->setDropOption(edropOption);
			dfarec->setOdbcAttributes(builder->getOdbcAttributes());
			dfarec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTPUNSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTPUNSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTPUNSET> prtpunset(new PRTPUNSET());
			prtpunset->open(sourceDSN, targetDSN);
			prtpunset->setRepositoryString(builder->getEnvyConnectionString());
			prtpunset->setProfileName(profileName);
			prtpunset->setReplicationOption(eReplicationOption);
			prtpunset->setDropOption(edropOption);
			prtpunset->setOdbcAttributes(builder->getOdbcAttributes());
			prtpunset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHDSHDPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHDSHDPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHDSHDPSET> ma_shdshdpset(new MA_SHDSHDPSET());
			ma_shdshdpset->open(sourceDSN, targetDSN);
			ma_shdshdpset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shdshdpset->setProfileName(profileName);
			ma_shdshdpset->setReplicationOption(eReplicationOption);
			ma_shdshdpset->setDropOption(edropOption);
			ma_shdshdpset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shdshdpset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumEMPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("EMPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<EMPREC> emprec(new EMPREC());
			emprec->open(sourceDSN, targetDSN);
			emprec->setRepositoryString(builder->getEnvyConnectionString());
			emprec->setProfileName(profileName);
			emprec->setReplicationOption(eReplicationOption);
			emprec->setDropOption(edropOption);
			emprec->setOdbcAttributes(builder->getOdbcAttributes());
			emprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_PRDHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_PRDHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_PRDHSHSET> ed_prdhshset(new ED_PRDHSHSET());
			ed_prdhshset->open(sourceDSN, targetDSN);
			ed_prdhshset->setRepositoryString(builder->getEnvyConnectionString());
			ed_prdhshset->setProfileName(profileName);
			ed_prdhshset->setReplicationOption(eReplicationOption);
			ed_prdhshset->setDropOption(edropOption);
			ed_prdhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ed_prdhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMISREFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MISREFREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MISREFREC> misrefrec(new MISREFREC());
			misrefrec->open(sourceDSN, targetDSN);
			misrefrec->setRepositoryString(builder->getEnvyConnectionString());
			misrefrec->setProfileName(profileName);
			misrefrec->setReplicationOption(eReplicationOption);
			misrefrec->setDropOption(edropOption);
			misrefrec->setOdbcAttributes(builder->getOdbcAttributes());
			misrefrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumLOCLOTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("LOCLOTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<LOCLOTSET> loclotset(new LOCLOTSET());
			loclotset->open(sourceDSN, targetDSN);
			loclotset->setRepositoryString(builder->getEnvyConnectionString());
			loclotset->setProfileName(profileName);
			loclotset->setReplicationOption(eReplicationOption);
			loclotset->setDropOption(edropOption);
			loclotset->setOdbcAttributes(builder->getOdbcAttributes());
			loclotset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ACCTFASET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ACCTFASET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ACCTFASET> gl_acctfaset(new GL_ACCTFASET());
			gl_acctfaset->open(sourceDSN, targetDSN);
			gl_acctfaset->setRepositoryString(builder->getEnvyConnectionString());
			gl_acctfaset->setProfileName(profileName);
			gl_acctfaset->setReplicationOption(eReplicationOption);
			gl_acctfaset->setDropOption(edropOption);
			gl_acctfaset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_acctfaset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTVMCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTVMCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTVMCSET> prtvmcset(new PRTVMCSET());
			prtvmcset->open(sourceDSN, targetDSN);
			prtvmcset->setRepositoryString(builder->getEnvyConnectionString());
			prtvmcset->setProfileName(profileName);
			prtvmcset->setReplicationOption(eReplicationOption);
			prtvmcset->setDropOption(edropOption);
			prtvmcset->setOdbcAttributes(builder->getOdbcAttributes());
			prtvmcset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_USRHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_USRHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_USRHSHSET> ma_usrhshset(new MA_USRHSHSET());
			ma_usrhshset->open(sourceDSN, targetDSN);
			ma_usrhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_usrhshset->setProfileName(profileName);
			ma_usrhshset->setReplicationOption(eReplicationOption);
			ma_usrhshset->setDropOption(edropOption);
			ma_usrhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_usrhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumQOHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("QOHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<QOHREC> qohrec(new QOHREC());
			qohrec->open(sourceDSN, targetDSN);
			qohrec->setRepositoryString(builder->getEnvyConnectionString());
			qohrec->setProfileName(profileName);
			qohrec->setReplicationOption(eReplicationOption);
			qohrec->setDropOption(edropOption);
			qohrec->setOdbcAttributes(builder->getOdbcAttributes());
			qohrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RECPAYVCHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RECPAYVCHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RECPAYVCHSET> ap_recpayvchset(new AP_RECPAYVCHSET());
			ap_recpayvchset->open(sourceDSN, targetDSN);
			ap_recpayvchset->setRepositoryString(builder->getEnvyConnectionString());
			ap_recpayvchset->setProfileName(profileName);
			ap_recpayvchset->setReplicationOption(eReplicationOption);
			ap_recpayvchset->setDropOption(edropOption);
			ap_recpayvchset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_recpayvchset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_DLLINKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_DLLINKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_DLLINKSET> gl_dllinkset(new GL_DLLINKSET());
			gl_dllinkset->open(sourceDSN, targetDSN);
			gl_dllinkset->setRepositoryString(builder->getEnvyConnectionString());
			gl_dllinkset->setProfileName(profileName);
			gl_dllinkset->setReplicationOption(eReplicationOption);
			gl_dllinkset->setDropOption(edropOption);
			gl_dllinkset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_dllinkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SVINHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SVINHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SVINHREC> ma_svinhrec(new MA_SVINHREC());
			ma_svinhrec->open(sourceDSN, targetDSN);
			ma_svinhrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_svinhrec->setProfileName(profileName);
			ma_svinhrec->setReplicationOption(eReplicationOption);
			ma_svinhrec->setDropOption(edropOption);
			ma_svinhrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_svinhrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHCOMCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHCOMCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHCOMCSET> ma_inhcomcset(new MA_INHCOMCSET());
			ma_inhcomcset->open(sourceDSN, targetDSN);
			ma_inhcomcset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhcomcset->setProfileName(profileName);
			ma_inhcomcset->setReplicationOption(eReplicationOption);
			ma_inhcomcset->setDropOption(edropOption);
			ma_inhcomcset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhcomcset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumINDFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("INDFREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<INDFREC> indfrec(new INDFREC());
			indfrec->open(sourceDSN, targetDSN);
			indfrec->setRepositoryString(builder->getEnvyConnectionString());
			indfrec->setProfileName(profileName);
			indfrec->setReplicationOption(eReplicationOption);
			indfrec->setDropOption(edropOption);
			indfrec->setOdbcAttributes(builder->getOdbcAttributes());
			indfrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPODPOMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PODPOMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PODPOMSET> podpomset(new PODPOMSET());
			podpomset->open(sourceDSN, targetDSN);
			podpomset->setRepositoryString(builder->getEnvyConnectionString());
			podpomset->setProfileName(profileName);
			podpomset->setReplicationOption(eReplicationOption);
			podpomset->setDropOption(edropOption);
			podpomset->setOdbcAttributes(builder->getOdbcAttributes());
			podpomset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_TRREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_TRREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_TRREC> gl_trrec(new GL_TRREC());
			gl_trrec->open(sourceDSN, targetDSN);
			gl_trrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_trrec->setProfileName(profileName);
			gl_trrec->setReplicationOption(eReplicationOption);
			gl_trrec->setDropOption(edropOption);
			gl_trrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_trrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODREC> ma_prodrec(new MA_PRODREC());
			ma_prodrec->open(sourceDSN, targetDSN);
			ma_prodrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodrec->setProfileName(profileName);
			ma_prodrec->setReplicationOption(eReplicationOption);
			ma_prodrec->setDropOption(edropOption);
			ma_prodrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTRETSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTRETSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTRETSET> ma_acctretset(new MA_ACCTRETSET());
			ma_acctretset->open(sourceDSN, targetDSN);
			ma_acctretset->setRepositoryString(builder->getEnvyConnectionString());
			ma_acctretset->setProfileName(profileName);
			ma_acctretset->setReplicationOption(eReplicationOption);
			ma_acctretset->setDropOption(edropOption);
			ma_acctretset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_acctretset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PNOTVCHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PNOTVCHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PNOTVCHREC> ap_pnotvchrec(new AP_PNOTVCHREC());
			ap_pnotvchrec->open(sourceDSN, targetDSN);
			ap_pnotvchrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_pnotvchrec->setProfileName(profileName);
			ap_pnotvchrec->setReplicationOption(eReplicationOption);
			ap_pnotvchrec->setDropOption(edropOption);
			ap_pnotvchrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pnotvchrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumSODFAMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("SODFAMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<SODFAMSET> sodfamset(new SODFAMSET());
			sodfamset->open(sourceDSN, targetDSN);
			sodfamset->setRepositoryString(builder->getEnvyConnectionString());
			sodfamset->setProfileName(profileName);
			sodfamset->setReplicationOption(eReplicationOption);
			sodfamset->setDropOption(edropOption);
			sodfamset->setOdbcAttributes(builder->getOdbcAttributes());
			sodfamset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VTPSTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VTPSTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VTPSTREC> ap_vtpstrec(new AP_VTPSTREC());
			ap_vtpstrec->open(sourceDSN, targetDSN);
			ap_vtpstrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_vtpstrec->setProfileName(profileName);
			ap_vtpstrec->setReplicationOption(eReplicationOption);
			ap_vtpstrec->setDropOption(edropOption);
			ap_vtpstrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vtpstrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumSOHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("SOHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<SOHHSHSET> sohhshset(new SOHHSHSET());
			sohhshset->open(sourceDSN, targetDSN);
			sohhshset->setRepositoryString(builder->getEnvyConnectionString());
			sohhshset->setProfileName(profileName);
			sohhshset->setReplicationOption(eReplicationOption);
			sohhshset->setDropOption(edropOption);
			sohhshset->setOdbcAttributes(builder->getOdbcAttributes());
			sohhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRDREC> prdrec(new PRDREC());
			prdrec->open(sourceDSN, targetDSN);
			prdrec->setRepositoryString(builder->getEnvyConnectionString());
			prdrec->setProfileName(profileName);
			prdrec->setReplicationOption(eReplicationOption);
			prdrec->setDropOption(edropOption);
			prdrec->setOdbcAttributes(builder->getOdbcAttributes());
			prdrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_RE_DREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_RE_DREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_RE_DREC> gl_re_drec(new GL_RE_DREC());
			gl_re_drec->open(sourceDSN, targetDSN);
			gl_re_drec->setRepositoryString(builder->getEnvyConnectionString());
			gl_re_drec->setProfileName(profileName);
			gl_re_drec->setReplicationOption(eReplicationOption);
			gl_re_drec->setDropOption(edropOption);
			gl_re_drec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_re_drec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFLGHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FLGHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FLGHSHSET> flghshset(new FLGHSHSET());
			flghshset->open(sourceDSN, targetDSN);
			flghshset->setRepositoryString(builder->getEnvyConnectionString());
			flghshset->setProfileName(profileName);
			flghshset->setReplicationOption(eReplicationOption);
			flghshset->setDropOption(edropOption);
			flghshset->setOdbcAttributes(builder->getOdbcAttributes());
			flghshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ACCTRPTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ACCTRPTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ACCTRPTSET> gl_acctrptset(new GL_ACCTRPTSET());
			gl_acctrptset->open(sourceDSN, targetDSN);
			gl_acctrptset->setRepositoryString(builder->getEnvyConnectionString());
			gl_acctrptset->setProfileName(profileName);
			gl_acctrptset->setReplicationOption(eReplicationOption);
			gl_acctrptset->setDropOption(edropOption);
			gl_acctrptset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_acctrptset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CPOINHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CPOINHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CPOINHSET> ma_cpoinhset(new MA_CPOINHSET());
			ma_cpoinhset->open(sourceDSN, targetDSN);
			ma_cpoinhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cpoinhset->setProfileName(profileName);
			ma_cpoinhset->setReplicationOption(eReplicationOption);
			ma_cpoinhset->setDropOption(edropOption);
			ma_cpoinhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cpoinhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXRTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXRTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXRTREC> ma_txrtrec(new MA_TXRTREC());
			ma_txrtrec->open(sourceDSN, targetDSN);
			ma_txrtrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_txrtrec->setProfileName(profileName);
			ma_txrtrec->setReplicationOption(eReplicationOption);
			ma_txrtrec->setDropOption(edropOption);
			ma_txrtrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txrtrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMHSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMHSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMHSPISET> ma_cmhspiset(new MA_CMHSPISET());
			ma_cmhspiset->open(sourceDSN, targetDSN);
			ma_cmhspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmhspiset->setProfileName(profileName);
			ma_cmhspiset->setReplicationOption(eReplicationOption);
			ma_cmhspiset->setDropOption(edropOption);
			ma_cmhspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmhspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TXTXLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TXTXLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TXTXLSET> ma_txtxlset(new MA_TXTXLSET());
			ma_txtxlset->open(sourceDSN, targetDSN);
			ma_txtxlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_txtxlset->setProfileName(profileName);
			ma_txtxlset->setReplicationOption(eReplicationOption);
			ma_txtxlset->setDropOption(edropOption);
			ma_txtxlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_txtxlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTMCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTMCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTMCSET> actmcset(new ACTMCSET());
			actmcset->open(sourceDSN, targetDSN);
			actmcset->setRepositoryString(builder->getEnvyConnectionString());
			actmcset->setProfileName(profileName);
			actmcset->setReplicationOption(eReplicationOption);
			actmcset->setDropOption(edropOption);
			actmcset->setOdbcAttributes(builder->getOdbcAttributes());
			actmcset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_STERHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_STERHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_STERHSHSET> ma_sterhshset(new MA_STERHSHSET());
			ma_sterhshset->open(sourceDSN, targetDSN);
			ma_sterhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sterhshset->setProfileName(profileName);
			ma_sterhshset->setReplicationOption(eReplicationOption);
			ma_sterhshset->setDropOption(edropOption);
			ma_sterhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sterhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PAYPLTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PAYPLTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PAYPLTREC> ap_paypltrec(new AP_PAYPLTREC());
			ap_paypltrec->open(sourceDSN, targetDSN);
			ap_paypltrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_paypltrec->setProfileName(profileName);
			ap_paypltrec->setReplicationOption(eReplicationOption);
			ap_paypltrec->setDropOption(edropOption);
			ap_paypltrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_paypltrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PROJDESCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PROJDESCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PROJDESCSET> gl_projdescset(new GL_PROJDESCSET());
			gl_projdescset->open(sourceDSN, targetDSN);
			gl_projdescset->setRepositoryString(builder->getEnvyConnectionString());
			gl_projdescset->setProfileName(profileName);
			gl_projdescset->setReplicationOption(eReplicationOption);
			gl_projdescset->setDropOption(edropOption);
			gl_projdescset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_projdescset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_REBATSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_REBATSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_REBATSET> gl_rebatset(new GL_REBATSET());
			gl_rebatset->open(sourceDSN, targetDSN);
			gl_rebatset->setRepositoryString(builder->getEnvyConnectionString());
			gl_rebatset->setProfileName(profileName);
			gl_rebatset->setReplicationOption(eReplicationOption);
			gl_rebatset->setDropOption(edropOption);
			gl_rebatset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_rebatset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VCHVTPSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VCHVTPSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VCHVTPSTSET> ap_vchvtpstset(new AP_VCHVTPSTSET());
			ap_vchvtpstset->open(sourceDSN, targetDSN);
			ap_vchvtpstset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vchvtpstset->setProfileName(profileName);
			ap_vchvtpstset->setReplicationOption(eReplicationOption);
			ap_vchvtpstset->setDropOption(edropOption);
			ap_vchvtpstset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vchvtpstset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTUSGSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTUSGSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTUSGSET> prtusgset(new PRTUSGSET());
			prtusgset->open(sourceDSN, targetDSN);
			prtusgset->setRepositoryString(builder->getEnvyConnectionString());
			prtusgset->setProfileName(profileName);
			prtusgset->setReplicationOption(eReplicationOption);
			prtusgset->setDropOption(edropOption);
			prtusgset->setOdbcAttributes(builder->getOdbcAttributes());
			prtusgset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAUTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AUTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AUTHSHSET> authshset(new AUTHSHSET());
			authshset->open(sourceDSN, targetDSN);
			authshset->setRepositoryString(builder->getEnvyConnectionString());
			authshset->setProfileName(profileName);
			authshset->setReplicationOption(eReplicationOption);
			authshset->setDropOption(edropOption);
			authshset->setOdbcAttributes(builder->getOdbcAttributes());
			authshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPMBOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPMBOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPMBOSET> wipmboset(new WIPMBOSET());
			wipmboset->open(sourceDSN, targetDSN);
			wipmboset->setRepositoryString(builder->getEnvyConnectionString());
			wipmboset->setProfileName(profileName);
			wipmboset->setReplicationOption(eReplicationOption);
			wipmboset->setDropOption(edropOption);
			wipmboset->setOdbcAttributes(builder->getOdbcAttributes());
			wipmboset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_TRHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_TRHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_TRHSHSET> gl_trhshset(new GL_TRHSHSET());
			gl_trhshset->open(sourceDSN, targetDSN);
			gl_trhshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_trhshset->setProfileName(profileName);
			gl_trhshset->setReplicationOption(eReplicationOption);
			gl_trhshset->setDropOption(edropOption);
			gl_trhshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_trhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INHVDPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INHVDPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INHVDPOSTSET> ma_inhvdpostset(new MA_INHVDPOSTSET());
			ma_inhvdpostset->open(sourceDSN, targetDSN);
			ma_inhvdpostset->setRepositoryString(builder->getEnvyConnectionString());
			ma_inhvdpostset->setProfileName(profileName);
			ma_inhvdpostset->setReplicationOption(eReplicationOption);
			ma_inhvdpostset->setDropOption(edropOption);
			ma_inhvdpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_inhvdpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_DMHCMHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_DMHCMHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_DMHCMHSET> ma_dmhcmhset(new MA_DMHCMHSET());
			ma_dmhcmhset->open(sourceDSN, targetDSN);
			ma_dmhcmhset->setRepositoryString(builder->getEnvyConnectionString());
			ma_dmhcmhset->setProfileName(profileName);
			ma_dmhcmhset->setReplicationOption(eReplicationOption);
			ma_dmhcmhset->setDropOption(edropOption);
			ma_dmhcmhset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_dmhcmhset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_STATEHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_STATEHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_STATEHSHSET> ma_statehshset(new MA_STATEHSHSET());
			ma_statehshset->open(sourceDSN, targetDSN);
			ma_statehshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_statehshset->setProfileName(profileName);
			ma_statehshset->setReplicationOption(eReplicationOption);
			ma_statehshset->setDropOption(edropOption);
			ma_statehshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_statehshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVMCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VMCREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VMCREC> vmcrec(new VMCREC());
			vmcrec->open(sourceDSN, targetDSN);
			vmcrec->setRepositoryString(builder->getEnvyConnectionString());
			vmcrec->setProfileName(profileName);
			vmcrec->setReplicationOption(eReplicationOption);
			vmcrec->setDropOption(edropOption);
			vmcrec->setOdbcAttributes(builder->getOdbcAttributes());
			vmcrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PDCHKREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PDCHKREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PDCHKREC> ap_pdchkrec(new AP_PDCHKREC());
			ap_pdchkrec->open(sourceDSN, targetDSN);
			ap_pdchkrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_pdchkrec->setProfileName(profileName);
			ap_pdchkrec->setReplicationOption(eReplicationOption);
			ap_pdchkrec->setDropOption(edropOption);
			ap_pdchkrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pdchkrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PRPTHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PRPTHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PRPTHSHSET> gl_prpthshset(new GL_PRPTHSHSET());
			gl_prpthshset->open(sourceDSN, targetDSN);
			gl_prpthshset->setRepositoryString(builder->getEnvyConnectionString());
			gl_prpthshset->setProfileName(profileName);
			gl_prpthshset->setReplicationOption(eReplicationOption);
			gl_prpthshset->setDropOption(edropOption);
			gl_prpthshset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_prpthshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAPPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("APPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<APPREC> apprec(new APPREC());
			apprec->open(sourceDSN, targetDSN);
			apprec->setRepositoryString(builder->getEnvyConnectionString());
			apprec->setProfileName(profileName);
			apprec->setReplicationOption(eReplicationOption);
			apprec->setDropOption(edropOption);
			apprec->setOdbcAttributes(builder->getOdbcAttributes());
			apprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VCHCHKSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VCHCHKSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VCHCHKSET> ap_vchchkset(new AP_VCHCHKSET());
			ap_vchchkset->open(sourceDSN, targetDSN);
			ap_vchchkset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vchchkset->setProfileName(profileName);
			ap_vchchkset->setReplicationOption(eReplicationOption);
			ap_vchchkset->setDropOption(edropOption);
			ap_vchchkset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vchchkset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumRCTNOHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("RCTNOHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<RCTNOHSHSET> rctnohshset(new RCTNOHSHSET());
			rctnohshset->open(sourceDSN, targetDSN);
			rctnohshset->setRepositoryString(builder->getEnvyConnectionString());
			rctnohshset->setProfileName(profileName);
			rctnohshset->setReplicationOption(eReplicationOption);
			rctnohshset->setDropOption(edropOption);
			rctnohshset->setOdbcAttributes(builder->getOdbcAttributes());
			rctnohshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VPNUM_DREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VPNUM_DREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VPNUM_DREC> gl_vpnum_drec(new GL_VPNUM_DREC());
			gl_vpnum_drec->open(sourceDSN, targetDSN);
			gl_vpnum_drec->setRepositoryString(builder->getEnvyConnectionString());
			gl_vpnum_drec->setProfileName(profileName);
			gl_vpnum_drec->setReplicationOption(eReplicationOption);
			gl_vpnum_drec->setDropOption(edropOption);
			gl_vpnum_drec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vpnum_drec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PNOTPNOTINVSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PNOTPNOTINVSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PNOTPNOTINVSET> ma_pnotpnotinvset(new MA_PNOTPNOTINVSET());
			ma_pnotpnotinvset->open(sourceDSN, targetDSN);
			ma_pnotpnotinvset->setRepositoryString(builder->getEnvyConnectionString());
			ma_pnotpnotinvset->setProfileName(profileName);
			ma_pnotpnotinvset->setReplicationOption(eReplicationOption);
			ma_pnotpnotinvset->setDropOption(edropOption);
			ma_pnotpnotinvset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_pnotpnotinvset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOHCPRSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POHCPRSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POHCPRSET> pohcprset(new POHCPRSET());
			pohcprset->open(sourceDSN, targetDSN);
			pohcprset->setRepositoryString(builder->getEnvyConnectionString());
			pohcprset->setProfileName(profileName);
			pohcprset->setReplicationOption(eReplicationOption);
			pohcprset->setDropOption(edropOption);
			pohcprset->setOdbcAttributes(builder->getOdbcAttributes());
			pohcprset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VCHNOTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VCHNOTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VCHNOTSET> ap_vchnotset(new AP_VCHNOTSET());
			ap_vchnotset->open(sourceDSN, targetDSN);
			ap_vchnotset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vchnotset->setProfileName(profileName);
			ap_vchnotset->setReplicationOption(eReplicationOption);
			ap_vchnotset->setDropOption(edropOption);
			ap_vchnotset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vchnotset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWIPBYPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WIPBYPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WIPBYPSET> wipbypset(new WIPBYPSET());
			wipbypset->open(sourceDSN, targetDSN);
			wipbypset->setRepositoryString(builder->getEnvyConnectionString());
			wipbypset->setProfileName(profileName);
			wipbypset->setReplicationOption(eReplicationOption);
			wipbypset->setDropOption(edropOption);
			wipbypset->setOdbcAttributes(builder->getOdbcAttributes());
			wipbypset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_HLDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_HLDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_HLDREC> ma_hldrec(new MA_HLDREC());
			ma_hldrec->open(sourceDSN, targetDSN);
			ma_hldrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_hldrec->setProfileName(profileName);
			ma_hldrec->setReplicationOption(eReplicationOption);
			ma_hldrec->setDropOption(edropOption);
			ma_hldrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_hldrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VNDPLTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VNDPLTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VNDPLTSET> ap_vndpltset(new AP_VNDPLTSET());
			ap_vndpltset->open(sourceDSN, targetDSN);
			ap_vndpltset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vndpltset->setProfileName(profileName);
			ap_vndpltset->setReplicationOption(eReplicationOption);
			ap_vndpltset->setDropOption(edropOption);
			ap_vndpltset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vndpltset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTMRPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTMRPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTMRPSET> prtmrpset(new PRTMRPSET());
			prtmrpset->open(sourceDSN, targetDSN);
			prtmrpset->setRepositoryString(builder->getEnvyConnectionString());
			prtmrpset->setProfileName(profileName);
			prtmrpset->setReplicationOption(eReplicationOption);
			prtmrpset->setDropOption(edropOption);
			prtmrpset->setOdbcAttributes(builder->getOdbcAttributes());
			prtmrpset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ABUDNUMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ABUDNUMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ABUDNUMSET> gl_abudnumset(new GL_ABUDNUMSET());
			gl_abudnumset->open(sourceDSN, targetDSN);
			gl_abudnumset->setRepositoryString(builder->getEnvyConnectionString());
			gl_abudnumset->setProfileName(profileName);
			gl_abudnumset->setReplicationOption(eReplicationOption);
			gl_abudnumset->setDropOption(edropOption);
			gl_abudnumset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_abudnumset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumENGENCSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ENGENCSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ENGENCSET> engencset(new ENGENCSET());
			engencset->open(sourceDSN, targetDSN);
			engencset->setRepositoryString(builder->getEnvyConnectionString());
			engencset->setProfileName(profileName);
			engencset->setReplicationOption(eReplicationOption);
			engencset->setDropOption(edropOption);
			engencset->setOdbcAttributes(builder->getOdbcAttributes());
			engencset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOHPOPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POHPOPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POHPOPSET> pohpopset(new POHPOPSET());
			pohpopset->open(sourceDSN, targetDSN);
			pohpopset->setRepositoryString(builder->getEnvyConnectionString());
			pohpopset->setProfileName(profileName);
			pohpopset->setReplicationOption(eReplicationOption);
			pohpopset->setDropOption(edropOption);
			pohpopset->setOdbcAttributes(builder->getOdbcAttributes());
			pohpopset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CMDMSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CMDMSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CMDMSPISET> ma_cmdmspiset(new MA_CMDMSPISET());
			ma_cmdmspiset->open(sourceDSN, targetDSN);
			ma_cmdmspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cmdmspiset->setProfileName(profileName);
			ma_cmdmspiset->setReplicationOption(eReplicationOption);
			ma_cmdmspiset->setDropOption(edropOption);
			ma_cmdmspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cmdmspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_BOLREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_BOLREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_BOLREC> ap_bolrec(new AP_BOLREC());
			ap_bolrec->open(sourceDSN, targetDSN);
			ap_bolrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_bolrec->setProfileName(profileName);
			ap_bolrec->setReplicationOption(eReplicationOption);
			ap_bolrec->setDropOption(edropOption);
			ap_bolrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_bolrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VP_DREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VP_DREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VP_DREC> gl_vp_drec(new GL_VP_DREC());
			gl_vp_drec->open(sourceDSN, targetDSN);
			gl_vp_drec->setRepositoryString(builder->getEnvyConnectionString());
			gl_vp_drec->setProfileName(profileName);
			gl_vp_drec->setReplicationOption(eReplicationOption);
			gl_vp_drec->setDropOption(edropOption);
			gl_vp_drec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vp_drec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_PROJFASET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_PROJFASET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_PROJFASET> gl_projfaset(new GL_PROJFASET());
			gl_projfaset->open(sourceDSN, targetDSN);
			gl_projfaset->setRepositoryString(builder->getEnvyConnectionString());
			gl_projfaset->setProfileName(profileName);
			gl_projfaset->setReplicationOption(eReplicationOption);
			gl_projfaset->setDropOption(edropOption);
			gl_projfaset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_projfaset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumACTVOSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ACTVOSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ACTVOSET> actvoset(new ACTVOSET());
			actvoset->open(sourceDSN, targetDSN);
			actvoset->setRepositoryString(builder->getEnvyConnectionString());
			actvoset->setProfileName(profileName);
			actvoset->setReplicationOption(eReplicationOption);
			actvoset->setDropOption(edropOption);
			actvoset->setOdbcAttributes(builder->getOdbcAttributes());
			actvoset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SODCHGDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SODCHGDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SODCHGDSET> ma_sodchgdset(new MA_SODCHGDSET());
			ma_sodchgdset->open(sourceDSN, targetDSN);
			ma_sodchgdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_sodchgdset->setProfileName(profileName);
			ma_sodchgdset->setReplicationOption(eReplicationOption);
			ma_sodchgdset->setDropOption(edropOption);
			ma_sodchgdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sodchgdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumINTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("INTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<INTSET> intset(new INTSET());
			intset->open(sourceDSN, targetDSN);
			intset->setRepositoryString(builder->getEnvyConnectionString());
			intset->setProfileName(profileName);
			intset->setReplicationOption(eReplicationOption);
			intset->setDropOption(edropOption);
			intset->setOdbcAttributes(builder->getOdbcAttributes());
			intset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHHSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHHSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHHSPISET> ma_shhspiset(new MA_SHHSPISET());
			ma_shhspiset->open(sourceDSN, targetDSN);
			ma_shhspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shhspiset->setProfileName(profileName);
			ma_shhspiset->setReplicationOption(eReplicationOption);
			ma_shhspiset->setDropOption(edropOption);
			ma_shhspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shhspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_FCPRTABHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_FCPRTABHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_FCPRTABHSHSET> ma_fcprtabhshset(new MA_FCPRTABHSHSET());
			ma_fcprtabhshset->open(sourceDSN, targetDSN);
			ma_fcprtabhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_fcprtabhshset->setProfileName(profileName);
			ma_fcprtabhshset->setReplicationOption(eReplicationOption);
			ma_fcprtabhshset->setDropOption(edropOption);
			ma_fcprtabhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_fcprtabhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_INDMSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_INDMSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_INDMSPNLSET> ma_indmspnlset(new MA_INDMSPNLSET());
			ma_indmspnlset->open(sourceDSN, targetDSN);
			ma_indmspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_indmspnlset->setProfileName(profileName);
			ma_indmspnlset->setReplicationOption(eReplicationOption);
			ma_indmspnlset->setDropOption(edropOption);
			ma_indmspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_indmspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumWARQOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("WARQOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<WARQOHSET> warqohset(new WARQOHSET());
			warqohset->open(sourceDSN, targetDSN);
			warqohset->setRepositoryString(builder->getEnvyConnectionString());
			warqohset->setProfileName(profileName);
			warqohset->setReplicationOption(eReplicationOption);
			warqohset->setDropOption(edropOption);
			warqohset->setOdbcAttributes(builder->getOdbcAttributes());
			warqohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRHAPPSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRHAPPSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRHAPPSET> prhappset(new PRHAPPSET());
			prhappset->open(sourceDSN, targetDSN);
			prhappset->setRepositoryString(builder->getEnvyConnectionString());
			prhappset->setProfileName(profileName);
			prhappset->setReplicationOption(eReplicationOption);
			prhappset->setDropOption(edropOption);
			prhappset->setOdbcAttributes(builder->getOdbcAttributes());
			prhappset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VCHDMSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VCHDMSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VCHDMSET> ap_vchdmset(new AP_VCHDMSET());
			ap_vchdmset->open(sourceDSN, targetDSN);
			ap_vchdmset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vchdmset->setProfileName(profileName);
			ap_vchdmset->setReplicationOption(eReplicationOption);
			ap_vchdmset->setDropOption(edropOption);
			ap_vchdmset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vchdmset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_VP_NREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_VP_NREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_VP_NREC> gl_vp_nrec(new GL_VP_NREC());
			gl_vp_nrec->open(sourceDSN, targetDSN);
			gl_vp_nrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_vp_nrec->setProfileName(profileName);
			gl_vp_nrec->setReplicationOption(eReplicationOption);
			gl_vp_nrec->setDropOption(edropOption);
			gl_vp_nrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_vp_nrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SVINDSPISET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SVINDSPISET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SVINDSPISET> ma_svindspiset(new MA_SVINDSPISET());
			ma_svindspiset->open(sourceDSN, targetDSN);
			ma_svindspiset->setRepositoryString(builder->getEnvyConnectionString());
			ma_svindspiset->setProfileName(profileName);
			ma_svindspiset->setReplicationOption(eReplicationOption);
			ma_svindspiset->setDropOption(edropOption);
			ma_svindspiset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_svindspiset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTRTGSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTRTGSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTRTGSET> prtrtgset(new PRTRTGSET());
			prtrtgset->open(sourceDSN, targetDSN);
			prtrtgset->setRepositoryString(builder->getEnvyConnectionString());
			prtrtgset->setProfileName(profileName);
			prtrtgset->setReplicationOption(eReplicationOption);
			prtrtgset->setDropOption(edropOption);
			prtrtgset->setOdbcAttributes(builder->getOdbcAttributes());
			prtrtgset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRHHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRHHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRHHSHSET> prhhshset(new PRHHSHSET());
			prhhshset->open(sourceDSN, targetDSN);
			prhhshset->setRepositoryString(builder->getEnvyConnectionString());
			prhhshset->setProfileName(profileName);
			prhhshset->setReplicationOption(eReplicationOption);
			prhhshset->setDropOption(edropOption);
			prhhshset->setOdbcAttributes(builder->getOdbcAttributes());
			prhhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_RECPAYREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_RECPAYREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_RECPAYREC> ap_recpayrec(new AP_RECPAYREC());
			ap_recpayrec->open(sourceDSN, targetDSN);
			ap_recpayrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_recpayrec->setProfileName(profileName);
			ap_recpayrec->setReplicationOption(eReplicationOption);
			ap_recpayrec->setDropOption(edropOption);
			ap_recpayrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_recpayrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHHPRTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHHPRTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHHPRTSET> ma_shhprtset(new MA_SHHPRTSET());
			ma_shhprtset->open(sourceDSN, targetDSN);
			ma_shhprtset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shhprtset->setProfileName(profileName);
			ma_shhprtset->setReplicationOption(eReplicationOption);
			ma_shhprtset->setDropOption(edropOption);
			ma_shhprtset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shhprtset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTENDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTENDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTENDSET> prtendset(new PRTENDSET());
			prtendset->open(sourceDSN, targetDSN);
			prtendset->setRepositoryString(builder->getEnvyConnectionString());
			prtendset->setProfileName(profileName);
			prtendset->setReplicationOption(eReplicationOption);
			prtendset->setDropOption(edropOption);
			prtendset->setOdbcAttributes(builder->getOdbcAttributes());
			prtendset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SOHREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SOHREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SOHREC> ma_sohrec(new MA_SOHREC());
			ma_sohrec->open(sourceDSN, targetDSN);
			ma_sohrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_sohrec->setProfileName(profileName);
			ma_sohrec->setReplicationOption(eReplicationOption);
			ma_sohrec->setDropOption(edropOption);
			ma_sohrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_sohrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumED_DOCXRFREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("ED_DOCXRFREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<ED_DOCXRFREC> ed_docxrfrec(new ED_DOCXRFREC());
			ed_docxrfrec->open(sourceDSN, targetDSN);
			ed_docxrfrec->setRepositoryString(builder->getEnvyConnectionString());
			ed_docxrfrec->setProfileName(profileName);
			ed_docxrfrec->setReplicationOption(eReplicationOption);
			ed_docxrfrec->setDropOption(edropOption);
			ed_docxrfrec->setOdbcAttributes(builder->getOdbcAttributes());
			ed_docxrfrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SHHSPNLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SHHSPNLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SHHSPNLSET> ma_shhspnlset(new MA_SHHSPNLSET());
			ma_shhspnlset->open(sourceDSN, targetDSN);
			ma_shhspnlset->setRepositoryString(builder->getEnvyConnectionString());
			ma_shhspnlset->setProfileName(profileName);
			ma_shhspnlset->setReplicationOption(eReplicationOption);
			ma_shhspnlset->setDropOption(edropOption);
			ma_shhspnlset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_shhspnlset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumCONREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("CONREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<CONREC> conrec(new CONREC());
			conrec->open(sourceDSN, targetDSN);
			conrec->setRepositoryString(builder->getEnvyConnectionString());
			conrec->setProfileName(profileName);
			conrec->setReplicationOption(eReplicationOption);
			conrec->setDropOption(edropOption);
			conrec->setOdbcAttributes(builder->getOdbcAttributes());
			conrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_ABUDNUMREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_ABUDNUMREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_ABUDNUMREC> gl_abudnumrec(new GL_ABUDNUMREC());
			gl_abudnumrec->open(sourceDSN, targetDSN);
			gl_abudnumrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_abudnumrec->setProfileName(profileName);
			gl_abudnumrec->setReplicationOption(eReplicationOption);
			gl_abudnumrec->setDropOption(edropOption);
			gl_abudnumrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_abudnumrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_CHKREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_CHKREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_CHKREC> ap_chkrec(new AP_CHKREC());
			ap_chkrec->open(sourceDSN, targetDSN);
			ap_chkrec->setRepositoryString(builder->getEnvyConnectionString());
			ap_chkrec->setProfileName(profileName);
			ap_chkrec->setReplicationOption(eReplicationOption);
			ap_chkrec->setDropOption(edropOption);
			ap_chkrec->setOdbcAttributes(builder->getOdbcAttributes());
			ap_chkrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumTWUREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("TWUREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<TWUREC> twurec(new TWUREC());
			twurec->open(sourceDSN, targetDSN);
			twurec->setRepositoryString(builder->getEnvyConnectionString());
			twurec->setProfileName(profileName);
			twurec->setReplicationOption(eReplicationOption);
			twurec->setDropOption(edropOption);
			twurec->setOdbcAttributes(builder->getOdbcAttributes());
			twurec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_QUOHUPDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_QUOHUPDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_QUOHUPDSET> ma_quohupdset(new MA_QUOHUPDSET());
			ma_quohupdset->open(sourceDSN, targetDSN);
			ma_quohupdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_quohupdset->setProfileName(profileName);
			ma_quohupdset->setReplicationOption(eReplicationOption);
			ma_quohupdset->setDropOption(edropOption);
			ma_quohupdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_quohupdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CTERHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CTERHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CTERHSHSET> ma_cterhshset(new MA_CTERHSHSET());
			ma_cterhshset->open(sourceDSN, targetDSN);
			ma_cterhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_cterhshset->setProfileName(profileName);
			ma_cterhshset->setReplicationOption(eReplicationOption);
			ma_cterhshset->setDropOption(edropOption);
			ma_cterhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_cterhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPODRCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PODRCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PODRCTSET> podrctset(new PODRCTSET());
			podrctset->open(sourceDSN, targetDSN);
			podrctset->setRepositoryString(builder->getEnvyConnectionString());
			podrctset->setProfileName(profileName);
			podrctset->setReplicationOption(eReplicationOption);
			podrctset->setDropOption(edropOption);
			podrctset->setOdbcAttributes(builder->getOdbcAttributes());
			podrctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_CIAREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_CIAREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_CIAREC> ma_ciarec(new MA_CIAREC());
			ma_ciarec->open(sourceDSN, targetDSN);
			ma_ciarec->setRepositoryString(builder->getEnvyConnectionString());
			ma_ciarec->setProfileName(profileName);
			ma_ciarec->setReplicationOption(eReplicationOption);
			ma_ciarec->setDropOption(edropOption);
			ma_ciarec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_ciarec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_TRPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_TRPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_TRPOSTSET> gl_trpostset(new GL_TRPOSTSET());
			gl_trpostset->open(sourceDSN, targetDSN);
			gl_trpostset->setRepositoryString(builder->getEnvyConnectionString());
			gl_trpostset->setProfileName(profileName);
			gl_trpostset->setReplicationOption(eReplicationOption);
			gl_trpostset->setDropOption(edropOption);
			gl_trpostset->setOdbcAttributes(builder->getOdbcAttributes());
			gl_trpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_ACCTSALESET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_ACCTSALESET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_ACCTSALESET> ma_acctsaleset(new MA_ACCTSALESET());
			ma_acctsaleset->open(sourceDSN, targetDSN);
			ma_acctsaleset->setRepositoryString(builder->getEnvyConnectionString());
			ma_acctsaleset->setProfileName(profileName);
			ma_acctsaleset->setReplicationOption(eReplicationOption);
			ma_acctsaleset->setDropOption(edropOption);
			ma_acctsaleset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_acctsaleset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PROJPOSTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PROJPOSTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PROJPOSTSET> ma_projpostset(new MA_PROJPOSTSET());
			ma_projpostset->open(sourceDSN, targetDSN);
			ma_projpostset->setRepositoryString(builder->getEnvyConnectionString());
			ma_projpostset->setProfileName(profileName);
			ma_projpostset->setReplicationOption(eReplicationOption);
			ma_projpostset->setDropOption(edropOption);
			ma_projpostset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_projpostset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPRTWOHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PRTWOHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PRTWOHSET> prtwohset(new PRTWOHSET());
			prtwohset->open(sourceDSN, targetDSN);
			prtwohset->setRepositoryString(builder->getEnvyConnectionString());
			prtwohset->setProfileName(profileName);
			prtwohset->setReplicationOption(eReplicationOption);
			prtwohset->setDropOption(edropOption);
			prtwohset->setOdbcAttributes(builder->getOdbcAttributes());
			prtwohset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_WARSTGSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_WARSTGSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_WARSTGSET> ma_warstgset(new MA_WARSTGSET());
			ma_warstgset->open(sourceDSN, targetDSN);
			ma_warstgset->setRepositoryString(builder->getEnvyConnectionString());
			ma_warstgset->setProfileName(profileName);
			ma_warstgset->setReplicationOption(eReplicationOption);
			ma_warstgset->setDropOption(edropOption);
			ma_warstgset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_warstgset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_POSTREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_POSTREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_POSTREC> gl_postrec(new GL_POSTREC());
			gl_postrec->open(sourceDSN, targetDSN);
			gl_postrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_postrec->setProfileName(profileName);
			gl_postrec->setReplicationOption(eReplicationOption);
			gl_postrec->setDropOption(edropOption);
			gl_postrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_postrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_VCHBOLLSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_VCHBOLLSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_VCHBOLLSET> ap_vchbollset(new AP_VCHBOLLSET());
			ap_vchbollset->open(sourceDSN, targetDSN);
			ap_vchbollset->setRepositoryString(builder->getEnvyConnectionString());
			ap_vchbollset->setProfileName(profileName);
			ap_vchbollset->setReplicationOption(eReplicationOption);
			ap_vchbollset->setDropOption(edropOption);
			ap_vchbollset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_vchbollset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_JV_NREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_JV_NREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_JV_NREC> gl_jv_nrec(new GL_JV_NREC());
			gl_jv_nrec->open(sourceDSN, targetDSN);
			gl_jv_nrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_jv_nrec->setProfileName(profileName);
			gl_jv_nrec->setReplicationOption(eReplicationOption);
			gl_jv_nrec->setDropOption(edropOption);
			gl_jv_nrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_jv_nrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRCTBILSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRCTBILSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRCTBILSET> ma_prctbilset(new MA_PRCTBILSET());
			ma_prctbilset->open(sourceDSN, targetDSN);
			ma_prctbilset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prctbilset->setProfileName(profileName);
			ma_prctbilset->setReplicationOption(eReplicationOption);
			ma_prctbilset->setDropOption(edropOption);
			ma_prctbilset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prctbilset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_ACCTSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_ACCTSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_ACCTSET> ap_acctset(new AP_ACCTSET());
			ap_acctset->open(sourceDSN, targetDSN);
			ap_acctset->setRepositoryString(builder->getEnvyConnectionString());
			ap_acctset->setProfileName(profileName);
			ap_acctset->setReplicationOption(eReplicationOption);
			ap_acctset->setDropOption(edropOption);
			ap_acctset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_acctset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumAP_PNOTPNOTVCHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("AP_PNOTPNOTVCHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<AP_PNOTPNOTVCHSET> ap_pnotpnotvchset(new AP_PNOTPNOTVCHSET());
			ap_pnotpnotvchset->open(sourceDSN, targetDSN);
			ap_pnotpnotvchset->setRepositoryString(builder->getEnvyConnectionString());
			ap_pnotpnotvchset->setProfileName(profileName);
			ap_pnotpnotvchset->setReplicationOption(eReplicationOption);
			ap_pnotpnotvchset->setDropOption(edropOption);
			ap_pnotpnotvchset->setOdbcAttributes(builder->getOdbcAttributes());
			ap_pnotpnotvchset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumVARREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("VARREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<VARREC> varrec(new VARREC());
			varrec->open(sourceDSN, targetDSN);
			varrec->setRepositoryString(builder->getEnvyConnectionString());
			varrec->setProfileName(profileName);
			varrec->setReplicationOption(eReplicationOption);
			varrec->setDropOption(edropOption);
			varrec->setOdbcAttributes(builder->getOdbcAttributes());
			varrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumGL_FISCREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("GL_FISCREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<GL_FISCREC> gl_fiscrec(new GL_FISCREC());
			gl_fiscrec->open(sourceDSN, targetDSN);
			gl_fiscrec->setRepositoryString(builder->getEnvyConnectionString());
			gl_fiscrec->setProfileName(profileName);
			gl_fiscrec->setReplicationOption(eReplicationOption);
			gl_fiscrec->setDropOption(edropOption);
			gl_fiscrec->setOdbcAttributes(builder->getOdbcAttributes());
			gl_fiscrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumFSCCALSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("FSCCALSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<FSCCALSET> fsccalset(new FSCCALSET());
			fsccalset->open(sourceDSN, targetDSN);
			fsccalset->setRepositoryString(builder->getEnvyConnectionString());
			fsccalset->setProfileName(profileName);
			fsccalset->setReplicationOption(eReplicationOption);
			fsccalset->setDropOption(edropOption);
			fsccalset->setOdbcAttributes(builder->getOdbcAttributes());
			fsccalset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_PRODCHGDSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_PRODCHGDSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_PRODCHGDSET> ma_prodchgdset(new MA_PRODCHGDSET());
			ma_prodchgdset->open(sourceDSN, targetDSN);
			ma_prodchgdset->setRepositoryString(builder->getEnvyConnectionString());
			ma_prodchgdset->setProfileName(profileName);
			ma_prodchgdset->setReplicationOption(eReplicationOption);
			ma_prodchgdset->setDropOption(edropOption);
			ma_prodchgdset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_prodchgdset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPOHPONSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("POHPONSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<POHPONSET> pohponset(new POHPONSET());
			pohponset->open(sourceDSN, targetDSN);
			pohponset->setRepositoryString(builder->getEnvyConnectionString());
			pohponset->setProfileName(profileName);
			pohponset->setReplicationOption(eReplicationOption);
			pohponset->setDropOption(edropOption);
			pohponset->setOdbcAttributes(builder->getOdbcAttributes());
			pohponset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_TOPREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_TOPREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_TOPREC> ma_toprec(new MA_TOPREC());
			ma_toprec->open(sourceDSN, targetDSN);
			ma_toprec->setRepositoryString(builder->getEnvyConnectionString());
			ma_toprec->setProfileName(profileName);
			ma_toprec->setReplicationOption(eReplicationOption);
			ma_toprec->setDropOption(edropOption);
			ma_toprec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_toprec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_GLTABHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_GLTABHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_GLTABHSHSET> ma_gltabhshset(new MA_GLTABHSHSET());
			ma_gltabhshset->open(sourceDSN, targetDSN);
			ma_gltabhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_gltabhshset->setProfileName(profileName);
			ma_gltabhshset->setReplicationOption(eReplicationOption);
			ma_gltabhshset->setDropOption(edropOption);
			ma_gltabhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_gltabhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumPAYREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("PAYREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<PAYREC> payrec(new PAYREC());
			payrec->open(sourceDSN, targetDSN);
			payrec->setRepositoryString(builder->getEnvyConnectionString());
			payrec->setProfileName(profileName);
			payrec->setReplicationOption(eReplicationOption);
			payrec->setDropOption(edropOption);
			payrec->setOdbcAttributes(builder->getOdbcAttributes());
			payrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_SPNDREC:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_SPNDREC");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_SPNDREC> ma_spndrec(new MA_SPNDREC());
			ma_spndrec->open(sourceDSN, targetDSN);
			ma_spndrec->setRepositoryString(builder->getEnvyConnectionString());
			ma_spndrec->setProfileName(profileName);
			ma_spndrec->setReplicationOption(eReplicationOption);
			ma_spndrec->setDropOption(edropOption);
			ma_spndrec->setOdbcAttributes(builder->getOdbcAttributes());
			ma_spndrec->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
		case Rctables::enumMA_REMHSHSET:
		{
			QLoggingCategory category("classLibQ");
			QDateTime dateTime1 = QDateTime::currentDateTime();
			QScopedPointer<connectionStringBuilder> builder(new connectionStringBuilder(this));
			vcNvTransfers nt;
			clsRowsToDeleteCleanup nRtd;
			nt.setSourceDSN(sourceDSN);
			nt.setTableName("MA_REMHSHSET");
			nt.setProfileName("MANDB100");
			nt.UpdateNvTransfersFromLastAttempted();
			nt.setAutoDelete(true);
			nRtd.initialize(builder->getEnvyConnectionString(),builder->getOdbcAttributes(),tableName,profileName,sourceDSN,targetDSN);
			nRtd.deleteRtdFromTarget();
			QScopedPointer<MA_REMHSHSET> ma_remhshset(new MA_REMHSHSET());
			ma_remhshset->open(sourceDSN, targetDSN);
			ma_remhshset->setRepositoryString(builder->getEnvyConnectionString());
			ma_remhshset->setProfileName(profileName);
			ma_remhshset->setReplicationOption(eReplicationOption);
			ma_remhshset->setDropOption(edropOption);
			ma_remhshset->setOdbcAttributes(builder->getOdbcAttributes());
			ma_remhshset->process(1);
// send the Update
			nt.run();
			nRtd.run();
			QDateTime dateTime2 = QDateTime::currentDateTime();
			qint64 millisecondsDiff = dateTime1.msecsTo(dateTime2);
			qInfo(category) << QString("Processed  %1->rowsProcessed() in %2 seconds").arg(tableName).arg(millisecondsDiff/60);
		} break;
	}
}
#pragma endregion
