/*H**********************************************************************
* FILENAME :        ClassLibQ_PRCDB100.cpp             DESIGN REF: 
*
* DESCRIPTION :
*       This file contains implementation functions for each record that can be processed 
*       in the PRCDB MANMAN R11 Rdb schema.
*
*    THIS FILE IS AN AUTO-GENERATED INCLUDE FILE
*
* PUBLIC FUNCTIONS :
*  
* Ret       Function
*====       ====================================
* void      ::initOdbcAttributes()
* void      ::initialize()
* void      ::close()
* void      ::open(const QString,const QString)
* void      ::process(int)
* void      ::run()
* int       ::rowsProcessed()
* 
* Private Functions:
* bool     ::connect()
* bool      ::prepare()
* bool      ::prepareTargetTable()
* bool      ::bindColumn()
* bool      ::bindParameter()
* bool      ::copyTable()
*
*  Setters: 
*  void     ::setCommitInterval(int)
*  void     ::setUpdateInterval(int)
*  void     ::setProfileName(const QString)
*  void     ::setRepositoryString(const QString)
*  void     ::setDropOption(enum DropOption)
*  void     ::setOdbcAttributes(const QString)
*  void     ::setReplicationOption(enum ReplicationOption)
*       
*  Set Flags: 
*   void    ::setAbortFlag()
*   void    ::setNetChange()
*  
*  signals: 
*   void    ::updateStatusFetched(QString,QString,int,int,int)
* 
*  slots: 
*    None
* NOTES :
*   
*
*       Copyright (c) Timothy Peer, eNVy Systems, Inc. 2015 -2018.  All rights reserved.
* 
* AUTHOR :    Timothy Peer        START DATE :    10 Nov 2018
*
* CHANGES :
*
* REF NO  VERSION DATE    WHO     DETAIL
*
*H*/

#include "ClassLibQ_PRCDB100.h"
#include "qnvstaticclass.h"
#include "NvLib_Enumerations.h"
#include "vtlExecute.h" 
#include "nvtableOracleRdb.h" 
Q_DECLARE_LOGGING_CATEGORY(category)


PC_IDESREC::PC_IDESREC(QObject * parent) : QObject(parent) 
,tableName("PC_IDESREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_IDESREC 
PC_IDESREC::~PC_IDESREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_IDESCODE.clear();
	PC_IDESTEXT.clear();
	PC_IDES_LASTUPD.clear();
	PC_INGRED.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_IDESREC

// begin method functions
void PC_IDESREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_IDESREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_IDESREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_IDESREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_IDESREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_IDESCODE, PC_IDESTEXT, PC_IDES_LASTUPD, PC_INGRED from PC_IDESREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_IDESREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_IDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_IDESCODE, PC_IDESTEXT, PC_IDES_LASTUPD, PC_INGRED ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_IDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_IDESCODE = ?, PC_IDESTEXT = ?, PC_IDES_LASTUPD = ?, PC_INGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_IDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_IDESCODE, PC_IDESTEXT, PC_IDES_LASTUPD, PC_INGRED ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_IDESCODE, PC_IDESTEXT, PC_IDES_LASTUPD, PC_INGRED from PC_IDESREC";
	qDebug(category) << "unsertSQL - update PC_IDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_IDESCODE = ?, PC_IDESTEXT = ?, PC_IDES_LASTUPD = ?, PC_INGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_IDESREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_IDESREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_IDESCODE[10]";
	PC_IDESCODE.resize(10);
	qDebug(category) << "Malloc - PC_IDESTEXT[60]";
	PC_IDESTEXT.resize(60);
	qDebug(category) << "Malloc - PC_IDES_LASTUPD[23]";
	PC_IDES_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_INGRED[18]";
	PC_INGRED.resize(18);

#pragma endregion Resize Fields PC_IDESREC
}
void PC_IDESREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_IDESREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_IDESREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_IDESREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_IDESREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_IDESREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_IDESREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_IDESREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_IDESREC");
				createTable();
			}break;
		}
	}
}

bool PC_IDESREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_IDESCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_IDESCODE.data(), 10, &cbPC_IDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_IDESTEXT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_IDESTEXT.data(), 60, &cbPC_IDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_IDES_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_IDES_LASTUPD.data(), 23, &cbPC_IDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 18 FieldName: PC_INGRED ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_INGRED.data(), 18, &cbPC_INGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_IDESREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_IDESCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_IDESCODE.constData(), 0, &cbPC_IDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_IDESTEXT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_IDESTEXT.constData(), 0, &cbPC_IDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_IDES_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_IDES_LASTUPD.constData(), 0, &cbPC_IDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 18 FieldName: PC_INGRED ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_INGRED.constData(), 0, &cbPC_INGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_IDESREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_IDESREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_IDESREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_IDESREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FRMINGSET::PC_FRMINGSET(QObject * parent) : QObject(parent) 
,tableName("PC_FRMINGSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FRMINGSET 
PC_FRMINGSET::~PC_FRMINGSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FRMINGSET

// begin method functions
void PC_FRMINGSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FRMINGSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FRMINGSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FRMINGSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FRMINGSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMINGSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FRMINGSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FRMINGSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FRMINGSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FRMINGSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMINGSET";
	qDebug(category) << "unsertSQL - update PC_FRMINGSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_FRMINGSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FRMINGSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_FRMINGSET
}
void PC_FRMINGSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FRMINGSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FRMINGSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FRMINGSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FRMINGSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FRMINGSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FRMINGSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FRMINGSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FRMINGSET");
				createTable();
			}break;
		}
	}
}

bool PC_FRMINGSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FRMINGSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FRMINGSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FRMINGSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FRMINGSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FRMINGSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_IXREC::PC_IXREC(QObject * parent) : QObject(parent) 
,tableName("PC_IXREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_IXREC 
PC_IXREC::~PC_IXREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_IXSUBNO.clear();
	PC_IXTYPE.clear();
	PC_IX_LASTUPD.clear();
	PC_CATEGORY.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_IXREC

// begin method functions
void PC_IXREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_IXREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_IXREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_IXREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_IXREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_IXSUBNO, PC_IXTYPE, PC_IX_LASTUPD, PC_CATEGORY from PC_IXREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_IXREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_IXREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_IXSUBNO, PC_IXTYPE, PC_IX_LASTUPD, PC_CATEGORY ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_IXREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_IXSUBNO = ?, PC_IXTYPE = ?, PC_IX_LASTUPD = ?, PC_CATEGORY = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_IXREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_IXSUBNO, PC_IXTYPE, PC_IX_LASTUPD, PC_CATEGORY ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_IXSUBNO, PC_IXTYPE, PC_IX_LASTUPD, PC_CATEGORY from PC_IXREC";
	qDebug(category) << "unsertSQL - update PC_IXREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_IXSUBNO = ?, PC_IXTYPE = ?, PC_IX_LASTUPD = ?, PC_CATEGORY = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_IXREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_IXREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_IXSUBNO[16]";
	PC_IXSUBNO.resize(16);
	qDebug(category) << "Malloc - PC_IXTYPE[2]";
	PC_IXTYPE.resize(2);
	qDebug(category) << "Malloc - PC_IX_LASTUPD[23]";
	PC_IX_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_CATEGORY[10]";
	PC_CATEGORY.resize(10);

#pragma endregion Resize Fields PC_IXREC
}
void PC_IXREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_IXREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_IXREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_IXREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_IXREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_IXREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_IXREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_IXREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_IXREC");
				createTable();
			}break;
		}
	}
}

bool PC_IXREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_IXSUBNO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_IXSUBNO.data(), 16, &cbPC_IXSUBNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_IXTYPE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_IXTYPE.data(), 2, &cbPC_IXTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_IX_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_IX_LASTUPD.data(), 23, &cbPC_IX_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 10 FieldName: PC_CATEGORY ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_CATEGORY.data(), 10, &cbPC_CATEGORY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_IXREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_IXSUBNO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 16, 0, (SQLPOINTER)PC_IXSUBNO.constData(), 0, &cbPC_IXSUBNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_IXTYPE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_IXTYPE.constData(), 0, &cbPC_IXTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_IX_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_IX_LASTUPD.constData(), 0, &cbPC_IX_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 10 FieldName: PC_CATEGORY ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_CATEGORY.constData(), 0, &cbPC_CATEGORY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_IXREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_IXREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_IXREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_IXREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_ENDREC::PC_ENDREC(QObject * parent) : QObject(parent) 
,tableName("PC_ENDREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_ENDREC 
PC_ENDREC::~PC_ENDREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_ENDPROD.clear();
	PC_ENDTYPE.clear();
	PC_ENDCRFLG.clear();
	PC_ENDQTYQ.clear();
	PC_ENDQTYPCT.clear();
	PC_ENDUOM.clear();
	PC_ENDCSTPCT.clear();
	PC_ENDSEQ.clear();
	PC_ENDFSDOFF.clear();
	PC_ENDVSDOFF.clear();
	PC_ENDMPFLG.clear();
	PC_END_LASTUPD.clear();
	PC_PRTNO.clear();
	PC_FRMNAME.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_ENDREC

// begin method functions
void PC_ENDREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_ENDREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_ENDREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_ENDREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_ENDREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ENDPROD, PC_ENDTYPE, PC_ENDCRFLG, PC_ENDQTYQ, PC_ENDQTYPCT, PC_ENDUOM, PC_ENDCSTPCT, PC_ENDSEQ, PC_ENDFSDOFF, PC_ENDVSDOFF, PC_ENDMPFLG, PC_END_LASTUPD, PC_PRTNO, PC_FRMNAME from PC_ENDREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_ENDREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_ENDREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ENDPROD, PC_ENDTYPE, PC_ENDCRFLG, PC_ENDQTYQ, PC_ENDQTYPCT, PC_ENDUOM, PC_ENDCSTPCT, PC_ENDSEQ, PC_ENDFSDOFF, PC_ENDVSDOFF, PC_ENDMPFLG, PC_END_LASTUPD, PC_PRTNO, PC_FRMNAME ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_ENDREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ENDPROD = ?, PC_ENDTYPE = ?, PC_ENDCRFLG = ?, PC_ENDQTYQ = ?, PC_ENDQTYPCT = ?, PC_ENDUOM = ?, PC_ENDCSTPCT = ?, PC_ENDSEQ = ?, PC_ENDFSDOFF = ?, PC_ENDVSDOFF = ?, PC_ENDMPFLG = ?, PC_END_LASTUPD = ?, PC_PRTNO = ?, PC_FRMNAME = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_ENDREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ENDPROD, PC_ENDTYPE, PC_ENDCRFLG, PC_ENDQTYQ, PC_ENDQTYPCT, PC_ENDUOM, PC_ENDCSTPCT, PC_ENDSEQ, PC_ENDFSDOFF, PC_ENDVSDOFF, PC_ENDMPFLG, PC_END_LASTUPD, PC_PRTNO, PC_FRMNAME ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ENDPROD, PC_ENDTYPE, PC_ENDCRFLG, PC_ENDQTYQ, PC_ENDQTYPCT, PC_ENDUOM, PC_ENDCSTPCT, PC_ENDSEQ, PC_ENDFSDOFF, PC_ENDVSDOFF, PC_ENDMPFLG, PC_END_LASTUPD, PC_PRTNO, PC_FRMNAME from PC_ENDREC";
	qDebug(category) << "unsertSQL - update PC_ENDREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ENDPROD = ?, PC_ENDTYPE = ?, PC_ENDCRFLG = ?, PC_ENDQTYQ = ?, PC_ENDQTYPCT = ?, PC_ENDUOM = ?, PC_ENDCSTPCT = ?, PC_ENDSEQ = ?, PC_ENDFSDOFF = ?, PC_ENDVSDOFF = ?, PC_ENDMPFLG = ?, PC_END_LASTUPD = ?, PC_PRTNO = ?, PC_FRMNAME = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_ENDREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_ENDREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_ENDPROD[18]";
	PC_ENDPROD.resize(18);
	qDebug(category) << "Malloc - PC_ENDTYPE[2]";
	PC_ENDTYPE.resize(2);
	qDebug(category) << "Malloc - PC_ENDCRFLG[2]";
	PC_ENDCRFLG.resize(2);
	qDebug(category) << "Malloc - PC_ENDQTYQ[8]";
	PC_ENDQTYQ.resize(8);
	qDebug(category) << "Malloc - PC_ENDQTYPCT[8]";
	PC_ENDQTYPCT.resize(8);
	qDebug(category) << "Malloc - PC_ENDUOM[2]";
	PC_ENDUOM.resize(2);
	qDebug(category) << "Malloc - PC_ENDCSTPCT[8]";
	PC_ENDCSTPCT.resize(8);
	qDebug(category) << "Malloc - PC_ENDSEQ[2]";
	PC_ENDSEQ.resize(2);
	qDebug(category) << "Malloc - PC_ENDFSDOFF[8]";
	PC_ENDFSDOFF.resize(8);
	qDebug(category) << "Malloc - PC_ENDVSDOFF[8]";
	PC_ENDVSDOFF.resize(8);
	qDebug(category) << "Malloc - PC_ENDMPFLG[2]";
	PC_ENDMPFLG.resize(2);
	qDebug(category) << "Malloc - PC_END_LASTUPD[23]";
	PC_END_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_PRTNO[18]";
	PC_PRTNO.resize(18);
	qDebug(category) << "Malloc - PC_FRMNAME[20]";
	PC_FRMNAME.resize(20);

#pragma endregion Resize Fields PC_ENDREC
}
void PC_ENDREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_ENDREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_ENDREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_ENDREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_ENDREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_ENDREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_ENDREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_ENDREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_ENDREC");
				createTable();
			}break;
		}
	}
}

bool PC_ENDREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_ENDPROD ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_ENDPROD.data(), 18, &cbPC_ENDPROD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 2 FieldName: PC_ENDTYPE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_ENDTYPE.data(), 2, &cbPC_ENDTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_ENDCRFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, PC_ENDCRFLG.data(), 2, &cbPC_ENDCRFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_ENDQTYQ ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 8, PC_ENDQTYQ.data(), 8, &cbPC_ENDQTYQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_ENDQTYPCT ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 8, PC_ENDQTYPCT.data(), 8, &cbPC_ENDQTYPCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 1 Buffer Size: 2 FieldName: PC_ENDUOM ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 1, PC_ENDUOM.data(), 2, &cbPC_ENDUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_ENDCSTPCT ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 8, PC_ENDCSTPCT.data(), 8, &cbPC_ENDCSTPCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 5 Buffer Size: 2 FieldName: PC_ENDSEQ ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 5, PC_ENDSEQ.data(), 2, &cbPC_ENDSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_ENDFSDOFF ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 8, PC_ENDFSDOFF.data(), 8, &cbPC_ENDFSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_ENDVSDOFF ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 8, PC_ENDVSDOFF.data(), 8, &cbPC_ENDVSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 5 Buffer Size: 2 FieldName: PC_ENDMPFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 5, PC_ENDMPFLG.data(), 2, &cbPC_ENDMPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 1 Buffer Size: 23 FieldName: PC_END_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 1, PC_END_LASTUPD.data(), 23, &cbPC_END_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 1, PC_PRTNO.data(), 18, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 1, PC_FRMNAME.data(), 20, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_ENDREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_ENDPROD ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_ENDPROD.constData(), 0, &cbPC_ENDPROD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 2 FieldName: PC_ENDTYPE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_ENDTYPE.constData(), 0, &cbPC_ENDTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_ENDCRFLG ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_ENDCRFLG.constData(), 0, &cbPC_ENDCRFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_ENDQTYQ ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_ENDQTYQ.constData(), 0, &cbPC_ENDQTYQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_ENDQTYPCT ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_ENDQTYPCT.constData(), 0, &cbPC_ENDQTYPCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 1 Buffer Size: 2 FieldName: PC_ENDUOM ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_ENDUOM.constData(), 0, &cbPC_ENDUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_ENDCSTPCT ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_ENDCSTPCT.constData(), 0, &cbPC_ENDCSTPCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 5 Buffer Size: 2 FieldName: PC_ENDSEQ ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_ENDSEQ.constData(), 0, &cbPC_ENDSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_ENDFSDOFF ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_ENDFSDOFF.constData(), 0, &cbPC_ENDFSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_ENDVSDOFF ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_ENDVSDOFF.constData(), 0, &cbPC_ENDVSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 5 Buffer Size: 2 FieldName: PC_ENDMPFLG ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_ENDMPFLG.constData(), 0, &cbPC_ENDMPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 1 Buffer Size: 23 FieldName: PC_END_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_END_LASTUPD.constData(), 0, &cbPC_END_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_PRTNO.constData(), 0, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 20, 0, (SQLPOINTER)PC_FRMNAME.constData(), 0, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_ENDREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_ENDREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_ENDREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_ENDREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MBOMINGSET::PC_MBOMINGSET(QObject * parent) : QObject(parent) 
,tableName("PC_MBOMINGSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MBOMINGSET 
PC_MBOMINGSET::~PC_MBOMINGSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MBOMINGSET

// begin method functions
void PC_MBOMINGSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MBOMINGSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MBOMINGSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MBOMINGSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MBOMINGSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOMINGSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MBOMINGSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MBOMINGSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MBOMINGSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MBOMINGSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOMINGSET";
	qDebug(category) << "unsertSQL - update PC_MBOMINGSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_MBOMINGSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MBOMINGSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_MBOMINGSET
}
void PC_MBOMINGSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MBOMINGSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MBOMINGSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MBOMINGSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MBOMINGSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MBOMINGSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MBOMINGSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MBOMINGSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MBOMINGSET");
				createTable();
			}break;
		}
	}
}

bool PC_MBOMINGSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MBOMINGSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MBOMINGSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MBOMINGSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MBOMINGSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MBOMINGSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_WKCMPISET::PC_WKCMPISET(QObject * parent) : QObject(parent) 
,tableName("PC_WKCMPISET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_WKCMPISET 
PC_WKCMPISET::~PC_WKCMPISET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_WKCMPISET

// begin method functions
void PC_WKCMPISET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_WKCMPISET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_WKCMPISET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_WKCMPISET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_WKCMPISET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WKCMPISET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_WKCMPISET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_WKCMPISET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_WKCMPISET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_WKCMPISET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WKCMPISET";
	qDebug(category) << "unsertSQL - update PC_WKCMPISET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_WKCMPISET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_WKCMPISET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_WKCMPISET
}
void PC_WKCMPISET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_WKCMPISET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_WKCMPISET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_WKCMPISET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_WKCMPISET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_WKCMPISET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_WKCMPISET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_WKCMPISET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_WKCMPISET");
				createTable();
			}break;
		}
	}
}

bool PC_WKCMPISET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_WKCMPISET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_WKCMPISET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_WKCMPISET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_WKCMPISET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_WKCMPISET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TEXDREC::PC_TEXDREC(QObject * parent) : QObject(parent) 
,tableName("PC_TEXDREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TEXDREC 
PC_TEXDREC::~PC_TEXDREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_TEXDESC.clear();
	PC_TEXD_LASTUPD.clear();
	PC_TEXTCODE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TEXDREC

// begin method functions
void PC_TEXDREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TEXDREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TEXDREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TEXDREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TEXDREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TEXDESC, PC_TEXD_LASTUPD, PC_TEXTCODE from PC_TEXDREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TEXDREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TEXDREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TEXDESC, PC_TEXD_LASTUPD, PC_TEXTCODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TEXDREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TEXDESC = ?, PC_TEXD_LASTUPD = ?, PC_TEXTCODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TEXDREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TEXDESC, PC_TEXD_LASTUPD, PC_TEXTCODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TEXDESC, PC_TEXD_LASTUPD, PC_TEXTCODE from PC_TEXDREC";
	qDebug(category) << "unsertSQL - update PC_TEXDREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TEXDESC = ?, PC_TEXD_LASTUPD = ?, PC_TEXTCODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_TEXDREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TEXDREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_TEXDESC[60]";
	PC_TEXDESC.resize(60);
	qDebug(category) << "Malloc - PC_TEXD_LASTUPD[23]";
	PC_TEXD_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_TEXTCODE[10]";
	PC_TEXTCODE.resize(10);

#pragma endregion Resize Fields PC_TEXDREC
}
void PC_TEXDREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TEXDREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TEXDREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TEXDREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TEXDREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TEXDREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TEXDREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TEXDREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TEXDREC");
				createTable();
			}break;
		}
	}
}

bool PC_TEXDREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 60 FieldName: PC_TEXDESC ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_TEXDESC.data(), 60, &cbPC_TEXDESC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_TEXD_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_TEXD_LASTUPD.data(), 23, &cbPC_TEXD_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 10 FieldName: PC_TEXTCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_TEXTCODE.data(), 10, &cbPC_TEXTCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TEXDREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 60 FieldName: PC_TEXDESC ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_TEXDESC.constData(), 0, &cbPC_TEXDESC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_TEXD_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_TEXD_LASTUPD.constData(), 0, &cbPC_TEXD_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 10 FieldName: PC_TEXTCODE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TEXTCODE.constData(), 0, &cbPC_TEXTCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TEXDREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TEXDREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TEXDREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TEXDREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FCODESREC::PC_FCODESREC(QObject * parent) : QObject(parent) 
,tableName("PC_FCODESREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FCODESREC 
PC_FCODESREC::~PC_FCODESREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_FCODESCOM.clear();
	PC_FCODES_LASTUPD.clear();
	PC_FCOHNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FCODESREC

// begin method functions
void PC_FCODESREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FCODESREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FCODESREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FCODESREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FCODESREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCODESCOM, PC_FCODES_LASTUPD, PC_FCOHNO from PC_FCODESREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FCODESREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FCODESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCODESCOM, PC_FCODES_LASTUPD, PC_FCOHNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FCODESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_FCODESCOM = ?, PC_FCODES_LASTUPD = ?, PC_FCOHNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FCODESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCODESCOM, PC_FCODES_LASTUPD, PC_FCOHNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCODESCOM, PC_FCODES_LASTUPD, PC_FCOHNO from PC_FCODESREC";
	qDebug(category) << "unsertSQL - update PC_FCODESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_FCODESCOM = ?, PC_FCODES_LASTUPD = ?, PC_FCOHNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_FCODESREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FCODESREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_FCODESCOM[60]";
	PC_FCODESCOM.resize(60);
	qDebug(category) << "Malloc - PC_FCODES_LASTUPD[23]";
	PC_FCODES_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_FCOHNO[10]";
	PC_FCOHNO.resize(10);

#pragma endregion Resize Fields PC_FCODESREC
}
void PC_FCODESREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FCODESREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FCODESREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FCODESREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FCODESREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FCODESREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FCODESREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FCODESREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FCODESREC");
				createTable();
			}break;
		}
	}
}

bool PC_FCODESREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 60 FieldName: PC_FCODESCOM ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_FCODESCOM.data(), 60, &cbPC_FCODESCOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_FCODES_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_FCODES_LASTUPD.data(), 23, &cbPC_FCODES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 10 FieldName: PC_FCOHNO ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_FCOHNO.data(), 10, &cbPC_FCOHNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FCODESREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 60 FieldName: PC_FCODESCOM ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_FCODESCOM.constData(), 0, &cbPC_FCODESCOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_FCODES_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_FCODES_LASTUPD.constData(), 0, &cbPC_FCODES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 10 FieldName: PC_FCOHNO ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_FCOHNO.constData(), 0, &cbPC_FCOHNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FCODESREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FCODESREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FCODESREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FCODESREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTENDSET::PC_PRTENDSET(QObject * parent) : QObject(parent) 
,tableName("PC_PRTENDSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTENDSET 
PC_PRTENDSET::~PC_PRTENDSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTENDSET

// begin method functions
void PC_PRTENDSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTENDSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTENDSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTENDSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTENDSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTENDSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTENDSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTENDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTENDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTENDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTENDSET";
	qDebug(category) << "unsertSQL - update PC_PRTENDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PRTENDSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTENDSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PRTENDSET
}
void PC_PRTENDSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTENDSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTENDSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTENDSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTENDSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTENDSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTENDSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTENDSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTENDSET");
				createTable();
			}break;
		}
	}
}

bool PC_PRTENDSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTENDSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTENDSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTENDSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTENDSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTENDSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FCOHHSHSET::PC_FCOHHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_FCOHHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FCOHHSHSET 
PC_FCOHHSHSET::~PC_FCOHHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FCOHHSHSET

// begin method functions
void PC_FCOHHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FCOHHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FCOHHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FCOHHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FCOHHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FCOHHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FCOHHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FCOHHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FCOHHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FCOHHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FCOHHSHSET";
	qDebug(category) << "unsertSQL - update PC_FCOHHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_FCOHHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FCOHHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_FCOHHSHSET
}
void PC_FCOHHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FCOHHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FCOHHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FCOHHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FCOHHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FCOHHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FCOHHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FCOHHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FCOHHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_FCOHHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FCOHHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FCOHHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FCOHHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FCOHHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FCOHHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MPIREC::PC_MPIREC(QObject * parent) : QObject(parent) 
,tableName("PC_MPIREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MPIREC 
PC_MPIREC::~PC_MPIREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_MPICODE.clear();
	PC_MPISEQ.clear();
	PC_MPIEFDAT.clear();
	PC_MPIINDAT.clear();
	PC_MPICPFLG.clear();
	PC_MPIPRUFLG.clear();
	PC_MPITHR.clear();
	PC_MPIOSHR.clear();
	PC_MPIORHR.clear();
	PC_MPISLSHR.clear();
	PC_MPISLRHR.clear();
	PC_MPISMSHR.clear();
	PC_MPISMRHR.clear();
	PC_MPIYLD.clear();
	PC_MPISPROC.clear();
	PC_MPIYSCMT.clear();
	PC_MPIYSCMO.clear();
	PC_MPIYSADL.clear();
	PC_MPIYSCDL.clear();
	PC_MPIYSAO1.clear();
	PC_MPIYSCO1.clear();
	PC_MPIYSAO2.clear();
	PC_MPIYSCO2.clear();
	PC_MPIYSAOP.clear();
	PC_MPIYSCOP.clear();
	PC_MPIYSAOO.clear();
	PC_MPIYSCOO.clear();
	PC_MPIQUE.clear();
	PC_MPI_LASTUPD.clear();
	PC_MBOWIPACCT.clear();
	PC_WKCNTR.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MPIREC

// begin method functions
void PC_MPIREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MPIREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MPIREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MPIREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MPIREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPICODE, PC_MPISEQ, PC_MPIEFDAT, PC_MPIINDAT, PC_MPICPFLG, PC_MPIPRUFLG, PC_MPITHR, PC_MPIOSHR, PC_MPIORHR, PC_MPISLSHR, PC_MPISLRHR, PC_MPISMSHR, PC_MPISMRHR, PC_MPIYLD, PC_MPISPROC, PC_MPIYSCMT, PC_MPIYSCMO, PC_MPIYSADL, PC_MPIYSCDL, PC_MPIYSAO1, PC_MPIYSCO1, PC_MPIYSAO2, PC_MPIYSCO2, PC_MPIYSAOP, PC_MPIYSCOP, PC_MPIYSAOO, PC_MPIYSCOO, PC_MPIQUE, PC_MPI_LASTUPD, PC_MBOWIPACCT, PC_WKCNTR from PC_MPIREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MPIREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MPIREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPICODE, PC_MPISEQ, PC_MPIEFDAT, PC_MPIINDAT, PC_MPICPFLG, PC_MPIPRUFLG, PC_MPITHR, PC_MPIOSHR, PC_MPIORHR, PC_MPISLSHR, PC_MPISLRHR, PC_MPISMSHR, PC_MPISMRHR, PC_MPIYLD, PC_MPISPROC, PC_MPIYSCMT, PC_MPIYSCMO, PC_MPIYSADL, PC_MPIYSCDL, PC_MPIYSAO1, PC_MPIYSCO1, PC_MPIYSAO2, PC_MPIYSCO2, PC_MPIYSAOP, PC_MPIYSCOP, PC_MPIYSAOO, PC_MPIYSCOO, PC_MPIQUE, PC_MPI_LASTUPD, PC_MBOWIPACCT, PC_WKCNTR ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MPIREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MPICODE = ?, PC_MPISEQ = ?, PC_MPIEFDAT = ?, PC_MPIINDAT = ?, PC_MPICPFLG = ?, PC_MPIPRUFLG = ?, PC_MPITHR = ?, PC_MPIOSHR = ?, PC_MPIORHR = ?, PC_MPISLSHR = ?, PC_MPISLRHR = ?, PC_MPISMSHR = ?, PC_MPISMRHR = ?, PC_MPIYLD = ?, PC_MPISPROC = ?, PC_MPIYSCMT = ?, PC_MPIYSCMO = ?, PC_MPIYSADL = ?, PC_MPIYSCDL = ?, PC_MPIYSAO1 = ?, PC_MPIYSCO1 = ?, PC_MPIYSAO2 = ?, PC_MPIYSCO2 = ?, PC_MPIYSAOP = ?, PC_MPIYSCOP = ?, PC_MPIYSAOO = ?, PC_MPIYSCOO = ?, PC_MPIQUE = ?, PC_MPI_LASTUPD = ?, PC_MBOWIPACCT = ?, PC_WKCNTR = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MPIREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPICODE, PC_MPISEQ, PC_MPIEFDAT, PC_MPIINDAT, PC_MPICPFLG, PC_MPIPRUFLG, PC_MPITHR, PC_MPIOSHR, PC_MPIORHR, PC_MPISLSHR, PC_MPISLRHR, PC_MPISMSHR, PC_MPISMRHR, PC_MPIYLD, PC_MPISPROC, PC_MPIYSCMT, PC_MPIYSCMO, PC_MPIYSADL, PC_MPIYSCDL, PC_MPIYSAO1, PC_MPIYSCO1, PC_MPIYSAO2, PC_MPIYSCO2, PC_MPIYSAOP, PC_MPIYSCOP, PC_MPIYSAOO, PC_MPIYSCOO, PC_MPIQUE, PC_MPI_LASTUPD, PC_MBOWIPACCT, PC_WKCNTR ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPICODE, PC_MPISEQ, PC_MPIEFDAT, PC_MPIINDAT, PC_MPICPFLG, PC_MPIPRUFLG, PC_MPITHR, PC_MPIOSHR, PC_MPIORHR, PC_MPISLSHR, PC_MPISLRHR, PC_MPISMSHR, PC_MPISMRHR, PC_MPIYLD, PC_MPISPROC, PC_MPIYSCMT, PC_MPIYSCMO, PC_MPIYSADL, PC_MPIYSCDL, PC_MPIYSAO1, PC_MPIYSCO1, PC_MPIYSAO2, PC_MPIYSCO2, PC_MPIYSAOP, PC_MPIYSCOP, PC_MPIYSAOO, PC_MPIYSCOO, PC_MPIQUE, PC_MPI_LASTUPD, PC_MBOWIPACCT, PC_WKCNTR from PC_MPIREC";
	qDebug(category) << "unsertSQL - update PC_MPIREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MPICODE = ?, PC_MPISEQ = ?, PC_MPIEFDAT = ?, PC_MPIINDAT = ?, PC_MPICPFLG = ?, PC_MPIPRUFLG = ?, PC_MPITHR = ?, PC_MPIOSHR = ?, PC_MPIORHR = ?, PC_MPISLSHR = ?, PC_MPISLRHR = ?, PC_MPISMSHR = ?, PC_MPISMRHR = ?, PC_MPIYLD = ?, PC_MPISPROC = ?, PC_MPIYSCMT = ?, PC_MPIYSCMO = ?, PC_MPIYSADL = ?, PC_MPIYSCDL = ?, PC_MPIYSAO1 = ?, PC_MPIYSCO1 = ?, PC_MPIYSAO2 = ?, PC_MPIYSCO2 = ?, PC_MPIYSAOP = ?, PC_MPIYSCOP = ?, PC_MPIYSAOO = ?, PC_MPIYSCOO = ?, PC_MPIQUE = ?, PC_MPI_LASTUPD = ?, PC_MBOWIPACCT = ?, PC_WKCNTR = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_MPIREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MPIREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_MPICODE[2]";
	PC_MPICODE.resize(2);
	qDebug(category) << "Malloc - PC_MPISEQ[2]";
	PC_MPISEQ.resize(2);
	qDebug(category) << "Malloc - PC_MPIEFDAT[4]";
	PC_MPIEFDAT.resize(4);
	qDebug(category) << "Malloc - PC_MPIINDAT[4]";
	PC_MPIINDAT.resize(4);
	qDebug(category) << "Malloc - PC_MPICPFLG[2]";
	PC_MPICPFLG.resize(2);
	qDebug(category) << "Malloc - PC_MPIPRUFLG[2]";
	PC_MPIPRUFLG.resize(2);
	qDebug(category) << "Malloc - PC_MPITHR[8]";
	PC_MPITHR.resize(8);
	qDebug(category) << "Malloc - PC_MPIOSHR[8]";
	PC_MPIOSHR.resize(8);
	qDebug(category) << "Malloc - PC_MPIORHR[8]";
	PC_MPIORHR.resize(8);
	qDebug(category) << "Malloc - PC_MPISLSHR[8]";
	PC_MPISLSHR.resize(8);
	qDebug(category) << "Malloc - PC_MPISLRHR[8]";
	PC_MPISLRHR.resize(8);
	qDebug(category) << "Malloc - PC_MPISMSHR[8]";
	PC_MPISMSHR.resize(8);
	qDebug(category) << "Malloc - PC_MPISMRHR[8]";
	PC_MPISMRHR.resize(8);
	qDebug(category) << "Malloc - PC_MPIYLD[8]";
	PC_MPIYLD.resize(8);
	qDebug(category) << "Malloc - PC_MPISPROC[8]";
	PC_MPISPROC.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSCMT[8]";
	PC_MPIYSCMT.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSCMO[8]";
	PC_MPIYSCMO.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSADL[8]";
	PC_MPIYSADL.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSCDL[8]";
	PC_MPIYSCDL.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSAO1[8]";
	PC_MPIYSAO1.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSCO1[8]";
	PC_MPIYSCO1.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSAO2[8]";
	PC_MPIYSAO2.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSCO2[8]";
	PC_MPIYSCO2.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSAOP[8]";
	PC_MPIYSAOP.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSCOP[8]";
	PC_MPIYSCOP.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSAOO[8]";
	PC_MPIYSAOO.resize(8);
	qDebug(category) << "Malloc - PC_MPIYSCOO[8]";
	PC_MPIYSCOO.resize(8);
	qDebug(category) << "Malloc - PC_MPIQUE[10]";
	PC_MPIQUE.resize(10);
	qDebug(category) << "Malloc - PC_MPI_LASTUPD[23]";
	PC_MPI_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_MBOWIPACCT[24]";
	PC_MBOWIPACCT.resize(24);
	qDebug(category) << "Malloc - PC_WKCNTR[10]";
	PC_WKCNTR.resize(10);

#pragma endregion Resize Fields PC_MPIREC
}
void PC_MPIREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MPIREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MPIREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MPIREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MPIREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MPIREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MPIREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MPIREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MPIREC");
				createTable();
			}break;
		}
	}
}

bool PC_MPIREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_MPICODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, PC_MPICODE.data(), 2, &cbPC_MPICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_MPISEQ ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_MPISEQ.data(), 2, &cbPC_MPISEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 4 Buffer Size: 4 FieldName: PC_MPIEFDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 4, PC_MPIEFDAT.data(), 4, &cbPC_MPIEFDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 4 Buffer Size: 4 FieldName: PC_MPIINDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 4, PC_MPIINDAT.data(), 4, &cbPC_MPIINDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 5 Buffer Size: 2 FieldName: PC_MPICPFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 5, PC_MPICPFLG.data(), 2, &cbPC_MPICPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_MPIPRUFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 5, PC_MPIPRUFLG.data(), 2, &cbPC_MPIPRUFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_MPITHR ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 8, PC_MPITHR.data(), 8, &cbPC_MPITHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 8 Buffer Size: 8 FieldName: PC_MPIOSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 8, PC_MPIOSHR.data(), 8, &cbPC_MPIOSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_MPIORHR ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 8, PC_MPIORHR.data(), 8, &cbPC_MPIORHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_MPISLSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 8, PC_MPISLSHR.data(), 8, &cbPC_MPISLSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_MPISLRHR ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 8, PC_MPISLRHR.data(), 8, &cbPC_MPISLRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_MPISMSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 8, PC_MPISMSHR.data(), 8, &cbPC_MPISMSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 8 Buffer Size: 8 FieldName: PC_MPISMRHR ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 8, PC_MPISMRHR.data(), 8, &cbPC_MPISMRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 8 Buffer Size: 8 FieldName: PC_MPIYLD ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 8, PC_MPIYLD.data(), 8, &cbPC_MPIYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [20] Type: 8 Buffer Size: 8 FieldName: PC_MPISPROC ";
		r = ::SQLBindCol(hStmt_Fetch, 20, 8, PC_MPISPROC.data(), 8, &cbPC_MPISPROC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [21] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCMT ";
		r = ::SQLBindCol(hStmt_Fetch, 21, 8, PC_MPIYSCMT.data(), 8, &cbPC_MPIYSCMT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCMO ";
		r = ::SQLBindCol(hStmt_Fetch, 22, 8, PC_MPIYSCMO.data(), 8, &cbPC_MPIYSCMO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [23] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSADL ";
		r = ::SQLBindCol(hStmt_Fetch, 23, 8, PC_MPIYSADL.data(), 8, &cbPC_MPIYSADL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCDL ";
		r = ::SQLBindCol(hStmt_Fetch, 24, 8, PC_MPIYSCDL.data(), 8, &cbPC_MPIYSCDL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [25] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSAO1 ";
		r = ::SQLBindCol(hStmt_Fetch, 25, 8, PC_MPIYSAO1.data(), 8, &cbPC_MPIYSAO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [26] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCO1 ";
		r = ::SQLBindCol(hStmt_Fetch, 26, 8, PC_MPIYSCO1.data(), 8, &cbPC_MPIYSCO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [27] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSAO2 ";
		r = ::SQLBindCol(hStmt_Fetch, 27, 8, PC_MPIYSAO2.data(), 8, &cbPC_MPIYSAO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [28] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCO2 ";
		r = ::SQLBindCol(hStmt_Fetch, 28, 8, PC_MPIYSCO2.data(), 8, &cbPC_MPIYSCO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [29] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSAOP ";
		r = ::SQLBindCol(hStmt_Fetch, 29, 8, PC_MPIYSAOP.data(), 8, &cbPC_MPIYSAOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [30] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCOP ";
		r = ::SQLBindCol(hStmt_Fetch, 30, 8, PC_MPIYSCOP.data(), 8, &cbPC_MPIYSCOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [31] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSAOO ";
		r = ::SQLBindCol(hStmt_Fetch, 31, 8, PC_MPIYSAOO.data(), 8, &cbPC_MPIYSAOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [32] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCOO ";
		r = ::SQLBindCol(hStmt_Fetch, 32, 8, PC_MPIYSCOO.data(), 8, &cbPC_MPIYSCOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [33] Type: 1 Buffer Size: 10 FieldName: PC_MPIQUE ";
		r = ::SQLBindCol(hStmt_Fetch, 33, 1, PC_MPIQUE.data(), 10, &cbPC_MPIQUE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [34] Type: 1 Buffer Size: 23 FieldName: PC_MPI_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 34, 1, PC_MPI_LASTUPD.data(), 23, &cbPC_MPI_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [35] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = ::SQLBindCol(hStmt_Fetch, 35, 1, PC_MBOWIPACCT.data(), 24, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [36] Type: 1 Buffer Size: 10 FieldName: PC_WKCNTR ";
		r = ::SQLBindCol(hStmt_Fetch, 36, 1, PC_WKCNTR.data(), 10, &cbPC_WKCNTR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MPIREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_MPICODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MPICODE.constData(), 0, &cbPC_MPICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_MPISEQ ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MPISEQ.constData(), 0, &cbPC_MPISEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 4 Buffer Size: 4 FieldName: PC_MPIEFDAT ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_MPIEFDAT.constData(), 0, &cbPC_MPIEFDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 4 Buffer Size: 4 FieldName: PC_MPIINDAT ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_MPIINDAT.constData(), 0, &cbPC_MPIINDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 5 Buffer Size: 2 FieldName: PC_MPICPFLG ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MPICPFLG.constData(), 0, &cbPC_MPICPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_MPIPRUFLG ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MPIPRUFLG.constData(), 0, &cbPC_MPIPRUFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_MPITHR ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPITHR.constData(), 0, &cbPC_MPITHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 8 Buffer Size: 8 FieldName: PC_MPIOSHR ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIOSHR.constData(), 0, &cbPC_MPIOSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_MPIORHR ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIORHR.constData(), 0, &cbPC_MPIORHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_MPISLSHR ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPISLSHR.constData(), 0, &cbPC_MPISLSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_MPISLRHR ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPISLRHR.constData(), 0, &cbPC_MPISLRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_MPISMSHR ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPISMSHR.constData(), 0, &cbPC_MPISMSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 8 Buffer Size: 8 FieldName: PC_MPISMRHR ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPISMRHR.constData(), 0, &cbPC_MPISMRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 8 Buffer Size: 8 FieldName: PC_MPIYLD ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYLD.constData(), 0, &cbPC_MPIYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [20] Type: 8 Buffer Size: 8 FieldName: PC_MPISPROC ";
		r = SQLBindParameter(hStmt_Insert, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPISPROC.constData(), 0, &cbPC_MPISPROC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [21] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCMT ";
		r = SQLBindParameter(hStmt_Insert, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSCMT.constData(), 0, &cbPC_MPIYSCMT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCMO ";
		r = SQLBindParameter(hStmt_Insert, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSCMO.constData(), 0, &cbPC_MPIYSCMO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [23] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSADL ";
		r = SQLBindParameter(hStmt_Insert, 23, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSADL.constData(), 0, &cbPC_MPIYSADL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCDL ";
		r = SQLBindParameter(hStmt_Insert, 24, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSCDL.constData(), 0, &cbPC_MPIYSCDL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [25] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSAO1 ";
		r = SQLBindParameter(hStmt_Insert, 25, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSAO1.constData(), 0, &cbPC_MPIYSAO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [26] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCO1 ";
		r = SQLBindParameter(hStmt_Insert, 26, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSCO1.constData(), 0, &cbPC_MPIYSCO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [27] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSAO2 ";
		r = SQLBindParameter(hStmt_Insert, 27, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSAO2.constData(), 0, &cbPC_MPIYSAO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [28] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCO2 ";
		r = SQLBindParameter(hStmt_Insert, 28, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSCO2.constData(), 0, &cbPC_MPIYSCO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [29] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSAOP ";
		r = SQLBindParameter(hStmt_Insert, 29, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSAOP.constData(), 0, &cbPC_MPIYSAOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [30] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCOP ";
		r = SQLBindParameter(hStmt_Insert, 30, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSCOP.constData(), 0, &cbPC_MPIYSCOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [31] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSAOO ";
		r = SQLBindParameter(hStmt_Insert, 31, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSAOO.constData(), 0, &cbPC_MPIYSAOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [32] Type: 8 Buffer Size: 8 FieldName: PC_MPIYSCOO ";
		r = SQLBindParameter(hStmt_Insert, 32, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MPIYSCOO.constData(), 0, &cbPC_MPIYSCOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [33] Type: 1 Buffer Size: 10 FieldName: PC_MPIQUE ";
		r = SQLBindParameter(hStmt_Insert, 33, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_MPIQUE.constData(), 0, &cbPC_MPIQUE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [34] Type: 1 Buffer Size: 23 FieldName: PC_MPI_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 34, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_MPI_LASTUPD.constData(), 0, &cbPC_MPI_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [35] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = SQLBindParameter(hStmt_Insert, 35, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 24, 0, (SQLPOINTER)PC_MBOWIPACCT.constData(), 0, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [36] Type: 1 Buffer Size: 10 FieldName: PC_WKCNTR ";
		r = SQLBindParameter(hStmt_Insert, 36, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_WKCNTR.constData(), 0, &cbPC_WKCNTR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 37, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 38, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 39, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MPIREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MPIREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MPIREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MPIREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FRMPVHSHSET::PC_FRMPVHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_FRMPVHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FRMPVHSHSET 
PC_FRMPVHSHSET::~PC_FRMPVHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FRMPVHSHSET

// begin method functions
void PC_FRMPVHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FRMPVHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FRMPVHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FRMPVHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FRMPVHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMPVHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FRMPVHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FRMPVHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FRMPVHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FRMPVHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMPVHSHSET";
	qDebug(category) << "unsertSQL - update PC_FRMPVHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_FRMPVHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FRMPVHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_FRMPVHSHSET
}
void PC_FRMPVHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FRMPVHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FRMPVHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FRMPVHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FRMPVHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FRMPVHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FRMPVHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FRMPVHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FRMPVHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_FRMPVHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FRMPVHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FRMPVHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FRMPVHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FRMPVHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FRMPVHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_WKCPISET::PC_WKCPISET(QObject * parent) : QObject(parent) 
,tableName("PC_WKCPISET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_WKCPISET 
PC_WKCPISET::~PC_WKCPISET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_WKCPISET

// begin method functions
void PC_WKCPISET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_WKCPISET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_WKCPISET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_WKCPISET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_WKCPISET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WKCPISET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_WKCPISET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_WKCPISET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_WKCPISET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_WKCPISET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WKCPISET";
	qDebug(category) << "unsertSQL - update PC_WKCPISET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_WKCPISET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_WKCPISET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_WKCPISET
}
void PC_WKCPISET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_WKCPISET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_WKCPISET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_WKCPISET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_WKCPISET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_WKCPISET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_WKCPISET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_WKCPISET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_WKCPISET");
				createTable();
			}break;
		}
	}
}

bool PC_WKCPISET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_WKCPISET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_WKCPISET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_WKCPISET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_WKCPISET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_WKCPISET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_WOHWODSET::PC_WOHWODSET(QObject * parent) : QObject(parent) 
,tableName("PC_WOHWODSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_WOHWODSET 
PC_WOHWODSET::~PC_WOHWODSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_WOHWODSET

// begin method functions
void PC_WOHWODSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_WOHWODSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_WOHWODSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_WOHWODSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_WOHWODSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WOHWODSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_WOHWODSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_WOHWODSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_WOHWODSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_WOHWODSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WOHWODSET";
	qDebug(category) << "unsertSQL - update PC_WOHWODSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_WOHWODSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_WOHWODSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_WOHWODSET
}
void PC_WOHWODSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_WOHWODSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_WOHWODSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_WOHWODSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_WOHWODSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_WOHWODSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_WOHWODSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_WOHWODSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_WOHWODSET");
				createTable();
			}break;
		}
	}
}

bool PC_WOHWODSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_WOHWODSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_WOHWODSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_WOHWODSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_WOHWODSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_WOHWODSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_USRFRMPVSET::PC_USRFRMPVSET(QObject * parent) : QObject(parent) 
,tableName("PC_USRFRMPVSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_USRFRMPVSET 
PC_USRFRMPVSET::~PC_USRFRMPVSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_USRFRMPVSET

// begin method functions
void PC_USRFRMPVSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_USRFRMPVSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_USRFRMPVSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_USRFRMPVSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_USRFRMPVSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_USRFRMPVSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_USRFRMPVSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_USRFRMPVSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_USRFRMPVSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_USRFRMPVSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_USRFRMPVSET";
	qDebug(category) << "unsertSQL - update PC_USRFRMPVSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_USRFRMPVSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_USRFRMPVSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_USRFRMPVSET
}
void PC_USRFRMPVSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_USRFRMPVSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_USRFRMPVSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_USRFRMPVSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_USRFRMPVSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_USRFRMPVSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_USRFRMPVSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_USRFRMPVSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_USRFRMPVSET");
				createTable();
			}break;
		}
	}
}

bool PC_USRFRMPVSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_USRFRMPVSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_USRFRMPVSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_USRFRMPVSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_USRFRMPVSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_USRFRMPVSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FCOHFCODESSET::PC_FCOHFCODESSET(QObject * parent) : QObject(parent) 
,tableName("PC_FCOHFCODESSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FCOHFCODESSET 
PC_FCOHFCODESSET::~PC_FCOHFCODESSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FCOHFCODESSET

// begin method functions
void PC_FCOHFCODESSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FCOHFCODESSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FCOHFCODESSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FCOHFCODESSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FCOHFCODESSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FCOHFCODESSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FCOHFCODESSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FCOHFCODESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FCOHFCODESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FCOHFCODESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FCOHFCODESSET";
	qDebug(category) << "unsertSQL - update PC_FCOHFCODESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_FCOHFCODESSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FCOHFCODESSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_FCOHFCODESSET
}
void PC_FCOHFCODESSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FCOHFCODESSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FCOHFCODESSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FCOHFCODESSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FCOHFCODESSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FCOHFCODESSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FCOHFCODESSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FCOHFCODESSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FCOHFCODESSET");
				createTable();
			}break;
		}
	}
}

bool PC_FCOHFCODESSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FCOHFCODESSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FCOHFCODESSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FCOHFCODESSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FCOHFCODESSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FCOHFCODESSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PIPISAFSET::PC_PIPISAFSET(QObject * parent) : QObject(parent) 
,tableName("PC_PIPISAFSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PIPISAFSET 
PC_PIPISAFSET::~PC_PIPISAFSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PIPISAFSET

// begin method functions
void PC_PIPISAFSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PIPISAFSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PIPISAFSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PIPISAFSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PIPISAFSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PIPISAFSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PIPISAFSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PIPISAFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PIPISAFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PIPISAFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PIPISAFSET";
	qDebug(category) << "unsertSQL - update PC_PIPISAFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PIPISAFSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PIPISAFSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PIPISAFSET
}
void PC_PIPISAFSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PIPISAFSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PIPISAFSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PIPISAFSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PIPISAFSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PIPISAFSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PIPISAFSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PIPISAFSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PIPISAFSET");
				createTable();
			}break;
		}
	}
}

bool PC_PIPISAFSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PIPISAFSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PIPISAFSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PIPISAFSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PIPISAFSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PIPISAFSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_INGIDESSET::PC_INGIDESSET(QObject * parent) : QObject(parent) 
,tableName("PC_INGIDESSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_INGIDESSET 
PC_INGIDESSET::~PC_INGIDESSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_INGIDESSET

// begin method functions
void PC_INGIDESSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_INGIDESSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_INGIDESSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_INGIDESSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_INGIDESSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_INGIDESSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_INGIDESSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_INGIDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_INGIDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_INGIDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_INGIDESSET";
	qDebug(category) << "unsertSQL - update PC_INGIDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_INGIDESSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_INGIDESSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_INGIDESSET
}
void PC_INGIDESSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_INGIDESSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_INGIDESSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_INGIDESSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_INGIDESSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_INGIDESSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_INGIDESSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_INGIDESSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_INGIDESSET");
				createTable();
			}break;
		}
	}
}

bool PC_INGIDESSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_INGIDESSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_INGIDESSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_INGIDESSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_INGIDESSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_INGIDESSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_ALTHADTSET::PC_ALTHADTSET(QObject * parent) : QObject(parent) 
,tableName("PC_ALTHADTSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_ALTHADTSET 
PC_ALTHADTSET::~PC_ALTHADTSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_ALTHADTSET

// begin method functions
void PC_ALTHADTSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_ALTHADTSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_ALTHADTSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_ALTHADTSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_ALTHADTSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_ALTHADTSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_ALTHADTSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_ALTHADTSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_ALTHADTSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_ALTHADTSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_ALTHADTSET";
	qDebug(category) << "unsertSQL - update PC_ALTHADTSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_ALTHADTSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_ALTHADTSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_ALTHADTSET
}
void PC_ALTHADTSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_ALTHADTSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_ALTHADTSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_ALTHADTSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_ALTHADTSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_ALTHADTSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_ALTHADTSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_ALTHADTSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_ALTHADTSET");
				createTable();
			}break;
		}
	}
}

bool PC_ALTHADTSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_ALTHADTSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_ALTHADTSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_ALTHADTSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_ALTHADTSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_ALTHADTSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TRKNOHSHSET::PC_TRKNOHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_TRKNOHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TRKNOHSHSET 
PC_TRKNOHSHSET::~PC_TRKNOHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TRKNOHSHSET

// begin method functions
void PC_TRKNOHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TRKNOHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TRKNOHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TRKNOHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TRKNOHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TRKNOHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TRKNOHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TRKNOHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TRKNOHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TRKNOHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TRKNOHSHSET";
	qDebug(category) << "unsertSQL - update PC_TRKNOHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_TRKNOHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TRKNOHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_TRKNOHSHSET
}
void PC_TRKNOHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TRKNOHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TRKNOHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TRKNOHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TRKNOHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TRKNOHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TRKNOHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TRKNOHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TRKNOHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_TRKNOHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TRKNOHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TRKNOHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TRKNOHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TRKNOHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TRKNOHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_APIHAPITSET::PC_APIHAPITSET(QObject * parent) : QObject(parent) 
,tableName("PC_APIHAPITSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_APIHAPITSET 
PC_APIHAPITSET::~PC_APIHAPITSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_APIHAPITSET

// begin method functions
void PC_APIHAPITSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_APIHAPITSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_APIHAPITSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_APIHAPITSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_APIHAPITSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APIHAPITSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_APIHAPITSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_APIHAPITSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_APIHAPITSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_APIHAPITSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APIHAPITSET";
	qDebug(category) << "unsertSQL - update PC_APIHAPITSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_APIHAPITSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_APIHAPITSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_APIHAPITSET
}
void PC_APIHAPITSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_APIHAPITSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_APIHAPITSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_APIHAPITSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_APIHAPITSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_APIHAPITSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_APIHAPITSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_APIHAPITSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_APIHAPITSET");
				createTable();
			}break;
		}
	}
}

bool PC_APIHAPITSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_APIHAPITSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_APIHAPITSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_APIHAPITSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_APIHAPITSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_APIHAPITSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTWODSET::PC_PRTWODSET(QObject * parent) : QObject(parent) 
,tableName("PC_PRTWODSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTWODSET 
PC_PRTWODSET::~PC_PRTWODSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTWODSET

// begin method functions
void PC_PRTWODSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTWODSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTWODSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTWODSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTWODSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTWODSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTWODSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTWODSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTWODSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTWODSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTWODSET";
	qDebug(category) << "unsertSQL - update PC_PRTWODSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PRTWODSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTWODSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PRTWODSET
}
void PC_PRTWODSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTWODSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTWODSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTWODSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTWODSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTWODSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTWODSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTWODSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTWODSET");
				createTable();
			}break;
		}
	}
}

bool PC_PRTWODSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTWODSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTWODSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTWODSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTWODSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTWODSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_CHGHHSHSET::PC_CHGHHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_CHGHHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_CHGHHSHSET 
PC_CHGHHSHSET::~PC_CHGHHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_CHGHHSHSET

// begin method functions
void PC_CHGHHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_CHGHHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_CHGHHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_CHGHHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_CHGHHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CHGHHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_CHGHHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_CHGHHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_CHGHHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_CHGHHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CHGHHSHSET";
	qDebug(category) << "unsertSQL - update PC_CHGHHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_CHGHHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_CHGHHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_CHGHHSHSET
}
void PC_CHGHHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_CHGHHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_CHGHHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_CHGHHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_CHGHHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_CHGHHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_CHGHHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_CHGHHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_CHGHHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_CHGHHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_CHGHHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_CHGHHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_CHGHHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_CHGHHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_CHGHHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_APIHHSHSET::PC_APIHHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_APIHHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_APIHHSHSET 
PC_APIHHSHSET::~PC_APIHHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_APIHHSHSET

// begin method functions
void PC_APIHHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_APIHHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_APIHHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_APIHHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_APIHHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APIHHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_APIHHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_APIHHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_APIHHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_APIHHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APIHHSHSET";
	qDebug(category) << "unsertSQL - update PC_APIHHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_APIHHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_APIHHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_APIHHSHSET
}
void PC_APIHHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_APIHHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_APIHHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_APIHHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_APIHHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_APIHHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_APIHHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_APIHHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_APIHHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_APIHHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_APIHHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_APIHHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_APIHHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_APIHHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_APIHHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_USRREC::PC_USRREC(QObject * parent) : QObject(parent) 
,tableName("PC_USRREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_USRREC 
PC_USRREC::~PC_USRREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_USRNAME.clear();
	PC_USRENDAT.clear();
	PC_USR_LASTUPD.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_USRREC

// begin method functions
void PC_USRREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_USRREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_USRREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_USRREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_USRREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_USRNAME, PC_USRENDAT, PC_USR_LASTUPD from PC_USRREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_USRREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_USRREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_USRNAME, PC_USRENDAT, PC_USR_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_USRREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_USRNAME = ?, PC_USRENDAT = ?, PC_USR_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_USRREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_USRNAME, PC_USRENDAT, PC_USR_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_USRNAME, PC_USRENDAT, PC_USR_LASTUPD from PC_USRREC";
	qDebug(category) << "unsertSQL - update PC_USRREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_USRNAME = ?, PC_USRENDAT = ?, PC_USR_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_USRREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_USRREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_USRNAME[12]";
	PC_USRNAME.resize(12);
	qDebug(category) << "Malloc - PC_USRENDAT[4]";
	PC_USRENDAT.resize(4);
	qDebug(category) << "Malloc - PC_USR_LASTUPD[23]";
	PC_USR_LASTUPD.resize(23);

#pragma endregion Resize Fields PC_USRREC
}
void PC_USRREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_USRREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_USRREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_USRREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_USRREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_USRREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_USRREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_USRREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_USRREC");
				createTable();
			}break;
		}
	}
}

bool PC_USRREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 12 FieldName: PC_USRNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_USRNAME.data(), 12, &cbPC_USRNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: PC_USRENDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, PC_USRENDAT.data(), 4, &cbPC_USRENDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_USR_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_USR_LASTUPD.data(), 23, &cbPC_USR_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_USRREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 12 FieldName: PC_USRNAME ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 12, 0, (SQLPOINTER)PC_USRNAME.constData(), 0, &cbPC_USRNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: PC_USRENDAT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_USRENDAT.constData(), 0, &cbPC_USRENDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_USR_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_USR_LASTUPD.constData(), 0, &cbPC_USR_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_USRREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_USRREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_USRREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_USRREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MPISAFREC::PC_MPISAFREC(QObject * parent) : QObject(parent) 
,tableName("PC_MPISAFREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MPISAFREC 
PC_MPISAFREC::~PC_MPISAFREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_MPISAFCODE.clear();
	PC_MPISAFTEXT.clear();
	PC_MPISAF_LASTUPD.clear();
	PC_MPICODE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MPISAFREC

// begin method functions
void PC_MPISAFREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MPISAFREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MPISAFREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MPISAFREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MPISAFREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPISAFCODE, PC_MPISAFTEXT, PC_MPISAF_LASTUPD, PC_MPICODE from PC_MPISAFREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MPISAFREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MPISAFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPISAFCODE, PC_MPISAFTEXT, PC_MPISAF_LASTUPD, PC_MPICODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MPISAFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MPISAFCODE = ?, PC_MPISAFTEXT = ?, PC_MPISAF_LASTUPD = ?, PC_MPICODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MPISAFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPISAFCODE, PC_MPISAFTEXT, PC_MPISAF_LASTUPD, PC_MPICODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPISAFCODE, PC_MPISAFTEXT, PC_MPISAF_LASTUPD, PC_MPICODE from PC_MPISAFREC";
	qDebug(category) << "unsertSQL - update PC_MPISAFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MPISAFCODE = ?, PC_MPISAFTEXT = ?, PC_MPISAF_LASTUPD = ?, PC_MPICODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_MPISAFREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MPISAFREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_MPISAFCODE[10]";
	PC_MPISAFCODE.resize(10);
	qDebug(category) << "Malloc - PC_MPISAFTEXT[60]";
	PC_MPISAFTEXT.resize(60);
	qDebug(category) << "Malloc - PC_MPISAF_LASTUPD[23]";
	PC_MPISAF_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_MPICODE[2]";
	PC_MPICODE.resize(2);

#pragma endregion Resize Fields PC_MPISAFREC
}
void PC_MPISAFREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MPISAFREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MPISAFREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MPISAFREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MPISAFREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MPISAFREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MPISAFREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MPISAFREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MPISAFREC");
				createTable();
			}break;
		}
	}
}

bool PC_MPISAFREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_MPISAFCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_MPISAFCODE.data(), 10, &cbPC_MPISAFCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_MPISAFTEXT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_MPISAFTEXT.data(), 60, &cbPC_MPISAFTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_MPISAF_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_MPISAF_LASTUPD.data(), 23, &cbPC_MPISAF_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_MPICODE ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 5, PC_MPICODE.data(), 2, &cbPC_MPICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MPISAFREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_MPISAFCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_MPISAFCODE.constData(), 0, &cbPC_MPISAFCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_MPISAFTEXT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_MPISAFTEXT.constData(), 0, &cbPC_MPISAFTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_MPISAF_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_MPISAF_LASTUPD.constData(), 0, &cbPC_MPISAF_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_MPICODE ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MPICODE.constData(), 0, &cbPC_MPICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MPISAFREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MPISAFREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MPISAFREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MPISAFREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FRMFCODSET::PC_FRMFCODSET(QObject * parent) : QObject(parent) 
,tableName("PC_FRMFCODSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FRMFCODSET 
PC_FRMFCODSET::~PC_FRMFCODSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FRMFCODSET

// begin method functions
void PC_FRMFCODSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FRMFCODSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FRMFCODSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FRMFCODSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FRMFCODSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMFCODSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FRMFCODSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FRMFCODSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FRMFCODSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FRMFCODSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMFCODSET";
	qDebug(category) << "unsertSQL - update PC_FRMFCODSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_FRMFCODSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FRMFCODSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_FRMFCODSET
}
void PC_FRMFCODSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FRMFCODSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FRMFCODSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FRMFCODSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FRMFCODSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FRMFCODSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FRMFCODSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FRMFCODSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FRMFCODSET");
				createTable();
			}break;
		}
	}
}

bool PC_FRMFCODSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FRMFCODSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FRMFCODSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FRMFCODSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FRMFCODSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FRMFCODSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_APITREC::PC_APITREC(QObject * parent) : QObject(parent) 
,tableName("PC_APITREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_APITREC 
PC_APITREC::~PC_APITREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_APITCODE.clear();
	PC_APITSEQ.clear();
	PC_APITEFDAT.clear();
	PC_APITINDAT.clear();
	PC_APITCPFLG.clear();
	PC_APITPRUFLG.clear();
	PC_APITTHR.clear();
	PC_APITOSHR.clear();
	PC_APITORHR.clear();
	PC_APITSLSHR.clear();
	PC_APITSLRHR.clear();
	PC_APITSMSHR.clear();
	PC_APITSMRHR.clear();
	PC_APITYLD.clear();
	PC_APITSPROC.clear();
	PC_APITPLSHR.clear();
	PC_APITPLRHR.clear();
	PC_APITPMSHR.clear();
	PC_APITPMRHR.clear();
	PC_APITPYLD.clear();
	PC_APITPPROC.clear();
	PC_APITQUE.clear();
	PC_APIT_LASTUPD.clear();
	PC_APIHSUBPNO.clear();
	PC_WKCNTR.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_APITREC

// begin method functions
void PC_APITREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_APITREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_APITREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_APITREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_APITREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_APITCODE, PC_APITSEQ, PC_APITEFDAT, PC_APITINDAT, PC_APITCPFLG, PC_APITPRUFLG, PC_APITTHR, PC_APITOSHR, PC_APITORHR, PC_APITSLSHR, PC_APITSLRHR, PC_APITSMSHR, PC_APITSMRHR, PC_APITYLD, PC_APITSPROC, PC_APITPLSHR, PC_APITPLRHR, PC_APITPMSHR, PC_APITPMRHR, PC_APITPYLD, PC_APITPPROC, PC_APITQUE, PC_APIT_LASTUPD, PC_APIHSUBPNO, PC_WKCNTR from PC_APITREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_APITREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_APITREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_APITCODE, PC_APITSEQ, PC_APITEFDAT, PC_APITINDAT, PC_APITCPFLG, PC_APITPRUFLG, PC_APITTHR, PC_APITOSHR, PC_APITORHR, PC_APITSLSHR, PC_APITSLRHR, PC_APITSMSHR, PC_APITSMRHR, PC_APITYLD, PC_APITSPROC, PC_APITPLSHR, PC_APITPLRHR, PC_APITPMSHR, PC_APITPMRHR, PC_APITPYLD, PC_APITPPROC, PC_APITQUE, PC_APIT_LASTUPD, PC_APIHSUBPNO, PC_WKCNTR ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_APITREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_APITCODE = ?, PC_APITSEQ = ?, PC_APITEFDAT = ?, PC_APITINDAT = ?, PC_APITCPFLG = ?, PC_APITPRUFLG = ?, PC_APITTHR = ?, PC_APITOSHR = ?, PC_APITORHR = ?, PC_APITSLSHR = ?, PC_APITSLRHR = ?, PC_APITSMSHR = ?, PC_APITSMRHR = ?, PC_APITYLD = ?, PC_APITSPROC = ?, PC_APITPLSHR = ?, PC_APITPLRHR = ?, PC_APITPMSHR = ?, PC_APITPMRHR = ?, PC_APITPYLD = ?, PC_APITPPROC = ?, PC_APITQUE = ?, PC_APIT_LASTUPD = ?, PC_APIHSUBPNO = ?, PC_WKCNTR = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_APITREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_APITCODE, PC_APITSEQ, PC_APITEFDAT, PC_APITINDAT, PC_APITCPFLG, PC_APITPRUFLG, PC_APITTHR, PC_APITOSHR, PC_APITORHR, PC_APITSLSHR, PC_APITSLRHR, PC_APITSMSHR, PC_APITSMRHR, PC_APITYLD, PC_APITSPROC, PC_APITPLSHR, PC_APITPLRHR, PC_APITPMSHR, PC_APITPMRHR, PC_APITPYLD, PC_APITPPROC, PC_APITQUE, PC_APIT_LASTUPD, PC_APIHSUBPNO, PC_WKCNTR ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_APITCODE, PC_APITSEQ, PC_APITEFDAT, PC_APITINDAT, PC_APITCPFLG, PC_APITPRUFLG, PC_APITTHR, PC_APITOSHR, PC_APITORHR, PC_APITSLSHR, PC_APITSLRHR, PC_APITSMSHR, PC_APITSMRHR, PC_APITYLD, PC_APITSPROC, PC_APITPLSHR, PC_APITPLRHR, PC_APITPMSHR, PC_APITPMRHR, PC_APITPYLD, PC_APITPPROC, PC_APITQUE, PC_APIT_LASTUPD, PC_APIHSUBPNO, PC_WKCNTR from PC_APITREC";
	qDebug(category) << "unsertSQL - update PC_APITREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_APITCODE = ?, PC_APITSEQ = ?, PC_APITEFDAT = ?, PC_APITINDAT = ?, PC_APITCPFLG = ?, PC_APITPRUFLG = ?, PC_APITTHR = ?, PC_APITOSHR = ?, PC_APITORHR = ?, PC_APITSLSHR = ?, PC_APITSLRHR = ?, PC_APITSMSHR = ?, PC_APITSMRHR = ?, PC_APITYLD = ?, PC_APITSPROC = ?, PC_APITPLSHR = ?, PC_APITPLRHR = ?, PC_APITPMSHR = ?, PC_APITPMRHR = ?, PC_APITPYLD = ?, PC_APITPPROC = ?, PC_APITQUE = ?, PC_APIT_LASTUPD = ?, PC_APIHSUBPNO = ?, PC_WKCNTR = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_APITREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_APITREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_APITCODE[2]";
	PC_APITCODE.resize(2);
	qDebug(category) << "Malloc - PC_APITSEQ[2]";
	PC_APITSEQ.resize(2);
	qDebug(category) << "Malloc - PC_APITEFDAT[4]";
	PC_APITEFDAT.resize(4);
	qDebug(category) << "Malloc - PC_APITINDAT[4]";
	PC_APITINDAT.resize(4);
	qDebug(category) << "Malloc - PC_APITCPFLG[2]";
	PC_APITCPFLG.resize(2);
	qDebug(category) << "Malloc - PC_APITPRUFLG[2]";
	PC_APITPRUFLG.resize(2);
	qDebug(category) << "Malloc - PC_APITTHR[8]";
	PC_APITTHR.resize(8);
	qDebug(category) << "Malloc - PC_APITOSHR[8]";
	PC_APITOSHR.resize(8);
	qDebug(category) << "Malloc - PC_APITORHR[8]";
	PC_APITORHR.resize(8);
	qDebug(category) << "Malloc - PC_APITSLSHR[8]";
	PC_APITSLSHR.resize(8);
	qDebug(category) << "Malloc - PC_APITSLRHR[8]";
	PC_APITSLRHR.resize(8);
	qDebug(category) << "Malloc - PC_APITSMSHR[8]";
	PC_APITSMSHR.resize(8);
	qDebug(category) << "Malloc - PC_APITSMRHR[8]";
	PC_APITSMRHR.resize(8);
	qDebug(category) << "Malloc - PC_APITYLD[8]";
	PC_APITYLD.resize(8);
	qDebug(category) << "Malloc - PC_APITSPROC[8]";
	PC_APITSPROC.resize(8);
	qDebug(category) << "Malloc - PC_APITPLSHR[8]";
	PC_APITPLSHR.resize(8);
	qDebug(category) << "Malloc - PC_APITPLRHR[8]";
	PC_APITPLRHR.resize(8);
	qDebug(category) << "Malloc - PC_APITPMSHR[8]";
	PC_APITPMSHR.resize(8);
	qDebug(category) << "Malloc - PC_APITPMRHR[8]";
	PC_APITPMRHR.resize(8);
	qDebug(category) << "Malloc - PC_APITPYLD[8]";
	PC_APITPYLD.resize(8);
	qDebug(category) << "Malloc - PC_APITPPROC[8]";
	PC_APITPPROC.resize(8);
	qDebug(category) << "Malloc - PC_APITQUE[10]";
	PC_APITQUE.resize(10);
	qDebug(category) << "Malloc - PC_APIT_LASTUPD[23]";
	PC_APIT_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_APIHSUBPNO[16]";
	PC_APIHSUBPNO.resize(16);
	qDebug(category) << "Malloc - PC_WKCNTR[10]";
	PC_WKCNTR.resize(10);

#pragma endregion Resize Fields PC_APITREC
}
void PC_APITREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_APITREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_APITREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_APITREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_APITREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_APITREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_APITREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_APITREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_APITREC");
				createTable();
			}break;
		}
	}
}

bool PC_APITREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_APITCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, PC_APITCODE.data(), 2, &cbPC_APITCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_APITSEQ ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_APITSEQ.data(), 2, &cbPC_APITSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 4 Buffer Size: 4 FieldName: PC_APITEFDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 4, PC_APITEFDAT.data(), 4, &cbPC_APITEFDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 4 Buffer Size: 4 FieldName: PC_APITINDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 4, PC_APITINDAT.data(), 4, &cbPC_APITINDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 5 Buffer Size: 2 FieldName: PC_APITCPFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 5, PC_APITCPFLG.data(), 2, &cbPC_APITCPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_APITPRUFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 5, PC_APITPRUFLG.data(), 2, &cbPC_APITPRUFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_APITTHR ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 8, PC_APITTHR.data(), 8, &cbPC_APITTHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 8 Buffer Size: 8 FieldName: PC_APITOSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 8, PC_APITOSHR.data(), 8, &cbPC_APITOSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_APITORHR ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 8, PC_APITORHR.data(), 8, &cbPC_APITORHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_APITSLSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 8, PC_APITSLSHR.data(), 8, &cbPC_APITSLSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_APITSLRHR ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 8, PC_APITSLRHR.data(), 8, &cbPC_APITSLRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_APITSMSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 8, PC_APITSMSHR.data(), 8, &cbPC_APITSMSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 8 Buffer Size: 8 FieldName: PC_APITSMRHR ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 8, PC_APITSMRHR.data(), 8, &cbPC_APITSMRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 8 Buffer Size: 8 FieldName: PC_APITYLD ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 8, PC_APITYLD.data(), 8, &cbPC_APITYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [20] Type: 8 Buffer Size: 8 FieldName: PC_APITSPROC ";
		r = ::SQLBindCol(hStmt_Fetch, 20, 8, PC_APITSPROC.data(), 8, &cbPC_APITSPROC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [21] Type: 8 Buffer Size: 8 FieldName: PC_APITPLSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 21, 8, PC_APITPLSHR.data(), 8, &cbPC_APITPLSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_APITPLRHR ";
		r = ::SQLBindCol(hStmt_Fetch, 22, 8, PC_APITPLRHR.data(), 8, &cbPC_APITPLRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [23] Type: 8 Buffer Size: 8 FieldName: PC_APITPMSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 23, 8, PC_APITPMSHR.data(), 8, &cbPC_APITPMSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_APITPMRHR ";
		r = ::SQLBindCol(hStmt_Fetch, 24, 8, PC_APITPMRHR.data(), 8, &cbPC_APITPMRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [25] Type: 8 Buffer Size: 8 FieldName: PC_APITPYLD ";
		r = ::SQLBindCol(hStmt_Fetch, 25, 8, PC_APITPYLD.data(), 8, &cbPC_APITPYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [26] Type: 8 Buffer Size: 8 FieldName: PC_APITPPROC ";
		r = ::SQLBindCol(hStmt_Fetch, 26, 8, PC_APITPPROC.data(), 8, &cbPC_APITPPROC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [27] Type: 1 Buffer Size: 10 FieldName: PC_APITQUE ";
		r = ::SQLBindCol(hStmt_Fetch, 27, 1, PC_APITQUE.data(), 10, &cbPC_APITQUE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [28] Type: 1 Buffer Size: 23 FieldName: PC_APIT_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 28, 1, PC_APIT_LASTUPD.data(), 23, &cbPC_APIT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [29] Type: 1 Buffer Size: 16 FieldName: PC_APIHSUBPNO ";
		r = ::SQLBindCol(hStmt_Fetch, 29, 1, PC_APIHSUBPNO.data(), 16, &cbPC_APIHSUBPNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [30] Type: 1 Buffer Size: 10 FieldName: PC_WKCNTR ";
		r = ::SQLBindCol(hStmt_Fetch, 30, 1, PC_WKCNTR.data(), 10, &cbPC_WKCNTR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_APITREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_APITCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_APITCODE.constData(), 0, &cbPC_APITCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_APITSEQ ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_APITSEQ.constData(), 0, &cbPC_APITSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 4 Buffer Size: 4 FieldName: PC_APITEFDAT ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_APITEFDAT.constData(), 0, &cbPC_APITEFDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 4 Buffer Size: 4 FieldName: PC_APITINDAT ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_APITINDAT.constData(), 0, &cbPC_APITINDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 5 Buffer Size: 2 FieldName: PC_APITCPFLG ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_APITCPFLG.constData(), 0, &cbPC_APITCPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_APITPRUFLG ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_APITPRUFLG.constData(), 0, &cbPC_APITPRUFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_APITTHR ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITTHR.constData(), 0, &cbPC_APITTHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 8 Buffer Size: 8 FieldName: PC_APITOSHR ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITOSHR.constData(), 0, &cbPC_APITOSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_APITORHR ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITORHR.constData(), 0, &cbPC_APITORHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_APITSLSHR ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITSLSHR.constData(), 0, &cbPC_APITSLSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_APITSLRHR ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITSLRHR.constData(), 0, &cbPC_APITSLRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_APITSMSHR ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITSMSHR.constData(), 0, &cbPC_APITSMSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 8 Buffer Size: 8 FieldName: PC_APITSMRHR ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITSMRHR.constData(), 0, &cbPC_APITSMRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 8 Buffer Size: 8 FieldName: PC_APITYLD ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITYLD.constData(), 0, &cbPC_APITYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [20] Type: 8 Buffer Size: 8 FieldName: PC_APITSPROC ";
		r = SQLBindParameter(hStmt_Insert, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITSPROC.constData(), 0, &cbPC_APITSPROC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [21] Type: 8 Buffer Size: 8 FieldName: PC_APITPLSHR ";
		r = SQLBindParameter(hStmt_Insert, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITPLSHR.constData(), 0, &cbPC_APITPLSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_APITPLRHR ";
		r = SQLBindParameter(hStmt_Insert, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITPLRHR.constData(), 0, &cbPC_APITPLRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [23] Type: 8 Buffer Size: 8 FieldName: PC_APITPMSHR ";
		r = SQLBindParameter(hStmt_Insert, 23, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITPMSHR.constData(), 0, &cbPC_APITPMSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_APITPMRHR ";
		r = SQLBindParameter(hStmt_Insert, 24, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITPMRHR.constData(), 0, &cbPC_APITPMRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [25] Type: 8 Buffer Size: 8 FieldName: PC_APITPYLD ";
		r = SQLBindParameter(hStmt_Insert, 25, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITPYLD.constData(), 0, &cbPC_APITPYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [26] Type: 8 Buffer Size: 8 FieldName: PC_APITPPROC ";
		r = SQLBindParameter(hStmt_Insert, 26, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_APITPPROC.constData(), 0, &cbPC_APITPPROC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [27] Type: 1 Buffer Size: 10 FieldName: PC_APITQUE ";
		r = SQLBindParameter(hStmt_Insert, 27, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_APITQUE.constData(), 0, &cbPC_APITQUE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [28] Type: 1 Buffer Size: 23 FieldName: PC_APIT_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 28, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_APIT_LASTUPD.constData(), 0, &cbPC_APIT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [29] Type: 1 Buffer Size: 16 FieldName: PC_APIHSUBPNO ";
		r = SQLBindParameter(hStmt_Insert, 29, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 16, 0, (SQLPOINTER)PC_APIHSUBPNO.constData(), 0, &cbPC_APIHSUBPNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [30] Type: 1 Buffer Size: 10 FieldName: PC_WKCNTR ";
		r = SQLBindParameter(hStmt_Insert, 30, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_WKCNTR.constData(), 0, &cbPC_WKCNTR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 31, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 32, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 33, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_APITREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_APITREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_APITREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_APITREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTMINGSET::PC_PRTMINGSET(QObject * parent) : QObject(parent) 
,tableName("PC_PRTMINGSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTMINGSET 
PC_PRTMINGSET::~PC_PRTMINGSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTMINGSET

// begin method functions
void PC_PRTMINGSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTMINGSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTMINGSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTMINGSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTMINGSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTMINGSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTMINGSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTMINGSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTMINGSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTMINGSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTMINGSET";
	qDebug(category) << "unsertSQL - update PC_PRTMINGSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PRTMINGSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTMINGSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PRTMINGSET
}
void PC_PRTMINGSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTMINGSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTMINGSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTMINGSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTMINGSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTMINGSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTMINGSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTMINGSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTMINGSET");
				createTable();
			}break;
		}
	}
}

bool PC_PRTMINGSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTMINGSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTMINGSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTMINGSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTMINGSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTMINGSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_WODREC::PC_WODREC(QObject * parent) : QObject(parent) 
,tableName("PC_WODREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_WODREC 
PC_WODREC::~PC_WODREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_WODPRT.clear();
	PC_WODNO.clear();
	PC_WODENDTYPE.clear();
	PC_WODOQTY.clear();
	PC_WODCQTY.clear();
	PC_WODAQTY.clear();
	PC_WODMRP.clear();
	PC_WODLDDAT.clear();
	PC_WODMPFLG.clear();
	PC_WOD_LASTUPD.clear();
	PC_WOHNO.clear();
	PC_PRTNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_WODREC

// begin method functions
void PC_WODREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_WODREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_WODREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_WODREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_WODREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_WODPRT, PC_WODNO, PC_WODENDTYPE, PC_WODOQTY, PC_WODCQTY, PC_WODAQTY, PC_WODMRP, PC_WODLDDAT, PC_WODMPFLG, PC_WOD_LASTUPD, PC_WOHNO, PC_PRTNO from PC_WODREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_WODREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_WODREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_WODPRT, PC_WODNO, PC_WODENDTYPE, PC_WODOQTY, PC_WODCQTY, PC_WODAQTY, PC_WODMRP, PC_WODLDDAT, PC_WODMPFLG, PC_WOD_LASTUPD, PC_WOHNO, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_WODREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_WODPRT = ?, PC_WODNO = ?, PC_WODENDTYPE = ?, PC_WODOQTY = ?, PC_WODCQTY = ?, PC_WODAQTY = ?, PC_WODMRP = ?, PC_WODLDDAT = ?, PC_WODMPFLG = ?, PC_WOD_LASTUPD = ?, PC_WOHNO = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_WODREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_WODPRT, PC_WODNO, PC_WODENDTYPE, PC_WODOQTY, PC_WODCQTY, PC_WODAQTY, PC_WODMRP, PC_WODLDDAT, PC_WODMPFLG, PC_WOD_LASTUPD, PC_WOHNO, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_WODPRT, PC_WODNO, PC_WODENDTYPE, PC_WODOQTY, PC_WODCQTY, PC_WODAQTY, PC_WODMRP, PC_WODLDDAT, PC_WODMPFLG, PC_WOD_LASTUPD, PC_WOHNO, PC_PRTNO from PC_WODREC";
	qDebug(category) << "unsertSQL - update PC_WODREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_WODPRT = ?, PC_WODNO = ?, PC_WODENDTYPE = ?, PC_WODOQTY = ?, PC_WODCQTY = ?, PC_WODAQTY = ?, PC_WODMRP = ?, PC_WODLDDAT = ?, PC_WODMPFLG = ?, PC_WOD_LASTUPD = ?, PC_WOHNO = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_WODREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_WODREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_WODPRT[18]";
	PC_WODPRT.resize(18);
	qDebug(category) << "Malloc - PC_WODNO[10]";
	PC_WODNO.resize(10);
	qDebug(category) << "Malloc - PC_WODENDTYPE[2]";
	PC_WODENDTYPE.resize(2);
	qDebug(category) << "Malloc - PC_WODOQTY[8]";
	PC_WODOQTY.resize(8);
	qDebug(category) << "Malloc - PC_WODCQTY[8]";
	PC_WODCQTY.resize(8);
	qDebug(category) << "Malloc - PC_WODAQTY[8]";
	PC_WODAQTY.resize(8);
	qDebug(category) << "Malloc - PC_WODMRP[4]";
	PC_WODMRP.resize(4);
	qDebug(category) << "Malloc - PC_WODLDDAT[4]";
	PC_WODLDDAT.resize(4);
	qDebug(category) << "Malloc - PC_WODMPFLG[2]";
	PC_WODMPFLG.resize(2);
	qDebug(category) << "Malloc - PC_WOD_LASTUPD[23]";
	PC_WOD_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_WOHNO[10]";
	PC_WOHNO.resize(10);
	qDebug(category) << "Malloc - PC_PRTNO[18]";
	PC_PRTNO.resize(18);

#pragma endregion Resize Fields PC_WODREC
}
void PC_WODREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_WODREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_WODREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_WODREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_WODREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_WODREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_WODREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_WODREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_WODREC");
				createTable();
			}break;
		}
	}
}

bool PC_WODREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_WODPRT ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_WODPRT.data(), 18, &cbPC_WODPRT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 10 FieldName: PC_WODNO ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_WODNO.data(), 10, &cbPC_WODNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 2 FieldName: PC_WODENDTYPE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_WODENDTYPE.data(), 2, &cbPC_WODENDTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_WODOQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 8, PC_WODOQTY.data(), 8, &cbPC_WODOQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_WODCQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 8, PC_WODCQTY.data(), 8, &cbPC_WODCQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 8 Buffer Size: 8 FieldName: PC_WODAQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 8, PC_WODAQTY.data(), 8, &cbPC_WODAQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 4 Buffer Size: 4 FieldName: PC_WODMRP ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 4, PC_WODMRP.data(), 4, &cbPC_WODMRP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_WODLDDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 4, PC_WODLDDAT.data(), 4, &cbPC_WODLDDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 5 Buffer Size: 2 FieldName: PC_WODMPFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 5, PC_WODMPFLG.data(), 2, &cbPC_WODMPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 1 Buffer Size: 23 FieldName: PC_WOD_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 1, PC_WOD_LASTUPD.data(), 23, &cbPC_WOD_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 1 Buffer Size: 10 FieldName: PC_WOHNO ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 1, PC_WOHNO.data(), 10, &cbPC_WOHNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 1, PC_PRTNO.data(), 18, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_WODREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_WODPRT ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_WODPRT.constData(), 0, &cbPC_WODPRT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 10 FieldName: PC_WODNO ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_WODNO.constData(), 0, &cbPC_WODNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 2 FieldName: PC_WODENDTYPE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_WODENDTYPE.constData(), 0, &cbPC_WODENDTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_WODOQTY ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_WODOQTY.constData(), 0, &cbPC_WODOQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_WODCQTY ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_WODCQTY.constData(), 0, &cbPC_WODCQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 8 Buffer Size: 8 FieldName: PC_WODAQTY ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_WODAQTY.constData(), 0, &cbPC_WODAQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 4 Buffer Size: 4 FieldName: PC_WODMRP ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_WODMRP.constData(), 0, &cbPC_WODMRP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_WODLDDAT ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_WODLDDAT.constData(), 0, &cbPC_WODLDDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 5 Buffer Size: 2 FieldName: PC_WODMPFLG ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_WODMPFLG.constData(), 0, &cbPC_WODMPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 1 Buffer Size: 23 FieldName: PC_WOD_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_WOD_LASTUPD.constData(), 0, &cbPC_WOD_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 1 Buffer Size: 10 FieldName: PC_WOHNO ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_WOHNO.constData(), 0, &cbPC_WOHNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_PRTNO.constData(), 0, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_WODREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_WODREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_WODREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_WODREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TEXTHSHSET::PC_TEXTHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_TEXTHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TEXTHSHSET 
PC_TEXTHSHSET::~PC_TEXTHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TEXTHSHSET

// begin method functions
void PC_TEXTHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TEXTHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TEXTHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TEXTHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TEXTHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TEXTHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TEXTHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TEXTHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TEXTHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TEXTHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TEXTHSHSET";
	qDebug(category) << "unsertSQL - update PC_TEXTHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_TEXTHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TEXTHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_TEXTHSHSET
}
void PC_TEXTHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TEXTHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TEXTHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TEXTHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TEXTHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TEXTHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TEXTHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TEXTHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TEXTHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_TEXTHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TEXTHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TEXTHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TEXTHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TEXTHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TEXTHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTFRMSET::PC_PRTFRMSET(QObject * parent) : QObject(parent) 
,tableName("PC_PRTFRMSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTFRMSET 
PC_PRTFRMSET::~PC_PRTFRMSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTFRMSET

// begin method functions
void PC_PRTFRMSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTFRMSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTFRMSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTFRMSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTFRMSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTFRMSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTFRMSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTFRMSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTFRMSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTFRMSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTFRMSET";
	qDebug(category) << "unsertSQL - update PC_PRTFRMSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PRTFRMSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTFRMSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PRTFRMSET
}
void PC_PRTFRMSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTFRMSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTFRMSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTFRMSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTFRMSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTFRMSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTFRMSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTFRMSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTFRMSET");
				createTable();
			}break;
		}
	}
}

bool PC_PRTFRMSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTFRMSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTFRMSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTFRMSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTFRMSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTFRMSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MPITWUSET::PC_MPITWUSET(QObject * parent) : QObject(parent) 
,tableName("PC_MPITWUSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MPITWUSET 
PC_MPITWUSET::~PC_MPITWUSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MPITWUSET

// begin method functions
void PC_MPITWUSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MPITWUSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MPITWUSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MPITWUSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MPITWUSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MPITWUSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MPITWUSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MPITWUSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MPITWUSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MPITWUSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MPITWUSET";
	qDebug(category) << "unsertSQL - update PC_MPITWUSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_MPITWUSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MPITWUSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_MPITWUSET
}
void PC_MPITWUSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MPITWUSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MPITWUSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MPITWUSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MPITWUSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MPITWUSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MPITWUSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MPITWUSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MPITWUSET");
				createTable();
			}break;
		}
	}
}

bool PC_MPITWUSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MPITWUSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MPITWUSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MPITWUSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MPITWUSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MPITWUSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_INGSTEPSET::PC_INGSTEPSET(QObject * parent) : QObject(parent) 
,tableName("PC_INGSTEPSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_INGSTEPSET 
PC_INGSTEPSET::~PC_INGSTEPSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_INGSTEPSET

// begin method functions
void PC_INGSTEPSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_INGSTEPSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_INGSTEPSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_INGSTEPSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_INGSTEPSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_INGSTEPSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_INGSTEPSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_INGSTEPSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_INGSTEPSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_INGSTEPSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_INGSTEPSET";
	qDebug(category) << "unsertSQL - update PC_INGSTEPSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_INGSTEPSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_INGSTEPSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_INGSTEPSET
}
void PC_INGSTEPSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_INGSTEPSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_INGSTEPSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_INGSTEPSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_INGSTEPSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_INGSTEPSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_INGSTEPSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_INGSTEPSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_INGSTEPSET");
				createTable();
			}break;
		}
	}
}

bool PC_INGSTEPSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_INGSTEPSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_INGSTEPSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_INGSTEPSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_INGSTEPSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_INGSTEPSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MBOWOHSET::PC_MBOWOHSET(QObject * parent) : QObject(parent) 
,tableName("PC_MBOWOHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MBOWOHSET 
PC_MBOWOHSET::~PC_MBOWOHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MBOWOHSET

// begin method functions
void PC_MBOWOHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MBOWOHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MBOWOHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MBOWOHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MBOWOHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOWOHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MBOWOHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MBOWOHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MBOWOHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MBOWOHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOWOHSET";
	qDebug(category) << "unsertSQL - update PC_MBOWOHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_MBOWOHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MBOWOHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_MBOWOHSET
}
void PC_MBOWOHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MBOWOHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MBOWOHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MBOWOHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MBOWOHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MBOWOHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MBOWOHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MBOWOHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MBOWOHSET");
				createTable();
			}break;
		}
	}
}

bool PC_MBOWOHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MBOWOHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MBOWOHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MBOWOHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MBOWOHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MBOWOHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_ADFREC::PC_ADFREC(QObject * parent) : QObject(parent) 
,tableName("PC_ADFREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_ADFREC 
PC_ADFREC::~PC_ADFREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_ADFINGRED.clear();
	PC_ADF_LASTUPD.clear();
	PC_ALTHSUBNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_ADFREC

// begin method functions
void PC_ADFREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_ADFREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_ADFREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_ADFREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_ADFREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADFINGRED, PC_ADF_LASTUPD, PC_ALTHSUBNO from PC_ADFREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_ADFREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_ADFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADFINGRED, PC_ADF_LASTUPD, PC_ALTHSUBNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_ADFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ADFINGRED = ?, PC_ADF_LASTUPD = ?, PC_ALTHSUBNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_ADFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADFINGRED, PC_ADF_LASTUPD, PC_ALTHSUBNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADFINGRED, PC_ADF_LASTUPD, PC_ALTHSUBNO from PC_ADFREC";
	qDebug(category) << "unsertSQL - update PC_ADFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ADFINGRED = ?, PC_ADF_LASTUPD = ?, PC_ALTHSUBNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_ADFREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_ADFREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_ADFINGRED[18]";
	PC_ADFINGRED.resize(18);
	qDebug(category) << "Malloc - PC_ADF_LASTUPD[23]";
	PC_ADF_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_ALTHSUBNO[16]";
	PC_ALTHSUBNO.resize(16);

#pragma endregion Resize Fields PC_ADFREC
}
void PC_ADFREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_ADFREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_ADFREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_ADFREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_ADFREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_ADFREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_ADFREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_ADFREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_ADFREC");
				createTable();
			}break;
		}
	}
}

bool PC_ADFREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_ADFINGRED ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_ADFINGRED.data(), 18, &cbPC_ADFINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_ADF_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_ADF_LASTUPD.data(), 23, &cbPC_ADF_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 16 FieldName: PC_ALTHSUBNO ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_ALTHSUBNO.data(), 16, &cbPC_ALTHSUBNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_ADFREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_ADFINGRED ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_ADFINGRED.constData(), 0, &cbPC_ADFINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_ADF_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_ADF_LASTUPD.constData(), 0, &cbPC_ADF_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 16 FieldName: PC_ALTHSUBNO ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 16, 0, (SQLPOINTER)PC_ALTHSUBNO.constData(), 0, &cbPC_ALTHSUBNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_ADFREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_ADFREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_ADFREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_ADFREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TRKNOREC::PC_TRKNOREC(QObject * parent) : QObject(parent) 
,tableName("PC_TRKNOREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TRKNOREC 
PC_TRKNOREC::~PC_TRKNOREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_TRKNONO.clear();
	PC_TRKNO_LASTUPD.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TRKNOREC

// begin method functions
void PC_TRKNOREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TRKNOREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TRKNOREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TRKNOREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TRKNOREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNONO, PC_TRKNO_LASTUPD from PC_TRKNOREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TRKNOREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TRKNOREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNONO, PC_TRKNO_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TRKNOREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TRKNONO = ?, PC_TRKNO_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TRKNOREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNONO, PC_TRKNO_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNONO, PC_TRKNO_LASTUPD from PC_TRKNOREC";
	qDebug(category) << "unsertSQL - update PC_TRKNOREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TRKNONO = ?, PC_TRKNO_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_TRKNOREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TRKNOREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_TRKNONO[10]";
	PC_TRKNONO.resize(10);
	qDebug(category) << "Malloc - PC_TRKNO_LASTUPD[23]";
	PC_TRKNO_LASTUPD.resize(23);

#pragma endregion Resize Fields PC_TRKNOREC
}
void PC_TRKNOREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TRKNOREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TRKNOREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TRKNOREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TRKNOREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TRKNOREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TRKNOREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TRKNOREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TRKNOREC");
				createTable();
			}break;
		}
	}
}

bool PC_TRKNOREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_TRKNONO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_TRKNONO.data(), 10, &cbPC_TRKNONO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_TRKNO_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_TRKNO_LASTUPD.data(), 23, &cbPC_TRKNO_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TRKNOREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_TRKNONO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TRKNONO.constData(), 0, &cbPC_TRKNONO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_TRKNO_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_TRKNO_LASTUPD.constData(), 0, &cbPC_TRKNO_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TRKNOREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TRKNOREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TRKNOREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TRKNOREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_CHGHREC::PC_CHGHREC(QObject * parent) : QObject(parent) 
,tableName("PC_CHGHREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_CHGHREC 
PC_CHGHREC::~PC_CHGHREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_CHGHTYPE.clear();
	PC_CHGHFRMNAME.clear();
	PC_CHGHPROD.clear();
	PC_CHGHCAT.clear();
	PC_CHGH_LASTUPD.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_CHGHREC

// begin method functions
void PC_CHGHREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_CHGHREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_CHGHREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_CHGHREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_CHGHREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_CHGHTYPE, PC_CHGHFRMNAME, PC_CHGHPROD, PC_CHGHCAT, PC_CHGH_LASTUPD from PC_CHGHREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_CHGHREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_CHGHREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_CHGHTYPE, PC_CHGHFRMNAME, PC_CHGHPROD, PC_CHGHCAT, PC_CHGH_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_CHGHREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_CHGHTYPE = ?, PC_CHGHFRMNAME = ?, PC_CHGHPROD = ?, PC_CHGHCAT = ?, PC_CHGH_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_CHGHREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_CHGHTYPE, PC_CHGHFRMNAME, PC_CHGHPROD, PC_CHGHCAT, PC_CHGH_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_CHGHTYPE, PC_CHGHFRMNAME, PC_CHGHPROD, PC_CHGHCAT, PC_CHGH_LASTUPD from PC_CHGHREC";
	qDebug(category) << "unsertSQL - update PC_CHGHREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_CHGHTYPE = ?, PC_CHGHFRMNAME = ?, PC_CHGHPROD = ?, PC_CHGHCAT = ?, PC_CHGH_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_CHGHREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_CHGHREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_CHGHTYPE[2]";
	PC_CHGHTYPE.resize(2);
	qDebug(category) << "Malloc - PC_CHGHFRMNAME[20]";
	PC_CHGHFRMNAME.resize(20);
	qDebug(category) << "Malloc - PC_CHGHPROD[18]";
	PC_CHGHPROD.resize(18);
	qDebug(category) << "Malloc - PC_CHGHCAT[10]";
	PC_CHGHCAT.resize(10);
	qDebug(category) << "Malloc - PC_CHGH_LASTUPD[23]";
	PC_CHGH_LASTUPD.resize(23);

#pragma endregion Resize Fields PC_CHGHREC
}
void PC_CHGHREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_CHGHREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_CHGHREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_CHGHREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_CHGHREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_CHGHREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_CHGHREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_CHGHREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_CHGHREC");
				createTable();
			}break;
		}
	}
}

bool PC_CHGHREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_CHGHTYPE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, PC_CHGHTYPE.data(), 2, &cbPC_CHGHTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 20 FieldName: PC_CHGHFRMNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_CHGHFRMNAME.data(), 20, &cbPC_CHGHFRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 18 FieldName: PC_CHGHPROD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_CHGHPROD.data(), 18, &cbPC_CHGHPROD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 10 FieldName: PC_CHGHCAT ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_CHGHCAT.data(), 10, &cbPC_CHGHCAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 1 Buffer Size: 23 FieldName: PC_CHGH_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 1, PC_CHGH_LASTUPD.data(), 23, &cbPC_CHGH_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_CHGHREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_CHGHTYPE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_CHGHTYPE.constData(), 0, &cbPC_CHGHTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 20 FieldName: PC_CHGHFRMNAME ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 20, 0, (SQLPOINTER)PC_CHGHFRMNAME.constData(), 0, &cbPC_CHGHFRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 18 FieldName: PC_CHGHPROD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_CHGHPROD.constData(), 0, &cbPC_CHGHPROD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 10 FieldName: PC_CHGHCAT ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_CHGHCAT.constData(), 0, &cbPC_CHGHCAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 1 Buffer Size: 23 FieldName: PC_CHGH_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_CHGH_LASTUPD.constData(), 0, &cbPC_CHGH_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_CHGHREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_CHGHREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_CHGHREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_CHGHREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_ADTDESREC::PC_ADTDESREC(QObject * parent) : QObject(parent) 
,tableName("PC_ADTDESREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_ADTDESREC 
PC_ADTDESREC::~PC_ADTDESREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_ADTDESCODE.clear();
	PC_ADTDESTEXT.clear();
	PC_ADTDES_LASTUPD.clear();
	PC_ADTINGRED.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_ADTDESREC

// begin method functions
void PC_ADTDESREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_ADTDESREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_ADTDESREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_ADTDESREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_ADTDESREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADTDESCODE, PC_ADTDESTEXT, PC_ADTDES_LASTUPD, PC_ADTINGRED from PC_ADTDESREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_ADTDESREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_ADTDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADTDESCODE, PC_ADTDESTEXT, PC_ADTDES_LASTUPD, PC_ADTINGRED ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_ADTDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ADTDESCODE = ?, PC_ADTDESTEXT = ?, PC_ADTDES_LASTUPD = ?, PC_ADTINGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_ADTDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADTDESCODE, PC_ADTDESTEXT, PC_ADTDES_LASTUPD, PC_ADTINGRED ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADTDESCODE, PC_ADTDESTEXT, PC_ADTDES_LASTUPD, PC_ADTINGRED from PC_ADTDESREC";
	qDebug(category) << "unsertSQL - update PC_ADTDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ADTDESCODE = ?, PC_ADTDESTEXT = ?, PC_ADTDES_LASTUPD = ?, PC_ADTINGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_ADTDESREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_ADTDESREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_ADTDESCODE[10]";
	PC_ADTDESCODE.resize(10);
	qDebug(category) << "Malloc - PC_ADTDESTEXT[60]";
	PC_ADTDESTEXT.resize(60);
	qDebug(category) << "Malloc - PC_ADTDES_LASTUPD[23]";
	PC_ADTDES_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_ADTINGRED[18]";
	PC_ADTINGRED.resize(18);

#pragma endregion Resize Fields PC_ADTDESREC
}
void PC_ADTDESREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_ADTDESREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_ADTDESREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_ADTDESREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_ADTDESREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_ADTDESREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_ADTDESREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_ADTDESREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_ADTDESREC");
				createTable();
			}break;
		}
	}
}

bool PC_ADTDESREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_ADTDESCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_ADTDESCODE.data(), 10, &cbPC_ADTDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_ADTDESTEXT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_ADTDESTEXT.data(), 60, &cbPC_ADTDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_ADTDES_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_ADTDES_LASTUPD.data(), 23, &cbPC_ADTDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 18 FieldName: PC_ADTINGRED ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_ADTINGRED.data(), 18, &cbPC_ADTINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_ADTDESREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_ADTDESCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_ADTDESCODE.constData(), 0, &cbPC_ADTDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_ADTDESTEXT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_ADTDESTEXT.constData(), 0, &cbPC_ADTDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_ADTDES_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_ADTDES_LASTUPD.constData(), 0, &cbPC_ADTDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 18 FieldName: PC_ADTINGRED ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_ADTINGRED.constData(), 0, &cbPC_ADTINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_ADTDESREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_ADTDESREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_ADTDESREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_ADTDESREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MENDMCSTSET::PC_MENDMCSTSET(QObject * parent) : QObject(parent) 
,tableName("PC_MENDMCSTSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MENDMCSTSET 
PC_MENDMCSTSET::~PC_MENDMCSTSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MENDMCSTSET

// begin method functions
void PC_MENDMCSTSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MENDMCSTSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MENDMCSTSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MENDMCSTSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MENDMCSTSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MENDMCSTSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MENDMCSTSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MENDMCSTSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MENDMCSTSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MENDMCSTSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MENDMCSTSET";
	qDebug(category) << "unsertSQL - update PC_MENDMCSTSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_MENDMCSTSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MENDMCSTSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_MENDMCSTSET
}
void PC_MENDMCSTSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MENDMCSTSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MENDMCSTSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MENDMCSTSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MENDMCSTSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MENDMCSTSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MENDMCSTSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MENDMCSTSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MENDMCSTSET");
				createTable();
			}break;
		}
	}
}

bool PC_MENDMCSTSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MENDMCSTSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MENDMCSTSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MENDMCSTSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MENDMCSTSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MENDMCSTSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_WKCHSHSET::PC_WKCHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_WKCHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_WKCHSHSET 
PC_WKCHSHSET::~PC_WKCHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_WKCHSHSET

// begin method functions
void PC_WKCHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_WKCHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_WKCHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_WKCHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_WKCHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WKCHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_WKCHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_WKCHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_WKCHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_WKCHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WKCHSHSET";
	qDebug(category) << "unsertSQL - update PC_WKCHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_WKCHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_WKCHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_WKCHSHSET
}
void PC_WKCHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_WKCHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_WKCHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_WKCHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_WKCHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_WKCHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_WKCHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_WKCHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_WKCHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_WKCHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_WKCHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_WKCHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_WKCHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_WKCHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_WKCHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_CATREC::PC_CATREC(QObject * parent) : QObject(parent) 
,tableName("PC_CATREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_CATREC 
PC_CATREC::~PC_CATREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_CATEGORY.clear();
	PC_CATDESC.clear();
	PC_CATSTAT.clear();
	PC_CAT_LASTUPD.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_CATREC

// begin method functions
void PC_CATREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_CATREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_CATREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_CATREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_CATREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_CATEGORY, PC_CATDESC, PC_CATSTAT, PC_CAT_LASTUPD from PC_CATREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_CATREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_CATREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_CATEGORY, PC_CATDESC, PC_CATSTAT, PC_CAT_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_CATREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_CATEGORY = ?, PC_CATDESC = ?, PC_CATSTAT = ?, PC_CAT_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_CATREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_CATEGORY, PC_CATDESC, PC_CATSTAT, PC_CAT_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_CATEGORY, PC_CATDESC, PC_CATSTAT, PC_CAT_LASTUPD from PC_CATREC";
	qDebug(category) << "unsertSQL - update PC_CATREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_CATEGORY = ?, PC_CATDESC = ?, PC_CATSTAT = ?, PC_CAT_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_CATREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_CATREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_CATEGORY[10]";
	PC_CATEGORY.resize(10);
	qDebug(category) << "Malloc - PC_CATDESC[30]";
	PC_CATDESC.resize(30);
	qDebug(category) << "Malloc - PC_CATSTAT[2]";
	PC_CATSTAT.resize(2);
	qDebug(category) << "Malloc - PC_CAT_LASTUPD[23]";
	PC_CAT_LASTUPD.resize(23);

#pragma endregion Resize Fields PC_CATREC
}
void PC_CATREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_CATREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_CATREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_CATREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_CATREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_CATREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_CATREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_CATREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_CATREC");
				createTable();
			}break;
		}
	}
}

bool PC_CATREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_CATEGORY ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_CATEGORY.data(), 10, &cbPC_CATEGORY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 30 FieldName: PC_CATDESC ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_CATDESC.data(), 30, &cbPC_CATDESC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_CATSTAT ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, PC_CATSTAT.data(), 2, &cbPC_CATSTAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 23 FieldName: PC_CAT_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_CAT_LASTUPD.data(), 23, &cbPC_CAT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_CATREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_CATEGORY ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_CATEGORY.constData(), 0, &cbPC_CATEGORY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 30 FieldName: PC_CATDESC ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_CATDESC.constData(), 0, &cbPC_CATDESC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_CATSTAT ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_CATSTAT.constData(), 0, &cbPC_CATSTAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 23 FieldName: PC_CAT_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_CAT_LASTUPD.constData(), 0, &cbPC_CAT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_CATREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_CATREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_CATREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_CATREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FCODREC::PC_FCODREC(QObject * parent) : QObject(parent) 
,tableName("PC_FCODREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FCODREC 
PC_FCODREC::~PC_FCODREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_FCODOREV.clear();
	PC_FCODNREV.clear();
	PC_FCODEDAT.clear();
	PC_FCOD_LASTUPD.clear();
	PC_FCOHNO.clear();
	PC_PRTNO.clear();
	PC_FRMNAME.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FCODREC

// begin method functions
void PC_FCODREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FCODREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FCODREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FCODREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FCODREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCODOREV, PC_FCODNREV, PC_FCODEDAT, PC_FCOD_LASTUPD, PC_FCOHNO, PC_PRTNO, PC_FRMNAME from PC_FCODREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FCODREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FCODREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCODOREV, PC_FCODNREV, PC_FCODEDAT, PC_FCOD_LASTUPD, PC_FCOHNO, PC_PRTNO, PC_FRMNAME ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FCODREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_FCODOREV = ?, PC_FCODNREV = ?, PC_FCODEDAT = ?, PC_FCOD_LASTUPD = ?, PC_FCOHNO = ?, PC_PRTNO = ?, PC_FRMNAME = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FCODREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCODOREV, PC_FCODNREV, PC_FCODEDAT, PC_FCOD_LASTUPD, PC_FCOHNO, PC_PRTNO, PC_FRMNAME ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCODOREV, PC_FCODNREV, PC_FCODEDAT, PC_FCOD_LASTUPD, PC_FCOHNO, PC_PRTNO, PC_FRMNAME from PC_FCODREC";
	qDebug(category) << "unsertSQL - update PC_FCODREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_FCODOREV = ?, PC_FCODNREV = ?, PC_FCODEDAT = ?, PC_FCOD_LASTUPD = ?, PC_FCOHNO = ?, PC_PRTNO = ?, PC_FRMNAME = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_FCODREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FCODREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_FCODOREV[2]";
	PC_FCODOREV.resize(2);
	qDebug(category) << "Malloc - PC_FCODNREV[2]";
	PC_FCODNREV.resize(2);
	qDebug(category) << "Malloc - PC_FCODEDAT[4]";
	PC_FCODEDAT.resize(4);
	qDebug(category) << "Malloc - PC_FCOD_LASTUPD[23]";
	PC_FCOD_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_FCOHNO[10]";
	PC_FCOHNO.resize(10);
	qDebug(category) << "Malloc - PC_PRTNO[18]";
	PC_PRTNO.resize(18);
	qDebug(category) << "Malloc - PC_FRMNAME[20]";
	PC_FRMNAME.resize(20);

#pragma endregion Resize Fields PC_FCODREC
}
void PC_FCODREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FCODREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FCODREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FCODREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FCODREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FCODREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FCODREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FCODREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FCODREC");
				createTable();
			}break;
		}
	}
}

bool PC_FCODREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 2 FieldName: PC_FCODOREV ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_FCODOREV.data(), 2, &cbPC_FCODOREV);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 2 FieldName: PC_FCODNREV ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_FCODNREV.data(), 2, &cbPC_FCODNREV);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 4 Buffer Size: 4 FieldName: PC_FCODEDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 4, PC_FCODEDAT.data(), 4, &cbPC_FCODEDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 23 FieldName: PC_FCOD_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_FCOD_LASTUPD.data(), 23, &cbPC_FCOD_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 1 Buffer Size: 10 FieldName: PC_FCOHNO ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 1, PC_FCOHNO.data(), 10, &cbPC_FCOHNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 1, PC_PRTNO.data(), 18, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 1, PC_FRMNAME.data(), 20, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FCODREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 2 FieldName: PC_FCODOREV ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_FCODOREV.constData(), 0, &cbPC_FCODOREV);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 2 FieldName: PC_FCODNREV ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_FCODNREV.constData(), 0, &cbPC_FCODNREV);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 4 Buffer Size: 4 FieldName: PC_FCODEDAT ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_FCODEDAT.constData(), 0, &cbPC_FCODEDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 23 FieldName: PC_FCOD_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_FCOD_LASTUPD.constData(), 0, &cbPC_FCOD_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 1 Buffer Size: 10 FieldName: PC_FCOHNO ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_FCOHNO.constData(), 0, &cbPC_FCOHNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_PRTNO.constData(), 0, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 20, 0, (SQLPOINTER)PC_FRMNAME.constData(), 0, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FCODREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FCODREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FCODREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FCODREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MINGREC::PC_MINGREC(QObject * parent) : QObject(parent) 
,tableName("PC_MINGREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MINGREC 
PC_MINGREC::~PC_MINGREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_MINGRED.clear();
	PC_MINGITEM.clear();
	PC_MINGSCALE.clear();
	PC_MINGQPB.clear();
	PC_MINGUOM.clear();
	PC_MINGSEQ.clear();
	PC_MINGYLD.clear();
	PC_MINGEDAT.clear();
	PC_MINGIDAT.clear();
	PC_MINGTYPE.clear();
	PC_MINGFSDOFF.clear();
	PC_MINGVSDOFF.clear();
	PC_MINGUSERDEF1.clear();
	PC_MINGUSERDEF2.clear();
	PC_MINGUSERDEF3.clear();
	PC_MINGUSERDEF4.clear();
	PC_MINGPIYLD.clear();
	PC_MING_LASTUPD.clear();
	PC_MBOWIPACCT.clear();
	PC_PRTNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MINGREC

// begin method functions
void PC_MINGREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MINGREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MINGREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MINGREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MINGREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MINGRED, PC_MINGITEM, PC_MINGSCALE, PC_MINGQPB, PC_MINGUOM, PC_MINGSEQ, PC_MINGYLD, PC_MINGEDAT, PC_MINGIDAT, PC_MINGTYPE, PC_MINGFSDOFF, PC_MINGVSDOFF, PC_MINGUSERDEF1, PC_MINGUSERDEF2, PC_MINGUSERDEF3, PC_MINGUSERDEF4, PC_MINGPIYLD, PC_MING_LASTUPD, PC_MBOWIPACCT, PC_PRTNO from PC_MINGREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MINGREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MINGREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MINGRED, PC_MINGITEM, PC_MINGSCALE, PC_MINGQPB, PC_MINGUOM, PC_MINGSEQ, PC_MINGYLD, PC_MINGEDAT, PC_MINGIDAT, PC_MINGTYPE, PC_MINGFSDOFF, PC_MINGVSDOFF, PC_MINGUSERDEF1, PC_MINGUSERDEF2, PC_MINGUSERDEF3, PC_MINGUSERDEF4, PC_MINGPIYLD, PC_MING_LASTUPD, PC_MBOWIPACCT, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MINGREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MINGRED = ?, PC_MINGITEM = ?, PC_MINGSCALE = ?, PC_MINGQPB = ?, PC_MINGUOM = ?, PC_MINGSEQ = ?, PC_MINGYLD = ?, PC_MINGEDAT = ?, PC_MINGIDAT = ?, PC_MINGTYPE = ?, PC_MINGFSDOFF = ?, PC_MINGVSDOFF = ?, PC_MINGUSERDEF1 = ?, PC_MINGUSERDEF2 = ?, PC_MINGUSERDEF3 = ?, PC_MINGUSERDEF4 = ?, PC_MINGPIYLD = ?, PC_MING_LASTUPD = ?, PC_MBOWIPACCT = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MINGREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MINGRED, PC_MINGITEM, PC_MINGSCALE, PC_MINGQPB, PC_MINGUOM, PC_MINGSEQ, PC_MINGYLD, PC_MINGEDAT, PC_MINGIDAT, PC_MINGTYPE, PC_MINGFSDOFF, PC_MINGVSDOFF, PC_MINGUSERDEF1, PC_MINGUSERDEF2, PC_MINGUSERDEF3, PC_MINGUSERDEF4, PC_MINGPIYLD, PC_MING_LASTUPD, PC_MBOWIPACCT, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MINGRED, PC_MINGITEM, PC_MINGSCALE, PC_MINGQPB, PC_MINGUOM, PC_MINGSEQ, PC_MINGYLD, PC_MINGEDAT, PC_MINGIDAT, PC_MINGTYPE, PC_MINGFSDOFF, PC_MINGVSDOFF, PC_MINGUSERDEF1, PC_MINGUSERDEF2, PC_MINGUSERDEF3, PC_MINGUSERDEF4, PC_MINGPIYLD, PC_MING_LASTUPD, PC_MBOWIPACCT, PC_PRTNO from PC_MINGREC";
	qDebug(category) << "unsertSQL - update PC_MINGREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MINGRED = ?, PC_MINGITEM = ?, PC_MINGSCALE = ?, PC_MINGQPB = ?, PC_MINGUOM = ?, PC_MINGSEQ = ?, PC_MINGYLD = ?, PC_MINGEDAT = ?, PC_MINGIDAT = ?, PC_MINGTYPE = ?, PC_MINGFSDOFF = ?, PC_MINGVSDOFF = ?, PC_MINGUSERDEF1 = ?, PC_MINGUSERDEF2 = ?, PC_MINGUSERDEF3 = ?, PC_MINGUSERDEF4 = ?, PC_MINGPIYLD = ?, PC_MING_LASTUPD = ?, PC_MBOWIPACCT = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_MINGREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MINGREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_MINGRED[18]";
	PC_MINGRED.resize(18);
	qDebug(category) << "Malloc - PC_MINGITEM[2]";
	PC_MINGITEM.resize(2);
	qDebug(category) << "Malloc - PC_MINGSCALE[2]";
	PC_MINGSCALE.resize(2);
	qDebug(category) << "Malloc - PC_MINGQPB[8]";
	PC_MINGQPB.resize(8);
	qDebug(category) << "Malloc - PC_MINGUOM[2]";
	PC_MINGUOM.resize(2);
	qDebug(category) << "Malloc - PC_MINGSEQ[2]";
	PC_MINGSEQ.resize(2);
	qDebug(category) << "Malloc - PC_MINGYLD[8]";
	PC_MINGYLD.resize(8);
	qDebug(category) << "Malloc - PC_MINGEDAT[4]";
	PC_MINGEDAT.resize(4);
	qDebug(category) << "Malloc - PC_MINGIDAT[4]";
	PC_MINGIDAT.resize(4);
	qDebug(category) << "Malloc - PC_MINGTYPE[2]";
	PC_MINGTYPE.resize(2);
	qDebug(category) << "Malloc - PC_MINGFSDOFF[8]";
	PC_MINGFSDOFF.resize(8);
	qDebug(category) << "Malloc - PC_MINGVSDOFF[8]";
	PC_MINGVSDOFF.resize(8);
	qDebug(category) << "Malloc - PC_MINGUSERDEF1[30]";
	PC_MINGUSERDEF1.resize(30);
	qDebug(category) << "Malloc - PC_MINGUSERDEF2[30]";
	PC_MINGUSERDEF2.resize(30);
	qDebug(category) << "Malloc - PC_MINGUSERDEF3[30]";
	PC_MINGUSERDEF3.resize(30);
	qDebug(category) << "Malloc - PC_MINGUSERDEF4[30]";
	PC_MINGUSERDEF4.resize(30);
	qDebug(category) << "Malloc - PC_MINGPIYLD[8]";
	PC_MINGPIYLD.resize(8);
	qDebug(category) << "Malloc - PC_MING_LASTUPD[23]";
	PC_MING_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_MBOWIPACCT[24]";
	PC_MBOWIPACCT.resize(24);
	qDebug(category) << "Malloc - PC_PRTNO[18]";
	PC_PRTNO.resize(18);

#pragma endregion Resize Fields PC_MINGREC
}
void PC_MINGREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MINGREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MINGREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MINGREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MINGREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MINGREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MINGREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MINGREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MINGREC");
				createTable();
			}break;
		}
	}
}

bool PC_MINGREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_MINGRED ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_MINGRED.data(), 18, &cbPC_MINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_MINGITEM ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_MINGITEM.data(), 2, &cbPC_MINGITEM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_MINGSCALE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, PC_MINGSCALE.data(), 2, &cbPC_MINGSCALE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_MINGQPB ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 8, PC_MINGQPB.data(), 8, &cbPC_MINGQPB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 1 Buffer Size: 2 FieldName: PC_MINGUOM ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 1, PC_MINGUOM.data(), 2, &cbPC_MINGUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_MINGSEQ ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 5, PC_MINGSEQ.data(), 2, &cbPC_MINGSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_MINGYLD ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 8, PC_MINGYLD.data(), 8, &cbPC_MINGYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_MINGEDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 4, PC_MINGEDAT.data(), 4, &cbPC_MINGEDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 4 Buffer Size: 4 FieldName: PC_MINGIDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 4, PC_MINGIDAT.data(), 4, &cbPC_MINGIDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 1 Buffer Size: 2 FieldName: PC_MINGTYPE ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 1, PC_MINGTYPE.data(), 2, &cbPC_MINGTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_MINGFSDOFF ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 8, PC_MINGFSDOFF.data(), 8, &cbPC_MINGFSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_MINGVSDOFF ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 8, PC_MINGVSDOFF.data(), 8, &cbPC_MINGVSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 1 Buffer Size: 30 FieldName: PC_MINGUSERDEF1 ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 1, PC_MINGUSERDEF1.data(), 30, &cbPC_MINGUSERDEF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 1 Buffer Size: 30 FieldName: PC_MINGUSERDEF2 ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 1, PC_MINGUSERDEF2.data(), 30, &cbPC_MINGUSERDEF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [20] Type: 1 Buffer Size: 30 FieldName: PC_MINGUSERDEF3 ";
		r = ::SQLBindCol(hStmt_Fetch, 20, 1, PC_MINGUSERDEF3.data(), 30, &cbPC_MINGUSERDEF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [21] Type: 1 Buffer Size: 30 FieldName: PC_MINGUSERDEF4 ";
		r = ::SQLBindCol(hStmt_Fetch, 21, 1, PC_MINGUSERDEF4.data(), 30, &cbPC_MINGUSERDEF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_MINGPIYLD ";
		r = ::SQLBindCol(hStmt_Fetch, 22, 8, PC_MINGPIYLD.data(), 8, &cbPC_MINGPIYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [23] Type: 1 Buffer Size: 23 FieldName: PC_MING_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 23, 1, PC_MING_LASTUPD.data(), 23, &cbPC_MING_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [24] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = ::SQLBindCol(hStmt_Fetch, 24, 1, PC_MBOWIPACCT.data(), 24, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [25] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 25, 1, PC_PRTNO.data(), 18, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MINGREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_MINGRED ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_MINGRED.constData(), 0, &cbPC_MINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_MINGITEM ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MINGITEM.constData(), 0, &cbPC_MINGITEM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_MINGSCALE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MINGSCALE.constData(), 0, &cbPC_MINGSCALE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_MINGQPB ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MINGQPB.constData(), 0, &cbPC_MINGQPB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 1 Buffer Size: 2 FieldName: PC_MINGUOM ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_MINGUOM.constData(), 0, &cbPC_MINGUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_MINGSEQ ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MINGSEQ.constData(), 0, &cbPC_MINGSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_MINGYLD ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MINGYLD.constData(), 0, &cbPC_MINGYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_MINGEDAT ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_MINGEDAT.constData(), 0, &cbPC_MINGEDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 4 Buffer Size: 4 FieldName: PC_MINGIDAT ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_MINGIDAT.constData(), 0, &cbPC_MINGIDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 1 Buffer Size: 2 FieldName: PC_MINGTYPE ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_MINGTYPE.constData(), 0, &cbPC_MINGTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_MINGFSDOFF ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MINGFSDOFF.constData(), 0, &cbPC_MINGFSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_MINGVSDOFF ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MINGVSDOFF.constData(), 0, &cbPC_MINGVSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 1 Buffer Size: 30 FieldName: PC_MINGUSERDEF1 ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_MINGUSERDEF1.constData(), 0, &cbPC_MINGUSERDEF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 1 Buffer Size: 30 FieldName: PC_MINGUSERDEF2 ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_MINGUSERDEF2.constData(), 0, &cbPC_MINGUSERDEF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [20] Type: 1 Buffer Size: 30 FieldName: PC_MINGUSERDEF3 ";
		r = SQLBindParameter(hStmt_Insert, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_MINGUSERDEF3.constData(), 0, &cbPC_MINGUSERDEF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [21] Type: 1 Buffer Size: 30 FieldName: PC_MINGUSERDEF4 ";
		r = SQLBindParameter(hStmt_Insert, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_MINGUSERDEF4.constData(), 0, &cbPC_MINGUSERDEF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_MINGPIYLD ";
		r = SQLBindParameter(hStmt_Insert, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MINGPIYLD.constData(), 0, &cbPC_MINGPIYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [23] Type: 1 Buffer Size: 23 FieldName: PC_MING_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 23, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_MING_LASTUPD.constData(), 0, &cbPC_MING_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [24] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = SQLBindParameter(hStmt_Insert, 24, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 24, 0, (SQLPOINTER)PC_MBOWIPACCT.constData(), 0, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [25] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = SQLBindParameter(hStmt_Insert, 25, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_PRTNO.constData(), 0, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 26, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 27, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 28, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MINGREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MINGREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MINGREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MINGREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FRMHDESSET::PC_FRMHDESSET(QObject * parent) : QObject(parent) 
,tableName("PC_FRMHDESSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FRMHDESSET 
PC_FRMHDESSET::~PC_FRMHDESSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FRMHDESSET

// begin method functions
void PC_FRMHDESSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FRMHDESSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FRMHDESSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FRMHDESSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FRMHDESSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMHDESSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FRMHDESSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FRMHDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FRMHDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FRMHDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMHDESSET";
	qDebug(category) << "unsertSQL - update PC_FRMHDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_FRMHDESSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FRMHDESSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_FRMHDESSET
}
void PC_FRMHDESSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FRMHDESSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FRMHDESSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FRMHDESSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FRMHDESSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FRMHDESSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FRMHDESSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FRMHDESSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FRMHDESSET");
				createTable();
			}break;
		}
	}
}

bool PC_FRMHDESSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FRMHDESSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FRMHDESSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FRMHDESSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FRMHDESSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FRMHDESSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_CATFRMPVSET::PC_CATFRMPVSET(QObject * parent) : QObject(parent) 
,tableName("PC_CATFRMPVSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_CATFRMPVSET 
PC_CATFRMPVSET::~PC_CATFRMPVSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_CATFRMPVSET

// begin method functions
void PC_CATFRMPVSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_CATFRMPVSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_CATFRMPVSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_CATFRMPVSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_CATFRMPVSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CATFRMPVSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_CATFRMPVSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_CATFRMPVSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_CATFRMPVSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_CATFRMPVSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CATFRMPVSET";
	qDebug(category) << "unsertSQL - update PC_CATFRMPVSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_CATFRMPVSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_CATFRMPVSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_CATFRMPVSET
}
void PC_CATFRMPVSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_CATFRMPVSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_CATFRMPVSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_CATFRMPVSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_CATFRMPVSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_CATFRMPVSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_CATFRMPVSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_CATFRMPVSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_CATFRMPVSET");
				createTable();
			}break;
		}
	}
}

bool PC_CATFRMPVSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_CATFRMPVSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_CATFRMPVSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_CATFRMPVSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_CATFRMPVSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_CATFRMPVSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_CHGHCHGDSET::PC_CHGHCHGDSET(QObject * parent) : QObject(parent) 
,tableName("PC_CHGHCHGDSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_CHGHCHGDSET 
PC_CHGHCHGDSET::~PC_CHGHCHGDSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_CHGHCHGDSET

// begin method functions
void PC_CHGHCHGDSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_CHGHCHGDSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_CHGHCHGDSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_CHGHCHGDSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_CHGHCHGDSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CHGHCHGDSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_CHGHCHGDSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_CHGHCHGDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_CHGHCHGDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_CHGHCHGDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CHGHCHGDSET";
	qDebug(category) << "unsertSQL - update PC_CHGHCHGDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_CHGHCHGDSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_CHGHCHGDSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_CHGHCHGDSET
}
void PC_CHGHCHGDSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_CHGHCHGDSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_CHGHCHGDSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_CHGHCHGDSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_CHGHCHGDSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_CHGHCHGDSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_CHGHCHGDSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_CHGHCHGDSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_CHGHCHGDSET");
				createTable();
			}break;
		}
	}
}

bool PC_CHGHCHGDSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_CHGHCHGDSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_CHGHCHGDSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_CHGHCHGDSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_CHGHCHGDSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_CHGHCHGDSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FRMENDSET::PC_FRMENDSET(QObject * parent) : QObject(parent) 
,tableName("PC_FRMENDSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FRMENDSET 
PC_FRMENDSET::~PC_FRMENDSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FRMENDSET

// begin method functions
void PC_FRMENDSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FRMENDSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FRMENDSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FRMENDSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FRMENDSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMENDSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FRMENDSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FRMENDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FRMENDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FRMENDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMENDSET";
	qDebug(category) << "unsertSQL - update PC_FRMENDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_FRMENDSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FRMENDSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_FRMENDSET
}
void PC_FRMENDSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FRMENDSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FRMENDSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FRMENDSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FRMENDSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FRMENDSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FRMENDSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FRMENDSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FRMENDSET");
				createTable();
			}break;
		}
	}
}

bool PC_FRMENDSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FRMENDSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FRMENDSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FRMENDSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FRMENDSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FRMENDSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_WOHHSHSET::PC_WOHHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_WOHHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_WOHHSHSET 
PC_WOHHSHSET::~PC_WOHHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_WOHHSHSET

// begin method functions
void PC_WOHHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_WOHHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_WOHHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_WOHHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_WOHHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WOHHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_WOHHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_WOHHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_WOHHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_WOHHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WOHHSHSET";
	qDebug(category) << "unsertSQL - update PC_WOHHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_WOHHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_WOHHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_WOHHSHSET
}
void PC_WOHHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_WOHHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_WOHHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_WOHHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_WOHHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_WOHHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_WOHHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_WOHHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_WOHHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_WOHHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_WOHHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_WOHHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_WOHHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_WOHHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_WOHHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PISAFREC::PC_PISAFREC(QObject * parent) : QObject(parent) 
,tableName("PC_PISAFREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PISAFREC 
PC_PISAFREC::~PC_PISAFREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_PISAFCODE.clear();
	PC_PISAFTEXT.clear();
	PC_PISAF_LASTUPD.clear();
	PC_PICODE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PISAFREC

// begin method functions
void PC_PISAFREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PISAFREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PISAFREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PISAFREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PISAFREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_PISAFCODE, PC_PISAFTEXT, PC_PISAF_LASTUPD, PC_PICODE from PC_PISAFREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PISAFREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PISAFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_PISAFCODE, PC_PISAFTEXT, PC_PISAF_LASTUPD, PC_PICODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PISAFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_PISAFCODE = ?, PC_PISAFTEXT = ?, PC_PISAF_LASTUPD = ?, PC_PICODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PISAFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_PISAFCODE, PC_PISAFTEXT, PC_PISAF_LASTUPD, PC_PICODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_PISAFCODE, PC_PISAFTEXT, PC_PISAF_LASTUPD, PC_PICODE from PC_PISAFREC";
	qDebug(category) << "unsertSQL - update PC_PISAFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_PISAFCODE = ?, PC_PISAFTEXT = ?, PC_PISAF_LASTUPD = ?, PC_PICODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_PISAFREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PISAFREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_PISAFCODE[10]";
	PC_PISAFCODE.resize(10);
	qDebug(category) << "Malloc - PC_PISAFTEXT[60]";
	PC_PISAFTEXT.resize(60);
	qDebug(category) << "Malloc - PC_PISAF_LASTUPD[23]";
	PC_PISAF_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_PICODE[2]";
	PC_PICODE.resize(2);

#pragma endregion Resize Fields PC_PISAFREC
}
void PC_PISAFREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PISAFREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PISAFREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PISAFREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PISAFREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PISAFREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PISAFREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PISAFREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PISAFREC");
				createTable();
			}break;
		}
	}
}

bool PC_PISAFREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_PISAFCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_PISAFCODE.data(), 10, &cbPC_PISAFCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_PISAFTEXT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_PISAFTEXT.data(), 60, &cbPC_PISAFTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_PISAF_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_PISAF_LASTUPD.data(), 23, &cbPC_PISAF_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_PICODE ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 5, PC_PICODE.data(), 2, &cbPC_PICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PISAFREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_PISAFCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_PISAFCODE.constData(), 0, &cbPC_PISAFCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_PISAFTEXT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_PISAFTEXT.constData(), 0, &cbPC_PISAFTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_PISAF_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_PISAF_LASTUPD.constData(), 0, &cbPC_PISAF_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_PICODE ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_PICODE.constData(), 0, &cbPC_PICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PISAFREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PISAFREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PISAFREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PISAFREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FCOHFCODSET::PC_FCOHFCODSET(QObject * parent) : QObject(parent) 
,tableName("PC_FCOHFCODSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FCOHFCODSET 
PC_FCOHFCODSET::~PC_FCOHFCODSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FCOHFCODSET

// begin method functions
void PC_FCOHFCODSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FCOHFCODSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FCOHFCODSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FCOHFCODSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FCOHFCODSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FCOHFCODSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FCOHFCODSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FCOHFCODSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FCOHFCODSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FCOHFCODSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FCOHFCODSET";
	qDebug(category) << "unsertSQL - update PC_FCOHFCODSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_FCOHFCODSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FCOHFCODSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_FCOHFCODSET
}
void PC_FCOHFCODSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FCOHFCODSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FCOHFCODSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FCOHFCODSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FCOHFCODSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FCOHFCODSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FCOHFCODSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FCOHFCODSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FCOHFCODSET");
				createTable();
			}break;
		}
	}
}

bool PC_FCOHFCODSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FCOHFCODSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FCOHFCODSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FCOHFCODSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FCOHFCODSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FCOHFCODSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FRMREC::PC_FRMREC(QObject * parent) : QObject(parent) 
,tableName("PC_FRMREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FRMREC 
PC_FRMREC::~PC_FRMREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_FRMNAME.clear();
	PC_FRMSTAT.clear();
	PC_FRMPROD.clear();
	PC_FRMSTDQTY.clear();
	PC_FRMUOM.clear();
	PC_FRMREV.clear();
	PC_FRMORIG.clear();
	PC_FRMENDAT.clear();
	PC_FRMCHGLOGFLG.clear();
	PC_FRMUSERDEF1.clear();
	PC_FRMUSERDEF2.clear();
	PC_FRMUSERDEF3.clear();
	PC_FRMUSERDEF4.clear();
	PC_FRM_LASTUPD.clear();
	PC_PRTNO.clear();
	PC_CATEGORY.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FRMREC

// begin method functions
void PC_FRMREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FRMREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FRMREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FRMREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FRMREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_FRMNAME, PC_FRMSTAT, PC_FRMPROD, PC_FRMSTDQTY, PC_FRMUOM, PC_FRMREV, PC_FRMORIG, PC_FRMENDAT, PC_FRMCHGLOGFLG, PC_FRMUSERDEF1, PC_FRMUSERDEF2, PC_FRMUSERDEF3, PC_FRMUSERDEF4, PC_FRM_LASTUPD, PC_PRTNO, PC_CATEGORY from PC_FRMREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FRMREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FRMREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_FRMNAME, PC_FRMSTAT, PC_FRMPROD, PC_FRMSTDQTY, PC_FRMUOM, PC_FRMREV, PC_FRMORIG, PC_FRMENDAT, PC_FRMCHGLOGFLG, PC_FRMUSERDEF1, PC_FRMUSERDEF2, PC_FRMUSERDEF3, PC_FRMUSERDEF4, PC_FRM_LASTUPD, PC_PRTNO, PC_CATEGORY ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FRMREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_FRMNAME = ?, PC_FRMSTAT = ?, PC_FRMPROD = ?, PC_FRMSTDQTY = ?, PC_FRMUOM = ?, PC_FRMREV = ?, PC_FRMORIG = ?, PC_FRMENDAT = ?, PC_FRMCHGLOGFLG = ?, PC_FRMUSERDEF1 = ?, PC_FRMUSERDEF2 = ?, PC_FRMUSERDEF3 = ?, PC_FRMUSERDEF4 = ?, PC_FRM_LASTUPD = ?, PC_PRTNO = ?, PC_CATEGORY = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FRMREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_FRMNAME, PC_FRMSTAT, PC_FRMPROD, PC_FRMSTDQTY, PC_FRMUOM, PC_FRMREV, PC_FRMORIG, PC_FRMENDAT, PC_FRMCHGLOGFLG, PC_FRMUSERDEF1, PC_FRMUSERDEF2, PC_FRMUSERDEF3, PC_FRMUSERDEF4, PC_FRM_LASTUPD, PC_PRTNO, PC_CATEGORY ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_FRMNAME, PC_FRMSTAT, PC_FRMPROD, PC_FRMSTDQTY, PC_FRMUOM, PC_FRMREV, PC_FRMORIG, PC_FRMENDAT, PC_FRMCHGLOGFLG, PC_FRMUSERDEF1, PC_FRMUSERDEF2, PC_FRMUSERDEF3, PC_FRMUSERDEF4, PC_FRM_LASTUPD, PC_PRTNO, PC_CATEGORY from PC_FRMREC";
	qDebug(category) << "unsertSQL - update PC_FRMREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_FRMNAME = ?, PC_FRMSTAT = ?, PC_FRMPROD = ?, PC_FRMSTDQTY = ?, PC_FRMUOM = ?, PC_FRMREV = ?, PC_FRMORIG = ?, PC_FRMENDAT = ?, PC_FRMCHGLOGFLG = ?, PC_FRMUSERDEF1 = ?, PC_FRMUSERDEF2 = ?, PC_FRMUSERDEF3 = ?, PC_FRMUSERDEF4 = ?, PC_FRM_LASTUPD = ?, PC_PRTNO = ?, PC_CATEGORY = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_FRMREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FRMREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_FRMNAME[20]";
	PC_FRMNAME.resize(20);
	qDebug(category) << "Malloc - PC_FRMSTAT[2]";
	PC_FRMSTAT.resize(2);
	qDebug(category) << "Malloc - PC_FRMPROD[18]";
	PC_FRMPROD.resize(18);
	qDebug(category) << "Malloc - PC_FRMSTDQTY[8]";
	PC_FRMSTDQTY.resize(8);
	qDebug(category) << "Malloc - PC_FRMUOM[2]";
	PC_FRMUOM.resize(2);
	qDebug(category) << "Malloc - PC_FRMREV[2]";
	PC_FRMREV.resize(2);
	qDebug(category) << "Malloc - PC_FRMORIG[10]";
	PC_FRMORIG.resize(10);
	qDebug(category) << "Malloc - PC_FRMENDAT[4]";
	PC_FRMENDAT.resize(4);
	qDebug(category) << "Malloc - PC_FRMCHGLOGFLG[2]";
	PC_FRMCHGLOGFLG.resize(2);
	qDebug(category) << "Malloc - PC_FRMUSERDEF1[30]";
	PC_FRMUSERDEF1.resize(30);
	qDebug(category) << "Malloc - PC_FRMUSERDEF2[30]";
	PC_FRMUSERDEF2.resize(30);
	qDebug(category) << "Malloc - PC_FRMUSERDEF3[30]";
	PC_FRMUSERDEF3.resize(30);
	qDebug(category) << "Malloc - PC_FRMUSERDEF4[30]";
	PC_FRMUSERDEF4.resize(30);
	qDebug(category) << "Malloc - PC_FRM_LASTUPD[23]";
	PC_FRM_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_PRTNO[18]";
	PC_PRTNO.resize(18);
	qDebug(category) << "Malloc - PC_CATEGORY[10]";
	PC_CATEGORY.resize(10);

#pragma endregion Resize Fields PC_FRMREC
}
void PC_FRMREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FRMREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FRMREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FRMREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FRMREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FRMREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FRMREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FRMREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FRMREC");
				createTable();
			}break;
		}
	}
}

bool PC_FRMREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_FRMNAME.data(), 20, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_FRMSTAT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_FRMSTAT.data(), 2, &cbPC_FRMSTAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 18 FieldName: PC_FRMPROD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_FRMPROD.data(), 18, &cbPC_FRMPROD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_FRMSTDQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 8, PC_FRMSTDQTY.data(), 8, &cbPC_FRMSTDQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 1 Buffer Size: 2 FieldName: PC_FRMUOM ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 1, PC_FRMUOM.data(), 2, &cbPC_FRMUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 1 Buffer Size: 2 FieldName: PC_FRMREV ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 1, PC_FRMREV.data(), 2, &cbPC_FRMREV);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 1 Buffer Size: 10 FieldName: PC_FRMORIG ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 1, PC_FRMORIG.data(), 10, &cbPC_FRMORIG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_FRMENDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 4, PC_FRMENDAT.data(), 4, &cbPC_FRMENDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 5 Buffer Size: 2 FieldName: PC_FRMCHGLOGFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 5, PC_FRMCHGLOGFLG.data(), 2, &cbPC_FRMCHGLOGFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 1 Buffer Size: 30 FieldName: PC_FRMUSERDEF1 ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 1, PC_FRMUSERDEF1.data(), 30, &cbPC_FRMUSERDEF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 1 Buffer Size: 30 FieldName: PC_FRMUSERDEF2 ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 1, PC_FRMUSERDEF2.data(), 30, &cbPC_FRMUSERDEF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 1 Buffer Size: 30 FieldName: PC_FRMUSERDEF3 ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 1, PC_FRMUSERDEF3.data(), 30, &cbPC_FRMUSERDEF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 1 Buffer Size: 30 FieldName: PC_FRMUSERDEF4 ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 1, PC_FRMUSERDEF4.data(), 30, &cbPC_FRMUSERDEF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 1 Buffer Size: 23 FieldName: PC_FRM_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 1, PC_FRM_LASTUPD.data(), 23, &cbPC_FRM_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [20] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 20, 1, PC_PRTNO.data(), 18, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [21] Type: 1 Buffer Size: 10 FieldName: PC_CATEGORY ";
		r = ::SQLBindCol(hStmt_Fetch, 21, 1, PC_CATEGORY.data(), 10, &cbPC_CATEGORY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FRMREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 20, 0, (SQLPOINTER)PC_FRMNAME.constData(), 0, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_FRMSTAT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_FRMSTAT.constData(), 0, &cbPC_FRMSTAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 18 FieldName: PC_FRMPROD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_FRMPROD.constData(), 0, &cbPC_FRMPROD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_FRMSTDQTY ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_FRMSTDQTY.constData(), 0, &cbPC_FRMSTDQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 1 Buffer Size: 2 FieldName: PC_FRMUOM ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_FRMUOM.constData(), 0, &cbPC_FRMUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 1 Buffer Size: 2 FieldName: PC_FRMREV ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_FRMREV.constData(), 0, &cbPC_FRMREV);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 1 Buffer Size: 10 FieldName: PC_FRMORIG ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_FRMORIG.constData(), 0, &cbPC_FRMORIG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_FRMENDAT ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_FRMENDAT.constData(), 0, &cbPC_FRMENDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 5 Buffer Size: 2 FieldName: PC_FRMCHGLOGFLG ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_FRMCHGLOGFLG.constData(), 0, &cbPC_FRMCHGLOGFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 1 Buffer Size: 30 FieldName: PC_FRMUSERDEF1 ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_FRMUSERDEF1.constData(), 0, &cbPC_FRMUSERDEF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 1 Buffer Size: 30 FieldName: PC_FRMUSERDEF2 ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_FRMUSERDEF2.constData(), 0, &cbPC_FRMUSERDEF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 1 Buffer Size: 30 FieldName: PC_FRMUSERDEF3 ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_FRMUSERDEF3.constData(), 0, &cbPC_FRMUSERDEF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 1 Buffer Size: 30 FieldName: PC_FRMUSERDEF4 ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_FRMUSERDEF4.constData(), 0, &cbPC_FRMUSERDEF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 1 Buffer Size: 23 FieldName: PC_FRM_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_FRM_LASTUPD.constData(), 0, &cbPC_FRM_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [20] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = SQLBindParameter(hStmt_Insert, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_PRTNO.constData(), 0, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [21] Type: 1 Buffer Size: 10 FieldName: PC_CATEGORY ";
		r = SQLBindParameter(hStmt_Insert, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_CATEGORY.constData(), 0, &cbPC_CATEGORY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 23, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 24, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FRMREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FRMREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FRMREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FRMREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_WKCAPITSET::PC_WKCAPITSET(QObject * parent) : QObject(parent) 
,tableName("PC_WKCAPITSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_WKCAPITSET 
PC_WKCAPITSET::~PC_WKCAPITSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_WKCAPITSET

// begin method functions
void PC_WKCAPITSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_WKCAPITSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_WKCAPITSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_WKCAPITSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_WKCAPITSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WKCAPITSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_WKCAPITSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_WKCAPITSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_WKCAPITSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_WKCAPITSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_WKCAPITSET";
	qDebug(category) << "unsertSQL - update PC_WKCAPITSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_WKCAPITSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_WKCAPITSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_WKCAPITSET
}
void PC_WKCAPITSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_WKCAPITSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_WKCAPITSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_WKCAPITSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_WKCAPITSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_WKCAPITSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_WKCAPITSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_WKCAPITSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_WKCAPITSET");
				createTable();
			}break;
		}
	}
}

bool PC_WKCAPITSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_WKCAPITSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_WKCAPITSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_WKCAPITSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_WKCAPITSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_WKCAPITSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MBOREC::PC_MBOREC(QObject * parent) : QObject(parent) 
,tableName("PC_MBOREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MBOREC 
PC_MBOREC::~PC_MBOREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_MBOWIPACCT.clear();
	PC_MBOVARACCT.clear();
	PC_MBOREPFLG.clear();
	PC_MBONO.clear();
	PC_MBOSTAT.clear();
	PC_MBOFRMNAME.clear();
	PC_MBOFRMSTAT.clear();
	PC_MBOCATEGORY.clear();
	PC_MBOQTY.clear();
	PC_MBOUOM.clear();
	PC_MBOENDAT.clear();
	PC_MBOPC.clear();
	PC_MBOREV.clear();
	PC_MBOACCWRQTY.clear();
	PC_MBOACCWCQTY.clear();
	PC_MBOACCWSQTY.clear();
	PC_MBOACCBSRQTY.clear();
	PC_MBOACCBSCQTY.clear();
	PC_MBOACCBSSQTY.clear();
	PC_MBOUSERDEF1.clear();
	PC_MBOUSERDEF2.clear();
	PC_MBOUSERDEF3.clear();
	PC_MBOUSERDEF4.clear();
	PC_MBO_LASTUPD.clear();
	PC_PRTNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MBOREC

// begin method functions
void PC_MBOREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MBOREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MBOREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MBOREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MBOREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MBOWIPACCT, PC_MBOVARACCT, PC_MBOREPFLG, PC_MBONO, PC_MBOSTAT, PC_MBOFRMNAME, PC_MBOFRMSTAT, PC_MBOCATEGORY, PC_MBOQTY, PC_MBOUOM, PC_MBOENDAT, PC_MBOPC, PC_MBOREV, PC_MBOACCWRQTY, PC_MBOACCWCQTY, PC_MBOACCWSQTY, PC_MBOACCBSRQTY, PC_MBOACCBSCQTY, PC_MBOACCBSSQTY, PC_MBOUSERDEF1, PC_MBOUSERDEF2, PC_MBOUSERDEF3, PC_MBOUSERDEF4, PC_MBO_LASTUPD, PC_PRTNO from PC_MBOREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MBOREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MBOREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MBOWIPACCT, PC_MBOVARACCT, PC_MBOREPFLG, PC_MBONO, PC_MBOSTAT, PC_MBOFRMNAME, PC_MBOFRMSTAT, PC_MBOCATEGORY, PC_MBOQTY, PC_MBOUOM, PC_MBOENDAT, PC_MBOPC, PC_MBOREV, PC_MBOACCWRQTY, PC_MBOACCWCQTY, PC_MBOACCWSQTY, PC_MBOACCBSRQTY, PC_MBOACCBSCQTY, PC_MBOACCBSSQTY, PC_MBOUSERDEF1, PC_MBOUSERDEF2, PC_MBOUSERDEF3, PC_MBOUSERDEF4, PC_MBO_LASTUPD, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MBOREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MBOWIPACCT = ?, PC_MBOVARACCT = ?, PC_MBOREPFLG = ?, PC_MBONO = ?, PC_MBOSTAT = ?, PC_MBOFRMNAME = ?, PC_MBOFRMSTAT = ?, PC_MBOCATEGORY = ?, PC_MBOQTY = ?, PC_MBOUOM = ?, PC_MBOENDAT = ?, PC_MBOPC = ?, PC_MBOREV = ?, PC_MBOACCWRQTY = ?, PC_MBOACCWCQTY = ?, PC_MBOACCWSQTY = ?, PC_MBOACCBSRQTY = ?, PC_MBOACCBSCQTY = ?, PC_MBOACCBSSQTY = ?, PC_MBOUSERDEF1 = ?, PC_MBOUSERDEF2 = ?, PC_MBOUSERDEF3 = ?, PC_MBOUSERDEF4 = ?, PC_MBO_LASTUPD = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MBOREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MBOWIPACCT, PC_MBOVARACCT, PC_MBOREPFLG, PC_MBONO, PC_MBOSTAT, PC_MBOFRMNAME, PC_MBOFRMSTAT, PC_MBOCATEGORY, PC_MBOQTY, PC_MBOUOM, PC_MBOENDAT, PC_MBOPC, PC_MBOREV, PC_MBOACCWRQTY, PC_MBOACCWCQTY, PC_MBOACCWSQTY, PC_MBOACCBSRQTY, PC_MBOACCBSCQTY, PC_MBOACCBSSQTY, PC_MBOUSERDEF1, PC_MBOUSERDEF2, PC_MBOUSERDEF3, PC_MBOUSERDEF4, PC_MBO_LASTUPD, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MBOWIPACCT, PC_MBOVARACCT, PC_MBOREPFLG, PC_MBONO, PC_MBOSTAT, PC_MBOFRMNAME, PC_MBOFRMSTAT, PC_MBOCATEGORY, PC_MBOQTY, PC_MBOUOM, PC_MBOENDAT, PC_MBOPC, PC_MBOREV, PC_MBOACCWRQTY, PC_MBOACCWCQTY, PC_MBOACCWSQTY, PC_MBOACCBSRQTY, PC_MBOACCBSCQTY, PC_MBOACCBSSQTY, PC_MBOUSERDEF1, PC_MBOUSERDEF2, PC_MBOUSERDEF3, PC_MBOUSERDEF4, PC_MBO_LASTUPD, PC_PRTNO from PC_MBOREC";
	qDebug(category) << "unsertSQL - update PC_MBOREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MBOWIPACCT = ?, PC_MBOVARACCT = ?, PC_MBOREPFLG = ?, PC_MBONO = ?, PC_MBOSTAT = ?, PC_MBOFRMNAME = ?, PC_MBOFRMSTAT = ?, PC_MBOCATEGORY = ?, PC_MBOQTY = ?, PC_MBOUOM = ?, PC_MBOENDAT = ?, PC_MBOPC = ?, PC_MBOREV = ?, PC_MBOACCWRQTY = ?, PC_MBOACCWCQTY = ?, PC_MBOACCWSQTY = ?, PC_MBOACCBSRQTY = ?, PC_MBOACCBSCQTY = ?, PC_MBOACCBSSQTY = ?, PC_MBOUSERDEF1 = ?, PC_MBOUSERDEF2 = ?, PC_MBOUSERDEF3 = ?, PC_MBOUSERDEF4 = ?, PC_MBO_LASTUPD = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_MBOREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MBOREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_MBOWIPACCT[24]";
	PC_MBOWIPACCT.resize(24);
	qDebug(category) << "Malloc - PC_MBOVARACCT[24]";
	PC_MBOVARACCT.resize(24);
	qDebug(category) << "Malloc - PC_MBOREPFLG[2]";
	PC_MBOREPFLG.resize(2);
	qDebug(category) << "Malloc - PC_MBONO[10]";
	PC_MBONO.resize(10);
	qDebug(category) << "Malloc - PC_MBOSTAT[2]";
	PC_MBOSTAT.resize(2);
	qDebug(category) << "Malloc - PC_MBOFRMNAME[20]";
	PC_MBOFRMNAME.resize(20);
	qDebug(category) << "Malloc - PC_MBOFRMSTAT[2]";
	PC_MBOFRMSTAT.resize(2);
	qDebug(category) << "Malloc - PC_MBOCATEGORY[10]";
	PC_MBOCATEGORY.resize(10);
	qDebug(category) << "Malloc - PC_MBOQTY[8]";
	PC_MBOQTY.resize(8);
	qDebug(category) << "Malloc - PC_MBOUOM[2]";
	PC_MBOUOM.resize(2);
	qDebug(category) << "Malloc - PC_MBOENDAT[4]";
	PC_MBOENDAT.resize(4);
	qDebug(category) << "Malloc - PC_MBOPC[2]";
	PC_MBOPC.resize(2);
	qDebug(category) << "Malloc - PC_MBOREV[2]";
	PC_MBOREV.resize(2);
	qDebug(category) << "Malloc - PC_MBOACCWRQTY[8]";
	PC_MBOACCWRQTY.resize(8);
	qDebug(category) << "Malloc - PC_MBOACCWCQTY[8]";
	PC_MBOACCWCQTY.resize(8);
	qDebug(category) << "Malloc - PC_MBOACCWSQTY[8]";
	PC_MBOACCWSQTY.resize(8);
	qDebug(category) << "Malloc - PC_MBOACCBSRQTY[8]";
	PC_MBOACCBSRQTY.resize(8);
	qDebug(category) << "Malloc - PC_MBOACCBSCQTY[8]";
	PC_MBOACCBSCQTY.resize(8);
	qDebug(category) << "Malloc - PC_MBOACCBSSQTY[8]";
	PC_MBOACCBSSQTY.resize(8);
	qDebug(category) << "Malloc - PC_MBOUSERDEF1[30]";
	PC_MBOUSERDEF1.resize(30);
	qDebug(category) << "Malloc - PC_MBOUSERDEF2[30]";
	PC_MBOUSERDEF2.resize(30);
	qDebug(category) << "Malloc - PC_MBOUSERDEF3[30]";
	PC_MBOUSERDEF3.resize(30);
	qDebug(category) << "Malloc - PC_MBOUSERDEF4[30]";
	PC_MBOUSERDEF4.resize(30);
	qDebug(category) << "Malloc - PC_MBO_LASTUPD[23]";
	PC_MBO_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_PRTNO[18]";
	PC_PRTNO.resize(18);

#pragma endregion Resize Fields PC_MBOREC
}
void PC_MBOREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MBOREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MBOREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MBOREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MBOREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MBOREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MBOREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MBOREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MBOREC");
				createTable();
			}break;
		}
	}
}

bool PC_MBOREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_MBOWIPACCT.data(), 24, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 24 FieldName: PC_MBOVARACCT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_MBOVARACCT.data(), 24, &cbPC_MBOVARACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_MBOREPFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, PC_MBOREPFLG.data(), 2, &cbPC_MBOREPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 10 FieldName: PC_MBONO ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_MBONO.data(), 10, &cbPC_MBONO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 5 Buffer Size: 2 FieldName: PC_MBOSTAT ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 5, PC_MBOSTAT.data(), 2, &cbPC_MBOSTAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 1 Buffer Size: 20 FieldName: PC_MBOFRMNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 1, PC_MBOFRMNAME.data(), 20, &cbPC_MBOFRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 5 Buffer Size: 2 FieldName: PC_MBOFRMSTAT ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 5, PC_MBOFRMSTAT.data(), 2, &cbPC_MBOFRMSTAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 1 Buffer Size: 10 FieldName: PC_MBOCATEGORY ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 1, PC_MBOCATEGORY.data(), 10, &cbPC_MBOCATEGORY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_MBOQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 8, PC_MBOQTY.data(), 8, &cbPC_MBOQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 1 Buffer Size: 2 FieldName: PC_MBOUOM ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 1, PC_MBOUOM.data(), 2, &cbPC_MBOUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 4 Buffer Size: 4 FieldName: PC_MBOENDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 4, PC_MBOENDAT.data(), 4, &cbPC_MBOENDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 1 Buffer Size: 2 FieldName: PC_MBOPC ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 1, PC_MBOPC.data(), 2, &cbPC_MBOPC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 1 Buffer Size: 2 FieldName: PC_MBOREV ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 1, PC_MBOREV.data(), 2, &cbPC_MBOREV);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCWRQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 8, PC_MBOACCWRQTY.data(), 8, &cbPC_MBOACCWRQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [20] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCWCQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 20, 8, PC_MBOACCWCQTY.data(), 8, &cbPC_MBOACCWCQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [21] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCWSQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 21, 8, PC_MBOACCWSQTY.data(), 8, &cbPC_MBOACCWSQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCBSRQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 22, 8, PC_MBOACCBSRQTY.data(), 8, &cbPC_MBOACCBSRQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [23] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCBSCQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 23, 8, PC_MBOACCBSCQTY.data(), 8, &cbPC_MBOACCBSCQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCBSSQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 24, 8, PC_MBOACCBSSQTY.data(), 8, &cbPC_MBOACCBSSQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [25] Type: 1 Buffer Size: 30 FieldName: PC_MBOUSERDEF1 ";
		r = ::SQLBindCol(hStmt_Fetch, 25, 1, PC_MBOUSERDEF1.data(), 30, &cbPC_MBOUSERDEF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [26] Type: 1 Buffer Size: 30 FieldName: PC_MBOUSERDEF2 ";
		r = ::SQLBindCol(hStmt_Fetch, 26, 1, PC_MBOUSERDEF2.data(), 30, &cbPC_MBOUSERDEF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [27] Type: 1 Buffer Size: 30 FieldName: PC_MBOUSERDEF3 ";
		r = ::SQLBindCol(hStmt_Fetch, 27, 1, PC_MBOUSERDEF3.data(), 30, &cbPC_MBOUSERDEF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [28] Type: 1 Buffer Size: 30 FieldName: PC_MBOUSERDEF4 ";
		r = ::SQLBindCol(hStmt_Fetch, 28, 1, PC_MBOUSERDEF4.data(), 30, &cbPC_MBOUSERDEF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [29] Type: 1 Buffer Size: 23 FieldName: PC_MBO_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 29, 1, PC_MBO_LASTUPD.data(), 23, &cbPC_MBO_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [30] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 30, 1, PC_PRTNO.data(), 18, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MBOREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 24, 0, (SQLPOINTER)PC_MBOWIPACCT.constData(), 0, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 24 FieldName: PC_MBOVARACCT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 24, 0, (SQLPOINTER)PC_MBOVARACCT.constData(), 0, &cbPC_MBOVARACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_MBOREPFLG ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MBOREPFLG.constData(), 0, &cbPC_MBOREPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 10 FieldName: PC_MBONO ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_MBONO.constData(), 0, &cbPC_MBONO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 5 Buffer Size: 2 FieldName: PC_MBOSTAT ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MBOSTAT.constData(), 0, &cbPC_MBOSTAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 1 Buffer Size: 20 FieldName: PC_MBOFRMNAME ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 20, 0, (SQLPOINTER)PC_MBOFRMNAME.constData(), 0, &cbPC_MBOFRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 5 Buffer Size: 2 FieldName: PC_MBOFRMSTAT ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MBOFRMSTAT.constData(), 0, &cbPC_MBOFRMSTAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 1 Buffer Size: 10 FieldName: PC_MBOCATEGORY ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_MBOCATEGORY.constData(), 0, &cbPC_MBOCATEGORY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_MBOQTY ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MBOQTY.constData(), 0, &cbPC_MBOQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 1 Buffer Size: 2 FieldName: PC_MBOUOM ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_MBOUOM.constData(), 0, &cbPC_MBOUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 4 Buffer Size: 4 FieldName: PC_MBOENDAT ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_MBOENDAT.constData(), 0, &cbPC_MBOENDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 1 Buffer Size: 2 FieldName: PC_MBOPC ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_MBOPC.constData(), 0, &cbPC_MBOPC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 1 Buffer Size: 2 FieldName: PC_MBOREV ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_MBOREV.constData(), 0, &cbPC_MBOREV);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCWRQTY ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MBOACCWRQTY.constData(), 0, &cbPC_MBOACCWRQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [20] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCWCQTY ";
		r = SQLBindParameter(hStmt_Insert, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MBOACCWCQTY.constData(), 0, &cbPC_MBOACCWCQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [21] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCWSQTY ";
		r = SQLBindParameter(hStmt_Insert, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MBOACCWSQTY.constData(), 0, &cbPC_MBOACCWSQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCBSRQTY ";
		r = SQLBindParameter(hStmt_Insert, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MBOACCBSRQTY.constData(), 0, &cbPC_MBOACCBSRQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [23] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCBSCQTY ";
		r = SQLBindParameter(hStmt_Insert, 23, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MBOACCBSCQTY.constData(), 0, &cbPC_MBOACCBSCQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_MBOACCBSSQTY ";
		r = SQLBindParameter(hStmt_Insert, 24, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MBOACCBSSQTY.constData(), 0, &cbPC_MBOACCBSSQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [25] Type: 1 Buffer Size: 30 FieldName: PC_MBOUSERDEF1 ";
		r = SQLBindParameter(hStmt_Insert, 25, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_MBOUSERDEF1.constData(), 0, &cbPC_MBOUSERDEF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [26] Type: 1 Buffer Size: 30 FieldName: PC_MBOUSERDEF2 ";
		r = SQLBindParameter(hStmt_Insert, 26, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_MBOUSERDEF2.constData(), 0, &cbPC_MBOUSERDEF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [27] Type: 1 Buffer Size: 30 FieldName: PC_MBOUSERDEF3 ";
		r = SQLBindParameter(hStmt_Insert, 27, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_MBOUSERDEF3.constData(), 0, &cbPC_MBOUSERDEF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [28] Type: 1 Buffer Size: 30 FieldName: PC_MBOUSERDEF4 ";
		r = SQLBindParameter(hStmt_Insert, 28, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_MBOUSERDEF4.constData(), 0, &cbPC_MBOUSERDEF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [29] Type: 1 Buffer Size: 23 FieldName: PC_MBO_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 29, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_MBO_LASTUPD.constData(), 0, &cbPC_MBO_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [30] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = SQLBindParameter(hStmt_Insert, 30, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_PRTNO.constData(), 0, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 31, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 32, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 33, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MBOREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MBOREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MBOREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MBOREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MBOMENDSET::PC_MBOMENDSET(QObject * parent) : QObject(parent) 
,tableName("PC_MBOMENDSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MBOMENDSET 
PC_MBOMENDSET::~PC_MBOMENDSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MBOMENDSET

// begin method functions
void PC_MBOMENDSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MBOMENDSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MBOMENDSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MBOMENDSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MBOMENDSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOMENDSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MBOMENDSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MBOMENDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MBOMENDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MBOMENDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOMENDSET";
	qDebug(category) << "unsertSQL - update PC_MBOMENDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_MBOMENDSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MBOMENDSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_MBOMENDSET
}
void PC_MBOMENDSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MBOMENDSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MBOMENDSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MBOMENDSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MBOMENDSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MBOMENDSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MBOMENDSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MBOMENDSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MBOMENDSET");
				createTable();
			}break;
		}
	}
}

bool PC_MBOMENDSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MBOMENDSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MBOMENDSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MBOMENDSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MBOMENDSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MBOMENDSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTFCODSET::PC_PRTFCODSET(QObject * parent) : QObject(parent) 
,tableName("PC_PRTFCODSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTFCODSET 
PC_PRTFCODSET::~PC_PRTFCODSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTFCODSET

// begin method functions
void PC_PRTFCODSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTFCODSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTFCODSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTFCODSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTFCODSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTFCODSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTFCODSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTFCODSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTFCODSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTFCODSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTFCODSET";
	qDebug(category) << "unsertSQL - update PC_PRTFCODSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PRTFCODSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTFCODSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PRTFCODSET
}
void PC_PRTFCODSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTFCODSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTFCODSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTFCODSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTFCODSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTFCODSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTFCODSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTFCODSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTFCODSET");
				createTable();
			}break;
		}
	}
}

bool PC_PRTFCODSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTFCODSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTFCODSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTFCODSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTFCODSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTFCODSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TRKNOTREC::PC_TRKNOTREC(QObject * parent) : QObject(parent) 
,tableName("PC_TRKNOTREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TRKNOTREC 
PC_TRKNOTREC::~PC_TRKNOTREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_TRKNOTDESC.clear();
	PC_TRKNOT_LASTUPD.clear();
	PC_TRKNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TRKNOTREC

// begin method functions
void PC_TRKNOTREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TRKNOTREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TRKNOTREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TRKNOTREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TRKNOTREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNOTDESC, PC_TRKNOT_LASTUPD, PC_TRKNO from PC_TRKNOTREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TRKNOTREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TRKNOTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNOTDESC, PC_TRKNOT_LASTUPD, PC_TRKNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TRKNOTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TRKNOTDESC = ?, PC_TRKNOT_LASTUPD = ?, PC_TRKNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TRKNOTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNOTDESC, PC_TRKNOT_LASTUPD, PC_TRKNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNOTDESC, PC_TRKNOT_LASTUPD, PC_TRKNO from PC_TRKNOTREC";
	qDebug(category) << "unsertSQL - update PC_TRKNOTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TRKNOTDESC = ?, PC_TRKNOT_LASTUPD = ?, PC_TRKNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_TRKNOTREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TRKNOTREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_TRKNOTDESC[60]";
	PC_TRKNOTDESC.resize(60);
	qDebug(category) << "Malloc - PC_TRKNOT_LASTUPD[23]";
	PC_TRKNOT_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_TRKNO[10]";
	PC_TRKNO.resize(10);

#pragma endregion Resize Fields PC_TRKNOTREC
}
void PC_TRKNOTREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TRKNOTREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TRKNOTREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TRKNOTREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TRKNOTREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TRKNOTREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TRKNOTREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TRKNOTREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TRKNOTREC");
				createTable();
			}break;
		}
	}
}

bool PC_TRKNOTREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 60 FieldName: PC_TRKNOTDESC ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_TRKNOTDESC.data(), 60, &cbPC_TRKNOTDESC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_TRKNOT_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_TRKNOT_LASTUPD.data(), 23, &cbPC_TRKNOT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 10 FieldName: PC_TRKNO ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_TRKNO.data(), 10, &cbPC_TRKNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TRKNOTREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 60 FieldName: PC_TRKNOTDESC ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_TRKNOTDESC.constData(), 0, &cbPC_TRKNOTDESC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_TRKNOT_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_TRKNOT_LASTUPD.constData(), 0, &cbPC_TRKNOT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 10 FieldName: PC_TRKNO ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TRKNO.constData(), 0, &cbPC_TRKNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TRKNOTREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TRKNOTREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TRKNOTREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TRKNOTREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TRKTRKNOTSET::PC_TRKTRKNOTSET(QObject * parent) : QObject(parent) 
,tableName("PC_TRKTRKNOTSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TRKTRKNOTSET 
PC_TRKTRKNOTSET::~PC_TRKTRKNOTSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TRKTRKNOTSET

// begin method functions
void PC_TRKTRKNOTSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TRKTRKNOTSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TRKTRKNOTSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TRKTRKNOTSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TRKTRKNOTSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TRKTRKNOTSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TRKTRKNOTSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TRKTRKNOTSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TRKTRKNOTSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TRKTRKNOTSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TRKTRKNOTSET";
	qDebug(category) << "unsertSQL - update PC_TRKTRKNOTSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_TRKTRKNOTSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TRKTRKNOTSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_TRKTRKNOTSET
}
void PC_TRKTRKNOTSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TRKTRKNOTSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TRKTRKNOTSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TRKTRKNOTSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TRKTRKNOTSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TRKTRKNOTSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TRKTRKNOTSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TRKTRKNOTSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TRKTRKNOTSET");
				createTable();
			}break;
		}
	}
}

bool PC_TRKTRKNOTSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TRKTRKNOTSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TRKTRKNOTSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TRKTRKNOTSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TRKTRKNOTSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TRKTRKNOTSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_ALTHREC::PC_ALTHREC(QObject * parent) : QObject(parent) 
,tableName("PC_ALTHREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_ALTHREC 
PC_ALTHREC::~PC_ALTHREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_ALTHSUBNO.clear();
	PC_ALTHTYPE.clear();
	PC_ALTHFRMNAME.clear();
	PC_ALTHEDAT.clear();
	PC_ALTHIDAT.clear();
	PC_ALTH_LASTUPD.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_ALTHREC

// begin method functions
void PC_ALTHREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_ALTHREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_ALTHREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_ALTHREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_ALTHREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ALTHSUBNO, PC_ALTHTYPE, PC_ALTHFRMNAME, PC_ALTHEDAT, PC_ALTHIDAT, PC_ALTH_LASTUPD from PC_ALTHREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_ALTHREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_ALTHREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ALTHSUBNO, PC_ALTHTYPE, PC_ALTHFRMNAME, PC_ALTHEDAT, PC_ALTHIDAT, PC_ALTH_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_ALTHREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ALTHSUBNO = ?, PC_ALTHTYPE = ?, PC_ALTHFRMNAME = ?, PC_ALTHEDAT = ?, PC_ALTHIDAT = ?, PC_ALTH_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_ALTHREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ALTHSUBNO, PC_ALTHTYPE, PC_ALTHFRMNAME, PC_ALTHEDAT, PC_ALTHIDAT, PC_ALTH_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ALTHSUBNO, PC_ALTHTYPE, PC_ALTHFRMNAME, PC_ALTHEDAT, PC_ALTHIDAT, PC_ALTH_LASTUPD from PC_ALTHREC";
	qDebug(category) << "unsertSQL - update PC_ALTHREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ALTHSUBNO = ?, PC_ALTHTYPE = ?, PC_ALTHFRMNAME = ?, PC_ALTHEDAT = ?, PC_ALTHIDAT = ?, PC_ALTH_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_ALTHREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_ALTHREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_ALTHSUBNO[16]";
	PC_ALTHSUBNO.resize(16);
	qDebug(category) << "Malloc - PC_ALTHTYPE[2]";
	PC_ALTHTYPE.resize(2);
	qDebug(category) << "Malloc - PC_ALTHFRMNAME[20]";
	PC_ALTHFRMNAME.resize(20);
	qDebug(category) << "Malloc - PC_ALTHEDAT[4]";
	PC_ALTHEDAT.resize(4);
	qDebug(category) << "Malloc - PC_ALTHIDAT[4]";
	PC_ALTHIDAT.resize(4);
	qDebug(category) << "Malloc - PC_ALTH_LASTUPD[23]";
	PC_ALTH_LASTUPD.resize(23);

#pragma endregion Resize Fields PC_ALTHREC
}
void PC_ALTHREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_ALTHREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_ALTHREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_ALTHREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_ALTHREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_ALTHREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_ALTHREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_ALTHREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_ALTHREC");
				createTable();
			}break;
		}
	}
}

bool PC_ALTHREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_ALTHSUBNO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_ALTHSUBNO.data(), 16, &cbPC_ALTHSUBNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_ALTHTYPE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_ALTHTYPE.data(), 2, &cbPC_ALTHTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 20 FieldName: PC_ALTHFRMNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_ALTHFRMNAME.data(), 20, &cbPC_ALTHFRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 4 Buffer Size: 4 FieldName: PC_ALTHEDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 4, PC_ALTHEDAT.data(), 4, &cbPC_ALTHEDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 4 Buffer Size: 4 FieldName: PC_ALTHIDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 4, PC_ALTHIDAT.data(), 4, &cbPC_ALTHIDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 1 Buffer Size: 23 FieldName: PC_ALTH_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 1, PC_ALTH_LASTUPD.data(), 23, &cbPC_ALTH_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_ALTHREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_ALTHSUBNO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 16, 0, (SQLPOINTER)PC_ALTHSUBNO.constData(), 0, &cbPC_ALTHSUBNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_ALTHTYPE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_ALTHTYPE.constData(), 0, &cbPC_ALTHTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 20 FieldName: PC_ALTHFRMNAME ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 20, 0, (SQLPOINTER)PC_ALTHFRMNAME.constData(), 0, &cbPC_ALTHFRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 4 Buffer Size: 4 FieldName: PC_ALTHEDAT ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_ALTHEDAT.constData(), 0, &cbPC_ALTHEDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 4 Buffer Size: 4 FieldName: PC_ALTHIDAT ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_ALTHIDAT.constData(), 0, &cbPC_ALTHIDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 1 Buffer Size: 23 FieldName: PC_ALTH_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_ALTH_LASTUPD.constData(), 0, &cbPC_ALTH_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_ALTHREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_ALTHREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_ALTHREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_ALTHREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_STEPREC::PC_STEPREC(QObject * parent) : QObject(parent) 
,tableName("PC_STEPREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_STEPREC 
PC_STEPREC::~PC_STEPREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_STEPTQTY.clear();
	PC_STEPQPB.clear();
	PC_STEPUOM.clear();
	PC_STEP_LASTUPD.clear();
	PC_INGRED.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_STEPREC

// begin method functions
void PC_STEPREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_STEPREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_STEPREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_STEPREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_STEPREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_STEPTQTY, PC_STEPQPB, PC_STEPUOM, PC_STEP_LASTUPD, PC_INGRED from PC_STEPREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_STEPREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_STEPREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_STEPTQTY, PC_STEPQPB, PC_STEPUOM, PC_STEP_LASTUPD, PC_INGRED ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_STEPREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_STEPTQTY = ?, PC_STEPQPB = ?, PC_STEPUOM = ?, PC_STEP_LASTUPD = ?, PC_INGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_STEPREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_STEPTQTY, PC_STEPQPB, PC_STEPUOM, PC_STEP_LASTUPD, PC_INGRED ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_STEPTQTY, PC_STEPQPB, PC_STEPUOM, PC_STEP_LASTUPD, PC_INGRED from PC_STEPREC";
	qDebug(category) << "unsertSQL - update PC_STEPREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_STEPTQTY = ?, PC_STEPQPB = ?, PC_STEPUOM = ?, PC_STEP_LASTUPD = ?, PC_INGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_STEPREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_STEPREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_STEPTQTY[8]";
	PC_STEPTQTY.resize(8);
	qDebug(category) << "Malloc - PC_STEPQPB[8]";
	PC_STEPQPB.resize(8);
	qDebug(category) << "Malloc - PC_STEPUOM[2]";
	PC_STEPUOM.resize(2);
	qDebug(category) << "Malloc - PC_STEP_LASTUPD[23]";
	PC_STEP_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_INGRED[18]";
	PC_INGRED.resize(18);

#pragma endregion Resize Fields PC_STEPREC
}
void PC_STEPREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_STEPREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_STEPREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_STEPREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_STEPREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_STEPREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_STEPREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_STEPREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_STEPREC");
				createTable();
			}break;
		}
	}
}

bool PC_STEPREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 8 Buffer Size: 8 FieldName: PC_STEPTQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 8, PC_STEPTQTY.data(), 8, &cbPC_STEPTQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 8 Buffer Size: 8 FieldName: PC_STEPQPB ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 8, PC_STEPQPB.data(), 8, &cbPC_STEPQPB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 2 FieldName: PC_STEPUOM ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_STEPUOM.data(), 2, &cbPC_STEPUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 23 FieldName: PC_STEP_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_STEP_LASTUPD.data(), 23, &cbPC_STEP_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 1 Buffer Size: 18 FieldName: PC_INGRED ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 1, PC_INGRED.data(), 18, &cbPC_INGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_STEPREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 8 Buffer Size: 8 FieldName: PC_STEPTQTY ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_STEPTQTY.constData(), 0, &cbPC_STEPTQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 8 Buffer Size: 8 FieldName: PC_STEPQPB ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_STEPQPB.constData(), 0, &cbPC_STEPQPB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 2 FieldName: PC_STEPUOM ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_STEPUOM.constData(), 0, &cbPC_STEPUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 23 FieldName: PC_STEP_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_STEP_LASTUPD.constData(), 0, &cbPC_STEP_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 1 Buffer Size: 18 FieldName: PC_INGRED ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_INGRED.constData(), 0, &cbPC_INGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_STEPREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_STEPREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_STEPREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_STEPREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MBOMBODESSET::PC_MBOMBODESSET(QObject * parent) : QObject(parent) 
,tableName("PC_MBOMBODESSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MBOMBODESSET 
PC_MBOMBODESSET::~PC_MBOMBODESSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MBOMBODESSET

// begin method functions
void PC_MBOMBODESSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MBOMBODESSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MBOMBODESSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MBOMBODESSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MBOMBODESSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOMBODESSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MBOMBODESSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MBOMBODESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MBOMBODESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MBOMBODESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOMBODESSET";
	qDebug(category) << "unsertSQL - update PC_MBOMBODESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_MBOMBODESSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MBOMBODESSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_MBOMBODESSET
}
void PC_MBOMBODESSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MBOMBODESSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MBOMBODESSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MBOMBODESSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MBOMBODESSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MBOMBODESSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MBOMBODESSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MBOMBODESSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MBOMBODESSET");
				createTable();
			}break;
		}
	}
}

bool PC_MBOMBODESSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MBOMBODESSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MBOMBODESSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MBOMBODESSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MBOMBODESSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MBOMBODESSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_SUBPREC::PC_SUBPREC(QObject * parent) : QObject(parent) 
,tableName("PC_SUBPREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_SUBPREC 
PC_SUBPREC::~PC_SUBPREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_SUBPNO.clear();
	PC_PICODE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_SUBPREC

// begin method functions
void PC_SUBPREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_SUBPREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_SUBPREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_SUBPREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_SUBPREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_SUBPNO, PC_PICODE from PC_SUBPREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_SUBPREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_SUBPREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_SUBPNO, PC_PICODE ) values ( ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_SUBPREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_SUBPNO = ?, PC_PICODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_SUBPREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_SUBPNO, PC_PICODE ) values ( ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_SUBPNO, PC_PICODE from PC_SUBPREC";
	qDebug(category) << "unsertSQL - update PC_SUBPREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_SUBPNO = ?, PC_PICODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_SUBPREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_SUBPREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_SUBPNO[16]";
	PC_SUBPNO.resize(16);
	qDebug(category) << "Malloc - PC_PICODE[2]";
	PC_PICODE.resize(2);

#pragma endregion Resize Fields PC_SUBPREC
}
void PC_SUBPREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_SUBPREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_SUBPREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_SUBPREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_SUBPREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_SUBPREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_SUBPREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_SUBPREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_SUBPREC");
				createTable();
			}break;
		}
	}
}

bool PC_SUBPREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_SUBPNO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_SUBPNO.data(), 16, &cbPC_SUBPNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_PICODE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_PICODE.data(), 2, &cbPC_PICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_SUBPREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_SUBPNO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 16, 0, (SQLPOINTER)PC_SUBPNO.constData(), 0, &cbPC_SUBPNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_PICODE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_PICODE.constData(), 0, &cbPC_PICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_SUBPREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_SUBPREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_SUBPREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_SUBPREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FRMHSHSET::PC_FRMHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_FRMHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FRMHSHSET 
PC_FRMHSHSET::~PC_FRMHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FRMHSHSET

// begin method functions
void PC_FRMHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FRMHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FRMHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FRMHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FRMHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FRMHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FRMHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FRMHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FRMHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMHSHSET";
	qDebug(category) << "unsertSQL - update PC_FRMHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_FRMHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FRMHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_FRMHSHSET
}
void PC_FRMHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FRMHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FRMHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FRMHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FRMHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FRMHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FRMHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FRMHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FRMHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_FRMHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FRMHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FRMHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FRMHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FRMHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FRMHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_WKCREC::PC_WKCREC(QObject * parent) : QObject(parent) 
,tableName("PC_WKCREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_WKCREC 
PC_WKCREC::~PC_WKCREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_WKCNTR.clear();
	PC_WKC_LASTUPD.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_WKCREC

// begin method functions
void PC_WKCREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_WKCREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_WKCREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_WKCREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_WKCREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_WKCNTR, PC_WKC_LASTUPD from PC_WKCREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_WKCREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_WKCREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_WKCNTR, PC_WKC_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_WKCREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_WKCNTR = ?, PC_WKC_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_WKCREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_WKCNTR, PC_WKC_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_WKCNTR, PC_WKC_LASTUPD from PC_WKCREC";
	qDebug(category) << "unsertSQL - update PC_WKCREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_WKCNTR = ?, PC_WKC_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_WKCREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_WKCREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_WKCNTR[10]";
	PC_WKCNTR.resize(10);
	qDebug(category) << "Malloc - PC_WKC_LASTUPD[23]";
	PC_WKC_LASTUPD.resize(23);

#pragma endregion Resize Fields PC_WKCREC
}
void PC_WKCREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_WKCREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_WKCREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_WKCREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_WKCREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_WKCREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_WKCREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_WKCREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_WKCREC");
				createTable();
			}break;
		}
	}
}

bool PC_WKCREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_WKCNTR ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_WKCNTR.data(), 10, &cbPC_WKCNTR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_WKC_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_WKC_LASTUPD.data(), 23, &cbPC_WKC_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_WKCREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_WKCNTR ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_WKCNTR.constData(), 0, &cbPC_WKCNTR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_WKC_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_WKC_LASTUPD.constData(), 0, &cbPC_WKC_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_WKCREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_WKCREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_WKCREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_WKCREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TOOREC::PC_TOOREC(QObject * parent) : QObject(parent) 
,tableName("PC_TOOREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TOOREC 
PC_TOOREC::~PC_TOOREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_TOONO.clear();
	PC_TOO_LASTUPD.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TOOREC

// begin method functions
void PC_TOOREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TOOREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TOOREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TOOREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TOOREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TOONO, PC_TOO_LASTUPD from PC_TOOREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TOOREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TOOREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TOONO, PC_TOO_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TOOREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TOONO = ?, PC_TOO_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TOOREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TOONO, PC_TOO_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TOONO, PC_TOO_LASTUPD from PC_TOOREC";
	qDebug(category) << "unsertSQL - update PC_TOOREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TOONO = ?, PC_TOO_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_TOOREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TOOREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_TOONO[18]";
	PC_TOONO.resize(18);
	qDebug(category) << "Malloc - PC_TOO_LASTUPD[23]";
	PC_TOO_LASTUPD.resize(23);

#pragma endregion Resize Fields PC_TOOREC
}
void PC_TOOREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TOOREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TOOREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TOOREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TOOREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TOOREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TOOREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TOOREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TOOREC");
				createTable();
			}break;
		}
	}
}

bool PC_TOOREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_TOONO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_TOONO.data(), 18, &cbPC_TOONO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_TOO_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_TOO_LASTUPD.data(), 23, &cbPC_TOO_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TOOREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_TOONO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_TOONO.constData(), 0, &cbPC_TOONO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_TOO_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_TOO_LASTUPD.constData(), 0, &cbPC_TOO_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TOOREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TOOREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TOOREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TOOREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PIDESREC::PC_PIDESREC(QObject * parent) : QObject(parent) 
,tableName("PC_PIDESREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PIDESREC 
PC_PIDESREC::~PC_PIDESREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_PIDESCODE.clear();
	PC_PIDESTEXT.clear();
	PC_PIDES_LASTUPD.clear();
	PC_PICODE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PIDESREC

// begin method functions
void PC_PIDESREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PIDESREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PIDESREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PIDESREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PIDESREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_PIDESCODE, PC_PIDESTEXT, PC_PIDES_LASTUPD, PC_PICODE from PC_PIDESREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PIDESREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PIDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_PIDESCODE, PC_PIDESTEXT, PC_PIDES_LASTUPD, PC_PICODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PIDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_PIDESCODE = ?, PC_PIDESTEXT = ?, PC_PIDES_LASTUPD = ?, PC_PICODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PIDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_PIDESCODE, PC_PIDESTEXT, PC_PIDES_LASTUPD, PC_PICODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_PIDESCODE, PC_PIDESTEXT, PC_PIDES_LASTUPD, PC_PICODE from PC_PIDESREC";
	qDebug(category) << "unsertSQL - update PC_PIDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_PIDESCODE = ?, PC_PIDESTEXT = ?, PC_PIDES_LASTUPD = ?, PC_PICODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_PIDESREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PIDESREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_PIDESCODE[10]";
	PC_PIDESCODE.resize(10);
	qDebug(category) << "Malloc - PC_PIDESTEXT[60]";
	PC_PIDESTEXT.resize(60);
	qDebug(category) << "Malloc - PC_PIDES_LASTUPD[23]";
	PC_PIDES_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_PICODE[2]";
	PC_PICODE.resize(2);

#pragma endregion Resize Fields PC_PIDESREC
}
void PC_PIDESREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PIDESREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PIDESREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PIDESREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PIDESREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PIDESREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PIDESREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PIDESREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PIDESREC");
				createTable();
			}break;
		}
	}
}

bool PC_PIDESREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_PIDESCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_PIDESCODE.data(), 10, &cbPC_PIDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_PIDESTEXT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_PIDESTEXT.data(), 60, &cbPC_PIDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_PIDES_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_PIDES_LASTUPD.data(), 23, &cbPC_PIDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_PICODE ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 5, PC_PICODE.data(), 2, &cbPC_PICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PIDESREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_PIDESCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_PIDESCODE.constData(), 0, &cbPC_PIDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_PIDESTEXT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_PIDESTEXT.constData(), 0, &cbPC_PIDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_PIDES_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_PIDES_LASTUPD.constData(), 0, &cbPC_PIDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_PICODE ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_PICODE.constData(), 0, &cbPC_PICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PIDESREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PIDESREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PIDESREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PIDESREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_SLFREC::PC_SLFREC(QObject * parent) : QObject(parent) 
,tableName("PC_SLFREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_SLFREC 
PC_SLFREC::~PC_SLFREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_SLFNO.clear();
	PC_PRTNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_SLFREC

// begin method functions
void PC_SLFREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_SLFREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_SLFREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_SLFREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_SLFREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_SLFNO, PC_PRTNO from PC_SLFREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_SLFREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_SLFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_SLFNO, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_SLFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_SLFNO = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_SLFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_SLFNO, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_SLFNO, PC_PRTNO from PC_SLFREC";
	qDebug(category) << "unsertSQL - update PC_SLFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_SLFNO = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_SLFREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_SLFREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_SLFNO[16]";
	PC_SLFNO.resize(16);
	qDebug(category) << "Malloc - PC_PRTNO[18]";
	PC_PRTNO.resize(18);

#pragma endregion Resize Fields PC_SLFREC
}
void PC_SLFREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_SLFREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_SLFREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_SLFREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_SLFREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_SLFREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_SLFREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_SLFREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_SLFREC");
				createTable();
			}break;
		}
	}
}

bool PC_SLFREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_SLFNO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_SLFNO.data(), 16, &cbPC_SLFNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_PRTNO.data(), 18, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_SLFREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_SLFNO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 16, 0, (SQLPOINTER)PC_SLFNO.constData(), 0, &cbPC_SLFNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_PRTNO.constData(), 0, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_SLFREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_SLFREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_SLFREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_SLFREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MINGMIDESSET::PC_MINGMIDESSET(QObject * parent) : QObject(parent) 
,tableName("PC_MINGMIDESSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MINGMIDESSET 
PC_MINGMIDESSET::~PC_MINGMIDESSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MINGMIDESSET

// begin method functions
void PC_MINGMIDESSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MINGMIDESSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MINGMIDESSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MINGMIDESSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MINGMIDESSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MINGMIDESSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MINGMIDESSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MINGMIDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MINGMIDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MINGMIDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MINGMIDESSET";
	qDebug(category) << "unsertSQL - update PC_MINGMIDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_MINGMIDESSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MINGMIDESSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_MINGMIDESSET
}
void PC_MINGMIDESSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MINGMIDESSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MINGMIDESSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MINGMIDESSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MINGMIDESSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MINGMIDESSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MINGMIDESSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MINGMIDESSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MINGMIDESSET");
				createTable();
			}break;
		}
	}
}

bool PC_MINGMIDESSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MINGMIDESSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MINGMIDESSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MINGMIDESSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MINGMIDESSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MINGMIDESSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_USRHSHSET::PC_USRHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_USRHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_USRHSHSET 
PC_USRHSHSET::~PC_USRHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_USRHSHSET

// begin method functions
void PC_USRHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_USRHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_USRHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_USRHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_USRHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_USRHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_USRHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_USRHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_USRHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_USRHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_USRHSHSET";
	qDebug(category) << "unsertSQL - update PC_USRHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_USRHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_USRHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_USRHSHSET
}
void PC_USRHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_USRHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_USRHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_USRHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_USRHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_USRHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_USRHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_USRHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_USRHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_USRHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_USRHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_USRHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_USRHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_USRHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_USRHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTSLFSET::PC_PRTSLFSET(QObject * parent) : QObject(parent) 
,tableName("PC_PRTSLFSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTSLFSET 
PC_PRTSLFSET::~PC_PRTSLFSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTSLFSET

// begin method functions
void PC_PRTSLFSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTSLFSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTSLFSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTSLFSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTSLFSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTSLFSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTSLFSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTSLFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTSLFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTSLFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTSLFSET";
	qDebug(category) << "unsertSQL - update PC_PRTSLFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PRTSLFSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTSLFSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PRTSLFSET
}
void PC_PRTSLFSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTSLFSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTSLFSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTSLFSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTSLFSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTSLFSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTSLFSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTSLFSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTSLFSET");
				createTable();
			}break;
		}
	}
}

bool PC_PRTSLFSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTSLFSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTSLFSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTSLFSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTSLFSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTSLFSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MBOHSHSET::PC_MBOHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_MBOHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MBOHSHSET 
PC_MBOHSHSET::~PC_MBOHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MBOHSHSET

// begin method functions
void PC_MBOHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MBOHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MBOHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MBOHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MBOHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MBOHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MBOHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MBOHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MBOHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOHSHSET";
	qDebug(category) << "unsertSQL - update PC_MBOHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_MBOHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MBOHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_MBOHSHSET
}
void PC_MBOHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MBOHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MBOHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MBOHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MBOHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MBOHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MBOHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MBOHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MBOHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_MBOHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MBOHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MBOHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MBOHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MBOHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MBOHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_CHGDREC::PC_CHGDREC(QObject * parent) : QObject(parent) 
,tableName("PC_CHGDREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_CHGDREC 
PC_CHGDREC::~PC_CHGDREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_CHGDUSER.clear();
	PC_CHGDNODE.clear();
	PC_CHGDFILE.clear();
	PC_CHGDFLD1.clear();
	PC_CHGDFLD2.clear();
	PC_CHGDFLD3.clear();
	PC_CHGDFLD4.clear();
	PC_CHGDDAT.clear();
	PC_CHGDTIME.clear();
	PC_CHGDITEM.clear();
	PC_CHGDOLD.clear();
	PC_CHGDNEW.clear();
	PC_CHGD_LASTUPD.clear();
	PC_CHGHTYPE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_CHGDREC

// begin method functions
void PC_CHGDREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_CHGDREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_CHGDREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_CHGDREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_CHGDREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_CHGDUSER, PC_CHGDNODE, PC_CHGDFILE, PC_CHGDFLD1, PC_CHGDFLD2, PC_CHGDFLD3, PC_CHGDFLD4, PC_CHGDDAT, PC_CHGDTIME, PC_CHGDITEM, PC_CHGDOLD, PC_CHGDNEW, PC_CHGD_LASTUPD, PC_CHGHTYPE from PC_CHGDREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_CHGDREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_CHGDREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_CHGDUSER, PC_CHGDNODE, PC_CHGDFILE, PC_CHGDFLD1, PC_CHGDFLD2, PC_CHGDFLD3, PC_CHGDFLD4, PC_CHGDDAT, PC_CHGDTIME, PC_CHGDITEM, PC_CHGDOLD, PC_CHGDNEW, PC_CHGD_LASTUPD, PC_CHGHTYPE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_CHGDREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_CHGDUSER = ?, PC_CHGDNODE = ?, PC_CHGDFILE = ?, PC_CHGDFLD1 = ?, PC_CHGDFLD2 = ?, PC_CHGDFLD3 = ?, PC_CHGDFLD4 = ?, PC_CHGDDAT = ?, PC_CHGDTIME = ?, PC_CHGDITEM = ?, PC_CHGDOLD = ?, PC_CHGDNEW = ?, PC_CHGD_LASTUPD = ?, PC_CHGHTYPE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_CHGDREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_CHGDUSER, PC_CHGDNODE, PC_CHGDFILE, PC_CHGDFLD1, PC_CHGDFLD2, PC_CHGDFLD3, PC_CHGDFLD4, PC_CHGDDAT, PC_CHGDTIME, PC_CHGDITEM, PC_CHGDOLD, PC_CHGDNEW, PC_CHGD_LASTUPD, PC_CHGHTYPE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_CHGDUSER, PC_CHGDNODE, PC_CHGDFILE, PC_CHGDFLD1, PC_CHGDFLD2, PC_CHGDFLD3, PC_CHGDFLD4, PC_CHGDDAT, PC_CHGDTIME, PC_CHGDITEM, PC_CHGDOLD, PC_CHGDNEW, PC_CHGD_LASTUPD, PC_CHGHTYPE from PC_CHGDREC";
	qDebug(category) << "unsertSQL - update PC_CHGDREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_CHGDUSER = ?, PC_CHGDNODE = ?, PC_CHGDFILE = ?, PC_CHGDFLD1 = ?, PC_CHGDFLD2 = ?, PC_CHGDFLD3 = ?, PC_CHGDFLD4 = ?, PC_CHGDDAT = ?, PC_CHGDTIME = ?, PC_CHGDITEM = ?, PC_CHGDOLD = ?, PC_CHGDNEW = ?, PC_CHGD_LASTUPD = ?, PC_CHGHTYPE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_CHGDREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_CHGDREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_CHGDUSER[12]";
	PC_CHGDUSER.resize(12);
	qDebug(category) << "Malloc - PC_CHGDNODE[15]";
	PC_CHGDNODE.resize(15);
	qDebug(category) << "Malloc - PC_CHGDFILE[2]";
	PC_CHGDFILE.resize(2);
	qDebug(category) << "Malloc - PC_CHGDFLD1[18]";
	PC_CHGDFLD1.resize(18);
	qDebug(category) << "Malloc - PC_CHGDFLD2[8]";
	PC_CHGDFLD2.resize(8);
	qDebug(category) << "Malloc - PC_CHGDFLD3[2]";
	PC_CHGDFLD3.resize(2);
	qDebug(category) << "Malloc - PC_CHGDFLD4[2]";
	PC_CHGDFLD4.resize(2);
	qDebug(category) << "Malloc - PC_CHGDDAT[4]";
	PC_CHGDDAT.resize(4);
	qDebug(category) << "Malloc - PC_CHGDTIME[8]";
	PC_CHGDTIME.resize(8);
	qDebug(category) << "Malloc - PC_CHGDITEM[18]";
	PC_CHGDITEM.resize(18);
	qDebug(category) << "Malloc - PC_CHGDOLD[30]";
	PC_CHGDOLD.resize(30);
	qDebug(category) << "Malloc - PC_CHGDNEW[30]";
	PC_CHGDNEW.resize(30);
	qDebug(category) << "Malloc - PC_CHGD_LASTUPD[23]";
	PC_CHGD_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_CHGHTYPE[2]";
	PC_CHGHTYPE.resize(2);

#pragma endregion Resize Fields PC_CHGDREC
}
void PC_CHGDREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_CHGDREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_CHGDREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_CHGDREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_CHGDREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_CHGDREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_CHGDREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_CHGDREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_CHGDREC");
				createTable();
			}break;
		}
	}
}

bool PC_CHGDREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 12 FieldName: PC_CHGDUSER ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_CHGDUSER.data(), 12, &cbPC_CHGDUSER);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 15 FieldName: PC_CHGDNODE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_CHGDNODE.data(), 15, &cbPC_CHGDNODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_CHGDFILE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, PC_CHGDFILE.data(), 2, &cbPC_CHGDFILE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 18 FieldName: PC_CHGDFLD1 ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_CHGDFLD1.data(), 18, &cbPC_CHGDFLD1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_CHGDFLD2 ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 8, PC_CHGDFLD2.data(), 8, &cbPC_CHGDFLD2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_CHGDFLD3 ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 5, PC_CHGDFLD3.data(), 2, &cbPC_CHGDFLD3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 5 Buffer Size: 2 FieldName: PC_CHGDFLD4 ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 5, PC_CHGDFLD4.data(), 2, &cbPC_CHGDFLD4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_CHGDDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 4, PC_CHGDDAT.data(), 4, &cbPC_CHGDDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 1 Buffer Size: 8 FieldName: PC_CHGDTIME ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 1, PC_CHGDTIME.data(), 8, &cbPC_CHGDTIME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 1 Buffer Size: 18 FieldName: PC_CHGDITEM ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 1, PC_CHGDITEM.data(), 18, &cbPC_CHGDITEM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 1 Buffer Size: 30 FieldName: PC_CHGDOLD ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 1, PC_CHGDOLD.data(), 30, &cbPC_CHGDOLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 1 Buffer Size: 30 FieldName: PC_CHGDNEW ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 1, PC_CHGDNEW.data(), 30, &cbPC_CHGDNEW);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 1 Buffer Size: 23 FieldName: PC_CHGD_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 1, PC_CHGD_LASTUPD.data(), 23, &cbPC_CHGD_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 5 Buffer Size: 2 FieldName: PC_CHGHTYPE ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 5, PC_CHGHTYPE.data(), 2, &cbPC_CHGHTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_CHGDREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 12 FieldName: PC_CHGDUSER ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 12, 0, (SQLPOINTER)PC_CHGDUSER.constData(), 0, &cbPC_CHGDUSER);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 15 FieldName: PC_CHGDNODE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 15, 0, (SQLPOINTER)PC_CHGDNODE.constData(), 0, &cbPC_CHGDNODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_CHGDFILE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_CHGDFILE.constData(), 0, &cbPC_CHGDFILE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 18 FieldName: PC_CHGDFLD1 ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_CHGDFLD1.constData(), 0, &cbPC_CHGDFLD1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_CHGDFLD2 ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_CHGDFLD2.constData(), 0, &cbPC_CHGDFLD2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_CHGDFLD3 ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_CHGDFLD3.constData(), 0, &cbPC_CHGDFLD3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 5 Buffer Size: 2 FieldName: PC_CHGDFLD4 ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_CHGDFLD4.constData(), 0, &cbPC_CHGDFLD4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_CHGDDAT ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_CHGDDAT.constData(), 0, &cbPC_CHGDDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 1 Buffer Size: 8 FieldName: PC_CHGDTIME ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 8, 0, (SQLPOINTER)PC_CHGDTIME.constData(), 0, &cbPC_CHGDTIME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 1 Buffer Size: 18 FieldName: PC_CHGDITEM ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_CHGDITEM.constData(), 0, &cbPC_CHGDITEM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 1 Buffer Size: 30 FieldName: PC_CHGDOLD ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_CHGDOLD.constData(), 0, &cbPC_CHGDOLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 1 Buffer Size: 30 FieldName: PC_CHGDNEW ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_CHGDNEW.constData(), 0, &cbPC_CHGDNEW);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 1 Buffer Size: 23 FieldName: PC_CHGD_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_CHGD_LASTUPD.constData(), 0, &cbPC_CHGD_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 5 Buffer Size: 2 FieldName: PC_CHGHTYPE ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_CHGHTYPE.constData(), 0, &cbPC_CHGHTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_CHGDREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_CHGDREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_CHGDREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_CHGDREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_INGSIFSET::PC_INGSIFSET(QObject * parent) : QObject(parent) 
,tableName("PC_INGSIFSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_INGSIFSET 
PC_INGSIFSET::~PC_INGSIFSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_INGSIFSET

// begin method functions
void PC_INGSIFSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_INGSIFSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_INGSIFSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_INGSIFSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_INGSIFSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_INGSIFSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_INGSIFSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_INGSIFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_INGSIFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_INGSIFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_INGSIFSET";
	qDebug(category) << "unsertSQL - update PC_INGSIFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_INGSIFSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_INGSIFSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_INGSIFSET
}
void PC_INGSIFSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_INGSIFSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_INGSIFSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_INGSIFSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_INGSIFSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_INGSIFSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_INGSIFSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_INGSIFSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_INGSIFSET");
				createTable();
			}break;
		}
	}
}

bool PC_INGSIFSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_INGSIFSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_INGSIFSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_INGSIFSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_INGSIFSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_INGSIFSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_HDESREC::PC_HDESREC(QObject * parent) : QObject(parent) 
,tableName("PC_HDESREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_HDESREC 
PC_HDESREC::~PC_HDESREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_HDESCODE.clear();
	PC_HDESTEXT.clear();
	PC_HDES_LASTUPD.clear();
	PC_FRMNAME.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_HDESREC

// begin method functions
void PC_HDESREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_HDESREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_HDESREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_HDESREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_HDESREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_HDESCODE, PC_HDESTEXT, PC_HDES_LASTUPD, PC_FRMNAME from PC_HDESREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_HDESREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_HDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_HDESCODE, PC_HDESTEXT, PC_HDES_LASTUPD, PC_FRMNAME ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_HDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_HDESCODE = ?, PC_HDESTEXT = ?, PC_HDES_LASTUPD = ?, PC_FRMNAME = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_HDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_HDESCODE, PC_HDESTEXT, PC_HDES_LASTUPD, PC_FRMNAME ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_HDESCODE, PC_HDESTEXT, PC_HDES_LASTUPD, PC_FRMNAME from PC_HDESREC";
	qDebug(category) << "unsertSQL - update PC_HDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_HDESCODE = ?, PC_HDESTEXT = ?, PC_HDES_LASTUPD = ?, PC_FRMNAME = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_HDESREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_HDESREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_HDESCODE[10]";
	PC_HDESCODE.resize(10);
	qDebug(category) << "Malloc - PC_HDESTEXT[60]";
	PC_HDESTEXT.resize(60);
	qDebug(category) << "Malloc - PC_HDES_LASTUPD[23]";
	PC_HDES_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_FRMNAME[20]";
	PC_FRMNAME.resize(20);

#pragma endregion Resize Fields PC_HDESREC
}
void PC_HDESREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_HDESREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_HDESREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_HDESREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_HDESREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_HDESREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_HDESREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_HDESREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_HDESREC");
				createTable();
			}break;
		}
	}
}

bool PC_HDESREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_HDESCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_HDESCODE.data(), 10, &cbPC_HDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_HDESTEXT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_HDESTEXT.data(), 60, &cbPC_HDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_HDES_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_HDES_LASTUPD.data(), 23, &cbPC_HDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_FRMNAME.data(), 20, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_HDESREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_HDESCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_HDESCODE.constData(), 0, &cbPC_HDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_HDESTEXT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_HDESTEXT.constData(), 0, &cbPC_HDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_HDES_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_HDES_LASTUPD.constData(), 0, &cbPC_HDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 20, 0, (SQLPOINTER)PC_FRMNAME.constData(), 0, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_HDESREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_HDESREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_HDESREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_HDESREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_APITAPIDESSET::PC_APITAPIDESSET(QObject * parent) : QObject(parent) 
,tableName("PC_APITAPIDESSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_APITAPIDESSET 
PC_APITAPIDESSET::~PC_APITAPIDESSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_APITAPIDESSET

// begin method functions
void PC_APITAPIDESSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_APITAPIDESSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_APITAPIDESSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_APITAPIDESSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_APITAPIDESSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APITAPIDESSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_APITAPIDESSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_APITAPIDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_APITAPIDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_APITAPIDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APITAPIDESSET";
	qDebug(category) << "unsertSQL - update PC_APITAPIDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_APITAPIDESSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_APITAPIDESSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_APITAPIDESSET
}
void PC_APITAPIDESSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_APITAPIDESSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_APITAPIDESSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_APITAPIDESSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_APITAPIDESSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_APITAPIDESSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_APITAPIDESSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_APITAPIDESSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_APITAPIDESSET");
				createTable();
			}break;
		}
	}
}

bool PC_APITAPIDESSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_APITAPIDESSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_APITAPIDESSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_APITAPIDESSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_APITAPIDESSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_APITAPIDESSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_ALTHHSHSET::PC_ALTHHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_ALTHHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_ALTHHSHSET 
PC_ALTHHSHSET::~PC_ALTHHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_ALTHHSHSET

// begin method functions
void PC_ALTHHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_ALTHHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_ALTHHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_ALTHHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_ALTHHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_ALTHHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_ALTHHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_ALTHHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_ALTHHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_ALTHHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_ALTHHSHSET";
	qDebug(category) << "unsertSQL - update PC_ALTHHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_ALTHHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_ALTHHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_ALTHHSHSET
}
void PC_ALTHHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_ALTHHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_ALTHHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_ALTHHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_ALTHHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_ALTHHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_ALTHHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_ALTHHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_ALTHHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_ALTHHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_ALTHHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_ALTHHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_ALTHHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_ALTHHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_ALTHHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_CATHSHSET::PC_CATHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_CATHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_CATHSHSET 
PC_CATHSHSET::~PC_CATHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_CATHSHSET

// begin method functions
void PC_CATHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_CATHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_CATHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_CATHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_CATHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CATHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_CATHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_CATHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_CATHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_CATHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CATHSHSET";
	qDebug(category) << "unsertSQL - update PC_CATHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_CATHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_CATHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_CATHSHSET
}
void PC_CATHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_CATHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_CATHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_CATHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_CATHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_CATHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_CATHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_CATHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_CATHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_CATHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_CATHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_CATHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_CATHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_CATHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_CATHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TWUREC::PC_TWUREC(QObject * parent) : QObject(parent) 
,tableName("PC_TWUREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TWUREC 
PC_TWUREC::~PC_TWUREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_TWUCNT.clear();
	PC_TWU_LASTUPD.clear();
	PC_PICODE.clear();
	PC_TOONO.clear();
	PC_MPICODE.clear();
	PC_APITCODE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TWUREC

// begin method functions
void PC_TWUREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TWUREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TWUREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TWUREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TWUREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TWUCNT, PC_TWU_LASTUPD, PC_PICODE, PC_TOONO, PC_MPICODE, PC_APITCODE from PC_TWUREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TWUREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TWUREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TWUCNT, PC_TWU_LASTUPD, PC_PICODE, PC_TOONO, PC_MPICODE, PC_APITCODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TWUREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TWUCNT = ?, PC_TWU_LASTUPD = ?, PC_PICODE = ?, PC_TOONO = ?, PC_MPICODE = ?, PC_APITCODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TWUREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TWUCNT, PC_TWU_LASTUPD, PC_PICODE, PC_TOONO, PC_MPICODE, PC_APITCODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TWUCNT, PC_TWU_LASTUPD, PC_PICODE, PC_TOONO, PC_MPICODE, PC_APITCODE from PC_TWUREC";
	qDebug(category) << "unsertSQL - update PC_TWUREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TWUCNT = ?, PC_TWU_LASTUPD = ?, PC_PICODE = ?, PC_TOONO = ?, PC_MPICODE = ?, PC_APITCODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_TWUREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TWUREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_TWUCNT[2]";
	PC_TWUCNT.resize(2);
	qDebug(category) << "Malloc - PC_TWU_LASTUPD[23]";
	PC_TWU_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_PICODE[2]";
	PC_PICODE.resize(2);
	qDebug(category) << "Malloc - PC_TOONO[18]";
	PC_TOONO.resize(18);
	qDebug(category) << "Malloc - PC_MPICODE[2]";
	PC_MPICODE.resize(2);
	qDebug(category) << "Malloc - PC_APITCODE[2]";
	PC_APITCODE.resize(2);

#pragma endregion Resize Fields PC_TWUREC
}
void PC_TWUREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TWUREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TWUREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TWUREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TWUREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TWUREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TWUREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TWUREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TWUREC");
				createTable();
			}break;
		}
	}
}

bool PC_TWUREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_TWUCNT ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, PC_TWUCNT.data(), 2, &cbPC_TWUCNT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_TWU_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_TWU_LASTUPD.data(), 23, &cbPC_TWU_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_PICODE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, PC_PICODE.data(), 2, &cbPC_PICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 18 FieldName: PC_TOONO ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_TOONO.data(), 18, &cbPC_TOONO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 5 Buffer Size: 2 FieldName: PC_MPICODE ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 5, PC_MPICODE.data(), 2, &cbPC_MPICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_APITCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 5, PC_APITCODE.data(), 2, &cbPC_APITCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TWUREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_TWUCNT ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_TWUCNT.constData(), 0, &cbPC_TWUCNT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 23 FieldName: PC_TWU_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_TWU_LASTUPD.constData(), 0, &cbPC_TWU_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_PICODE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_PICODE.constData(), 0, &cbPC_PICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 18 FieldName: PC_TOONO ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_TOONO.constData(), 0, &cbPC_TOONO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 5 Buffer Size: 2 FieldName: PC_MPICODE ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MPICODE.constData(), 0, &cbPC_MPICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_APITCODE ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_APITCODE.constData(), 0, &cbPC_APITCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TWUREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TWUREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TWUREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TWUREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FCOHREC::PC_FCOHREC(QObject * parent) : QObject(parent) 
,tableName("PC_FCOHREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FCOHREC 
PC_FCOHREC::~PC_FCOHREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_FCOHNO.clear();
	PC_FCOHENDAT.clear();
	PC_FCOH_LASTUPD.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FCOHREC

// begin method functions
void PC_FCOHREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FCOHREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FCOHREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FCOHREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FCOHREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCOHNO, PC_FCOHENDAT, PC_FCOH_LASTUPD from PC_FCOHREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FCOHREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FCOHREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCOHNO, PC_FCOHENDAT, PC_FCOH_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FCOHREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_FCOHNO = ?, PC_FCOHENDAT = ?, PC_FCOH_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FCOHREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCOHNO, PC_FCOHENDAT, PC_FCOH_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_FCOHNO, PC_FCOHENDAT, PC_FCOH_LASTUPD from PC_FCOHREC";
	qDebug(category) << "unsertSQL - update PC_FCOHREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_FCOHNO = ?, PC_FCOHENDAT = ?, PC_FCOH_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_FCOHREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FCOHREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_FCOHNO[10]";
	PC_FCOHNO.resize(10);
	qDebug(category) << "Malloc - PC_FCOHENDAT[4]";
	PC_FCOHENDAT.resize(4);
	qDebug(category) << "Malloc - PC_FCOH_LASTUPD[23]";
	PC_FCOH_LASTUPD.resize(23);

#pragma endregion Resize Fields PC_FCOHREC
}
void PC_FCOHREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FCOHREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FCOHREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FCOHREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FCOHREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FCOHREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FCOHREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FCOHREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FCOHREC");
				createTable();
			}break;
		}
	}
}

bool PC_FCOHREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_FCOHNO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_FCOHNO.data(), 10, &cbPC_FCOHNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: PC_FCOHENDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, PC_FCOHENDAT.data(), 4, &cbPC_FCOHENDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_FCOH_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_FCOH_LASTUPD.data(), 23, &cbPC_FCOH_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FCOHREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_FCOHNO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_FCOHNO.constData(), 0, &cbPC_FCOHNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: PC_FCOHENDAT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_FCOHENDAT.constData(), 0, &cbPC_FCOHENDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_FCOH_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_FCOH_LASTUPD.constData(), 0, &cbPC_FCOH_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FCOHREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FCOHREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FCOHREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FCOHREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TEXTREC::PC_TEXTREC(QObject * parent) : QObject(parent) 
,tableName("PC_TEXTREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TEXTREC 
PC_TEXTREC::~PC_TEXTREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_TEXTCODE.clear();
	PC_TEXTREFOCC.clear();
	PC_TEXT_LASTUPD.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TEXTREC

// begin method functions
void PC_TEXTREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TEXTREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TEXTREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TEXTREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TEXTREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TEXTCODE, PC_TEXTREFOCC, PC_TEXT_LASTUPD from PC_TEXTREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TEXTREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TEXTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TEXTCODE, PC_TEXTREFOCC, PC_TEXT_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TEXTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TEXTCODE = ?, PC_TEXTREFOCC = ?, PC_TEXT_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TEXTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TEXTCODE, PC_TEXTREFOCC, PC_TEXT_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TEXTCODE, PC_TEXTREFOCC, PC_TEXT_LASTUPD from PC_TEXTREC";
	qDebug(category) << "unsertSQL - update PC_TEXTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TEXTCODE = ?, PC_TEXTREFOCC = ?, PC_TEXT_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_TEXTREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TEXTREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_TEXTCODE[10]";
	PC_TEXTCODE.resize(10);
	qDebug(category) << "Malloc - PC_TEXTREFOCC[2]";
	PC_TEXTREFOCC.resize(2);
	qDebug(category) << "Malloc - PC_TEXT_LASTUPD[23]";
	PC_TEXT_LASTUPD.resize(23);

#pragma endregion Resize Fields PC_TEXTREC
}
void PC_TEXTREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TEXTREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TEXTREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TEXTREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TEXTREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TEXTREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TEXTREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TEXTREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TEXTREC");
				createTable();
			}break;
		}
	}
}

bool PC_TEXTREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_TEXTCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_TEXTCODE.data(), 10, &cbPC_TEXTCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_TEXTREFOCC ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_TEXTREFOCC.data(), 2, &cbPC_TEXTREFOCC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_TEXT_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_TEXT_LASTUPD.data(), 23, &cbPC_TEXT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TEXTREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_TEXTCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TEXTCODE.constData(), 0, &cbPC_TEXTCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_TEXTREFOCC ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_TEXTREFOCC.constData(), 0, &cbPC_TEXTREFOCC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_TEXT_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_TEXT_LASTUPD.constData(), 0, &cbPC_TEXT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TEXTREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TEXTREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TEXTREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TEXTREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_APIHAPIFSET::PC_APIHAPIFSET(QObject * parent) : QObject(parent) 
,tableName("PC_APIHAPIFSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_APIHAPIFSET 
PC_APIHAPIFSET::~PC_APIHAPIFSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_APIHAPIFSET

// begin method functions
void PC_APIHAPIFSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_APIHAPIFSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_APIHAPIFSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_APIHAPIFSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_APIHAPIFSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APIHAPIFSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_APIHAPIFSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_APIHAPIFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_APIHAPIFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_APIHAPIFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APIHAPIFSET";
	qDebug(category) << "unsertSQL - update PC_APIHAPIFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_APIHAPIFSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_APIHAPIFSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_APIHAPIFSET
}
void PC_APIHAPIFSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_APIHAPIFSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_APIHAPIFSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_APIHAPIFSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_APIHAPIFSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_APIHAPIFSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_APIHAPIFSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_APIHAPIFSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_APIHAPIFSET");
				createTable();
			}break;
		}
	}
}

bool PC_APIHAPIFSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_APIHAPIFSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_APIHAPIFSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_APIHAPIFSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_APIHAPIFSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_APIHAPIFSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_APISAFREC::PC_APISAFREC(QObject * parent) : QObject(parent) 
,tableName("PC_APISAFREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_APISAFREC 
PC_APISAFREC::~PC_APISAFREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_APISAFCODE.clear();
	PC_APISAFTEXT.clear();
	PC_APISAF_LASTUPD.clear();
	PC_APITCODE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_APISAFREC

// begin method functions
void PC_APISAFREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_APISAFREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_APISAFREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_APISAFREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_APISAFREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_APISAFCODE, PC_APISAFTEXT, PC_APISAF_LASTUPD, PC_APITCODE from PC_APISAFREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_APISAFREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_APISAFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_APISAFCODE, PC_APISAFTEXT, PC_APISAF_LASTUPD, PC_APITCODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_APISAFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_APISAFCODE = ?, PC_APISAFTEXT = ?, PC_APISAF_LASTUPD = ?, PC_APITCODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_APISAFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_APISAFCODE, PC_APISAFTEXT, PC_APISAF_LASTUPD, PC_APITCODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_APISAFCODE, PC_APISAFTEXT, PC_APISAF_LASTUPD, PC_APITCODE from PC_APISAFREC";
	qDebug(category) << "unsertSQL - update PC_APISAFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_APISAFCODE = ?, PC_APISAFTEXT = ?, PC_APISAF_LASTUPD = ?, PC_APITCODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_APISAFREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_APISAFREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_APISAFCODE[10]";
	PC_APISAFCODE.resize(10);
	qDebug(category) << "Malloc - PC_APISAFTEXT[60]";
	PC_APISAFTEXT.resize(60);
	qDebug(category) << "Malloc - PC_APISAF_LASTUPD[23]";
	PC_APISAF_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_APITCODE[2]";
	PC_APITCODE.resize(2);

#pragma endregion Resize Fields PC_APISAFREC
}
void PC_APISAFREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_APISAFREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_APISAFREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_APISAFREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_APISAFREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_APISAFREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_APISAFREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_APISAFREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_APISAFREC");
				createTable();
			}break;
		}
	}
}

bool PC_APISAFREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_APISAFCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_APISAFCODE.data(), 10, &cbPC_APISAFCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_APISAFTEXT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_APISAFTEXT.data(), 60, &cbPC_APISAFTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_APISAF_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_APISAF_LASTUPD.data(), 23, &cbPC_APISAF_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_APITCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 5, PC_APITCODE.data(), 2, &cbPC_APITCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_APISAFREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_APISAFCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_APISAFCODE.constData(), 0, &cbPC_APISAFCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_APISAFTEXT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_APISAFTEXT.constData(), 0, &cbPC_APISAFTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_APISAF_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_APISAF_LASTUPD.constData(), 0, &cbPC_APISAF_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_APITCODE ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_APITCODE.constData(), 0, &cbPC_APITCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_APISAFREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_APISAFREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_APISAFREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_APISAFREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_SLTREC::PC_SLTREC(QObject * parent) : QObject(parent) 
,tableName("PC_SLTREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_SLTREC 
PC_SLTREC::~PC_SLTREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_SLTNO.clear();
	PC_PRTNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_SLTREC

// begin method functions
void PC_SLTREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_SLTREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_SLTREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_SLTREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_SLTREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_SLTNO, PC_PRTNO from PC_SLTREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_SLTREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_SLTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_SLTNO, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_SLTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_SLTNO = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_SLTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_SLTNO, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_SLTNO, PC_PRTNO from PC_SLTREC";
	qDebug(category) << "unsertSQL - update PC_SLTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_SLTNO = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_SLTREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_SLTREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_SLTNO[16]";
	PC_SLTNO.resize(16);
	qDebug(category) << "Malloc - PC_PRTNO[18]";
	PC_PRTNO.resize(18);

#pragma endregion Resize Fields PC_SLTREC
}
void PC_SLTREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_SLTREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_SLTREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_SLTREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_SLTREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_SLTREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_SLTREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_SLTREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_SLTREC");
				createTable();
			}break;
		}
	}
}

bool PC_SLTREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_SLTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_SLTNO.data(), 16, &cbPC_SLTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_PRTNO.data(), 18, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_SLTREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_SLTNO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 16, 0, (SQLPOINTER)PC_SLTNO.constData(), 0, &cbPC_SLTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_PRTNO.constData(), 0, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_SLTREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_SLTREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_SLTREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_SLTREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_CATIXSET::PC_CATIXSET(QObject * parent) : QObject(parent) 
,tableName("PC_CATIXSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_CATIXSET 
PC_CATIXSET::~PC_CATIXSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_CATIXSET

// begin method functions
void PC_CATIXSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_CATIXSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_CATIXSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_CATIXSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_CATIXSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CATIXSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_CATIXSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_CATIXSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_CATIXSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_CATIXSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CATIXSET";
	qDebug(category) << "unsertSQL - update PC_CATIXSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_CATIXSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_CATIXSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_CATIXSET
}
void PC_CATIXSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_CATIXSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_CATIXSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_CATIXSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_CATIXSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_CATIXSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_CATIXSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_CATIXSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_CATIXSET");
				createTable();
			}break;
		}
	}
}

bool PC_CATIXSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_CATIXSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_CATIXSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_CATIXSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_CATIXSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_CATIXSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TRKREC::PC_TRKREC(QObject * parent) : QObject(parent) 
,tableName("PC_TRKREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TRKREC 
PC_TRKREC::~PC_TRKREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_TRKNO.clear();
	PC_TRKREF1.clear();
	PC_TRKREF2.clear();
	PC_TRKREF3.clear();
	PC_TRKREF4.clear();
	PC_TRKTIME.clear();
	PC_TRKDATE.clear();
	PC_TRKTDATE.clear();
	PC_TRKLOGON.clear();
	PC_TRKCMD.clear();
	PC_TRKSEQ.clear();
	PC_TRKWKC.clear();
	PC_TRKPRT.clear();
	PC_TRKTYPE.clear();
	PC_TRKKEY1.clear();
	PC_TRKKEY2.clear();
	PC_TRKKEY3.clear();
	PC_TRKKEY4.clear();
	PC_TRKQTY.clear();
	PC_TRKUOMQTY.clear();
	PC_TRKUOM.clear();
	PC_TRKUOMCONV.clear();
	PC_TRKREASCODE.clear();
	PC_TRKREASDESC.clear();
	PC_TRKARCFLAG.clear();
	PC_TRKUSERDEF1.clear();
	PC_TRKUSERDEF2.clear();
	PC_TRKUSERDEF3.clear();
	PC_TRKUSERDEF4.clear();
	PC_TRK_LASTUPD.clear();
	PC_TRKNONO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TRKREC

// begin method functions
void PC_TRKREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TRKREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TRKREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TRKREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TRKREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNO, PC_TRKREF1, PC_TRKREF2, PC_TRKREF3, PC_TRKREF4, PC_TRKTIME, PC_TRKDATE, PC_TRKTDATE, PC_TRKLOGON, PC_TRKCMD, PC_TRKSEQ, PC_TRKWKC, PC_TRKPRT, PC_TRKTYPE, PC_TRKKEY1, PC_TRKKEY2, PC_TRKKEY3, PC_TRKKEY4, PC_TRKQTY, PC_TRKUOMQTY, PC_TRKUOM, PC_TRKUOMCONV, PC_TRKREASCODE, PC_TRKREASDESC, PC_TRKARCFLAG, PC_TRKUSERDEF1, PC_TRKUSERDEF2, PC_TRKUSERDEF3, PC_TRKUSERDEF4, PC_TRK_LASTUPD, PC_TRKNONO from PC_TRKREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TRKREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TRKREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNO, PC_TRKREF1, PC_TRKREF2, PC_TRKREF3, PC_TRKREF4, PC_TRKTIME, PC_TRKDATE, PC_TRKTDATE, PC_TRKLOGON, PC_TRKCMD, PC_TRKSEQ, PC_TRKWKC, PC_TRKPRT, PC_TRKTYPE, PC_TRKKEY1, PC_TRKKEY2, PC_TRKKEY3, PC_TRKKEY4, PC_TRKQTY, PC_TRKUOMQTY, PC_TRKUOM, PC_TRKUOMCONV, PC_TRKREASCODE, PC_TRKREASDESC, PC_TRKARCFLAG, PC_TRKUSERDEF1, PC_TRKUSERDEF2, PC_TRKUSERDEF3, PC_TRKUSERDEF4, PC_TRK_LASTUPD, PC_TRKNONO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TRKREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TRKNO = ?, PC_TRKREF1 = ?, PC_TRKREF2 = ?, PC_TRKREF3 = ?, PC_TRKREF4 = ?, PC_TRKTIME = ?, PC_TRKDATE = ?, PC_TRKTDATE = ?, PC_TRKLOGON = ?, PC_TRKCMD = ?, PC_TRKSEQ = ?, PC_TRKWKC = ?, PC_TRKPRT = ?, PC_TRKTYPE = ?, PC_TRKKEY1 = ?, PC_TRKKEY2 = ?, PC_TRKKEY3 = ?, PC_TRKKEY4 = ?, PC_TRKQTY = ?, PC_TRKUOMQTY = ?, PC_TRKUOM = ?, PC_TRKUOMCONV = ?, PC_TRKREASCODE = ?, PC_TRKREASDESC = ?, PC_TRKARCFLAG = ?, PC_TRKUSERDEF1 = ?, PC_TRKUSERDEF2 = ?, PC_TRKUSERDEF3 = ?, PC_TRKUSERDEF4 = ?, PC_TRK_LASTUPD = ?, PC_TRKNONO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TRKREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNO, PC_TRKREF1, PC_TRKREF2, PC_TRKREF3, PC_TRKREF4, PC_TRKTIME, PC_TRKDATE, PC_TRKTDATE, PC_TRKLOGON, PC_TRKCMD, PC_TRKSEQ, PC_TRKWKC, PC_TRKPRT, PC_TRKTYPE, PC_TRKKEY1, PC_TRKKEY2, PC_TRKKEY3, PC_TRKKEY4, PC_TRKQTY, PC_TRKUOMQTY, PC_TRKUOM, PC_TRKUOMCONV, PC_TRKREASCODE, PC_TRKREASDESC, PC_TRKARCFLAG, PC_TRKUSERDEF1, PC_TRKUSERDEF2, PC_TRKUSERDEF3, PC_TRKUSERDEF4, PC_TRK_LASTUPD, PC_TRKNONO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_TRKNO, PC_TRKREF1, PC_TRKREF2, PC_TRKREF3, PC_TRKREF4, PC_TRKTIME, PC_TRKDATE, PC_TRKTDATE, PC_TRKLOGON, PC_TRKCMD, PC_TRKSEQ, PC_TRKWKC, PC_TRKPRT, PC_TRKTYPE, PC_TRKKEY1, PC_TRKKEY2, PC_TRKKEY3, PC_TRKKEY4, PC_TRKQTY, PC_TRKUOMQTY, PC_TRKUOM, PC_TRKUOMCONV, PC_TRKREASCODE, PC_TRKREASDESC, PC_TRKARCFLAG, PC_TRKUSERDEF1, PC_TRKUSERDEF2, PC_TRKUSERDEF3, PC_TRKUSERDEF4, PC_TRK_LASTUPD, PC_TRKNONO from PC_TRKREC";
	qDebug(category) << "unsertSQL - update PC_TRKREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_TRKNO = ?, PC_TRKREF1 = ?, PC_TRKREF2 = ?, PC_TRKREF3 = ?, PC_TRKREF4 = ?, PC_TRKTIME = ?, PC_TRKDATE = ?, PC_TRKTDATE = ?, PC_TRKLOGON = ?, PC_TRKCMD = ?, PC_TRKSEQ = ?, PC_TRKWKC = ?, PC_TRKPRT = ?, PC_TRKTYPE = ?, PC_TRKKEY1 = ?, PC_TRKKEY2 = ?, PC_TRKKEY3 = ?, PC_TRKKEY4 = ?, PC_TRKQTY = ?, PC_TRKUOMQTY = ?, PC_TRKUOM = ?, PC_TRKUOMCONV = ?, PC_TRKREASCODE = ?, PC_TRKREASDESC = ?, PC_TRKARCFLAG = ?, PC_TRKUSERDEF1 = ?, PC_TRKUSERDEF2 = ?, PC_TRKUSERDEF3 = ?, PC_TRKUSERDEF4 = ?, PC_TRK_LASTUPD = ?, PC_TRKNONO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_TRKREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TRKREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_TRKNO[10]";
	PC_TRKNO.resize(10);
	qDebug(category) << "Malloc - PC_TRKREF1[10]";
	PC_TRKREF1.resize(10);
	qDebug(category) << "Malloc - PC_TRKREF2[10]";
	PC_TRKREF2.resize(10);
	qDebug(category) << "Malloc - PC_TRKREF3[10]";
	PC_TRKREF3.resize(10);
	qDebug(category) << "Malloc - PC_TRKREF4[30]";
	PC_TRKREF4.resize(30);
	qDebug(category) << "Malloc - PC_TRKTIME[8]";
	PC_TRKTIME.resize(8);
	qDebug(category) << "Malloc - PC_TRKDATE[4]";
	PC_TRKDATE.resize(4);
	qDebug(category) << "Malloc - PC_TRKTDATE[4]";
	PC_TRKTDATE.resize(4);
	qDebug(category) << "Malloc - PC_TRKLOGON[12]";
	PC_TRKLOGON.resize(12);
	qDebug(category) << "Malloc - PC_TRKCMD[6]";
	PC_TRKCMD.resize(6);
	qDebug(category) << "Malloc - PC_TRKSEQ[2]";
	PC_TRKSEQ.resize(2);
	qDebug(category) << "Malloc - PC_TRKWKC[10]";
	PC_TRKWKC.resize(10);
	qDebug(category) << "Malloc - PC_TRKPRT[18]";
	PC_TRKPRT.resize(18);
	qDebug(category) << "Malloc - PC_TRKTYPE[2]";
	PC_TRKTYPE.resize(2);
	qDebug(category) << "Malloc - PC_TRKKEY1[10]";
	PC_TRKKEY1.resize(10);
	qDebug(category) << "Malloc - PC_TRKKEY2[10]";
	PC_TRKKEY2.resize(10);
	qDebug(category) << "Malloc - PC_TRKKEY3[24]";
	PC_TRKKEY3.resize(24);
	qDebug(category) << "Malloc - PC_TRKKEY4[24]";
	PC_TRKKEY4.resize(24);
	qDebug(category) << "Malloc - PC_TRKQTY[8]";
	PC_TRKQTY.resize(8);
	qDebug(category) << "Malloc - PC_TRKUOMQTY[8]";
	PC_TRKUOMQTY.resize(8);
	qDebug(category) << "Malloc - PC_TRKUOM[2]";
	PC_TRKUOM.resize(2);
	qDebug(category) << "Malloc - PC_TRKUOMCONV[8]";
	PC_TRKUOMCONV.resize(8);
	qDebug(category) << "Malloc - PC_TRKREASCODE[2]";
	PC_TRKREASCODE.resize(2);
	qDebug(category) << "Malloc - PC_TRKREASDESC[30]";
	PC_TRKREASDESC.resize(30);
	qDebug(category) << "Malloc - PC_TRKARCFLAG[2]";
	PC_TRKARCFLAG.resize(2);
	qDebug(category) << "Malloc - PC_TRKUSERDEF1[30]";
	PC_TRKUSERDEF1.resize(30);
	qDebug(category) << "Malloc - PC_TRKUSERDEF2[30]";
	PC_TRKUSERDEF2.resize(30);
	qDebug(category) << "Malloc - PC_TRKUSERDEF3[30]";
	PC_TRKUSERDEF3.resize(30);
	qDebug(category) << "Malloc - PC_TRKUSERDEF4[30]";
	PC_TRKUSERDEF4.resize(30);
	qDebug(category) << "Malloc - PC_TRK_LASTUPD[23]";
	PC_TRK_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_TRKNONO[10]";
	PC_TRKNONO.resize(10);

#pragma endregion Resize Fields PC_TRKREC
}
void PC_TRKREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TRKREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TRKREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TRKREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TRKREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TRKREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TRKREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TRKREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TRKREC");
				createTable();
			}break;
		}
	}
}

bool PC_TRKREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_TRKNO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_TRKNO.data(), 10, &cbPC_TRKNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 10 FieldName: PC_TRKREF1 ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_TRKREF1.data(), 10, &cbPC_TRKREF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 10 FieldName: PC_TRKREF2 ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_TRKREF2.data(), 10, &cbPC_TRKREF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 10 FieldName: PC_TRKREF3 ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_TRKREF3.data(), 10, &cbPC_TRKREF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 1 Buffer Size: 30 FieldName: PC_TRKREF4 ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 1, PC_TRKREF4.data(), 30, &cbPC_TRKREF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 1 Buffer Size: 8 FieldName: PC_TRKTIME ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 1, PC_TRKTIME.data(), 8, &cbPC_TRKTIME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 4 Buffer Size: 4 FieldName: PC_TRKDATE ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 4, PC_TRKDATE.data(), 4, &cbPC_TRKDATE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_TRKTDATE ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 4, PC_TRKTDATE.data(), 4, &cbPC_TRKTDATE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 1 Buffer Size: 12 FieldName: PC_TRKLOGON ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 1, PC_TRKLOGON.data(), 12, &cbPC_TRKLOGON);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 1 Buffer Size: 6 FieldName: PC_TRKCMD ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 1, PC_TRKCMD.data(), 6, &cbPC_TRKCMD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 5 Buffer Size: 2 FieldName: PC_TRKSEQ ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 5, PC_TRKSEQ.data(), 2, &cbPC_TRKSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 1 Buffer Size: 10 FieldName: PC_TRKWKC ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 1, PC_TRKWKC.data(), 10, &cbPC_TRKWKC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 1 Buffer Size: 18 FieldName: PC_TRKPRT ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 1, PC_TRKPRT.data(), 18, &cbPC_TRKPRT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 5 Buffer Size: 2 FieldName: PC_TRKTYPE ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 5, PC_TRKTYPE.data(), 2, &cbPC_TRKTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [20] Type: 1 Buffer Size: 10 FieldName: PC_TRKKEY1 ";
		r = ::SQLBindCol(hStmt_Fetch, 20, 1, PC_TRKKEY1.data(), 10, &cbPC_TRKKEY1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [21] Type: 1 Buffer Size: 10 FieldName: PC_TRKKEY2 ";
		r = ::SQLBindCol(hStmt_Fetch, 21, 1, PC_TRKKEY2.data(), 10, &cbPC_TRKKEY2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [22] Type: 1 Buffer Size: 24 FieldName: PC_TRKKEY3 ";
		r = ::SQLBindCol(hStmt_Fetch, 22, 1, PC_TRKKEY3.data(), 24, &cbPC_TRKKEY3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [23] Type: 1 Buffer Size: 24 FieldName: PC_TRKKEY4 ";
		r = ::SQLBindCol(hStmt_Fetch, 23, 1, PC_TRKKEY4.data(), 24, &cbPC_TRKKEY4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_TRKQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 24, 8, PC_TRKQTY.data(), 8, &cbPC_TRKQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [25] Type: 8 Buffer Size: 8 FieldName: PC_TRKUOMQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 25, 8, PC_TRKUOMQTY.data(), 8, &cbPC_TRKUOMQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [26] Type: 1 Buffer Size: 2 FieldName: PC_TRKUOM ";
		r = ::SQLBindCol(hStmt_Fetch, 26, 1, PC_TRKUOM.data(), 2, &cbPC_TRKUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [27] Type: 8 Buffer Size: 8 FieldName: PC_TRKUOMCONV ";
		r = ::SQLBindCol(hStmt_Fetch, 27, 8, PC_TRKUOMCONV.data(), 8, &cbPC_TRKUOMCONV);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [28] Type: 5 Buffer Size: 2 FieldName: PC_TRKREASCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 28, 5, PC_TRKREASCODE.data(), 2, &cbPC_TRKREASCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [29] Type: 1 Buffer Size: 30 FieldName: PC_TRKREASDESC ";
		r = ::SQLBindCol(hStmt_Fetch, 29, 1, PC_TRKREASDESC.data(), 30, &cbPC_TRKREASDESC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [30] Type: 5 Buffer Size: 2 FieldName: PC_TRKARCFLAG ";
		r = ::SQLBindCol(hStmt_Fetch, 30, 5, PC_TRKARCFLAG.data(), 2, &cbPC_TRKARCFLAG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [31] Type: 1 Buffer Size: 30 FieldName: PC_TRKUSERDEF1 ";
		r = ::SQLBindCol(hStmt_Fetch, 31, 1, PC_TRKUSERDEF1.data(), 30, &cbPC_TRKUSERDEF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [32] Type: 1 Buffer Size: 30 FieldName: PC_TRKUSERDEF2 ";
		r = ::SQLBindCol(hStmt_Fetch, 32, 1, PC_TRKUSERDEF2.data(), 30, &cbPC_TRKUSERDEF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [33] Type: 1 Buffer Size: 30 FieldName: PC_TRKUSERDEF3 ";
		r = ::SQLBindCol(hStmt_Fetch, 33, 1, PC_TRKUSERDEF3.data(), 30, &cbPC_TRKUSERDEF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [34] Type: 1 Buffer Size: 30 FieldName: PC_TRKUSERDEF4 ";
		r = ::SQLBindCol(hStmt_Fetch, 34, 1, PC_TRKUSERDEF4.data(), 30, &cbPC_TRKUSERDEF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [35] Type: 1 Buffer Size: 23 FieldName: PC_TRK_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 35, 1, PC_TRK_LASTUPD.data(), 23, &cbPC_TRK_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [36] Type: 1 Buffer Size: 10 FieldName: PC_TRKNONO ";
		r = ::SQLBindCol(hStmt_Fetch, 36, 1, PC_TRKNONO.data(), 10, &cbPC_TRKNONO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TRKREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_TRKNO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TRKNO.constData(), 0, &cbPC_TRKNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 10 FieldName: PC_TRKREF1 ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TRKREF1.constData(), 0, &cbPC_TRKREF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 10 FieldName: PC_TRKREF2 ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TRKREF2.constData(), 0, &cbPC_TRKREF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 10 FieldName: PC_TRKREF3 ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TRKREF3.constData(), 0, &cbPC_TRKREF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 1 Buffer Size: 30 FieldName: PC_TRKREF4 ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_TRKREF4.constData(), 0, &cbPC_TRKREF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 1 Buffer Size: 8 FieldName: PC_TRKTIME ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 8, 0, (SQLPOINTER)PC_TRKTIME.constData(), 0, &cbPC_TRKTIME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 4 Buffer Size: 4 FieldName: PC_TRKDATE ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_TRKDATE.constData(), 0, &cbPC_TRKDATE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_TRKTDATE ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_TRKTDATE.constData(), 0, &cbPC_TRKTDATE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 1 Buffer Size: 12 FieldName: PC_TRKLOGON ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 12, 0, (SQLPOINTER)PC_TRKLOGON.constData(), 0, &cbPC_TRKLOGON);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 1 Buffer Size: 6 FieldName: PC_TRKCMD ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 6, 0, (SQLPOINTER)PC_TRKCMD.constData(), 0, &cbPC_TRKCMD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 5 Buffer Size: 2 FieldName: PC_TRKSEQ ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_TRKSEQ.constData(), 0, &cbPC_TRKSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 1 Buffer Size: 10 FieldName: PC_TRKWKC ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TRKWKC.constData(), 0, &cbPC_TRKWKC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 1 Buffer Size: 18 FieldName: PC_TRKPRT ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_TRKPRT.constData(), 0, &cbPC_TRKPRT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 5 Buffer Size: 2 FieldName: PC_TRKTYPE ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_TRKTYPE.constData(), 0, &cbPC_TRKTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [20] Type: 1 Buffer Size: 10 FieldName: PC_TRKKEY1 ";
		r = SQLBindParameter(hStmt_Insert, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TRKKEY1.constData(), 0, &cbPC_TRKKEY1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [21] Type: 1 Buffer Size: 10 FieldName: PC_TRKKEY2 ";
		r = SQLBindParameter(hStmt_Insert, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TRKKEY2.constData(), 0, &cbPC_TRKKEY2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [22] Type: 1 Buffer Size: 24 FieldName: PC_TRKKEY3 ";
		r = SQLBindParameter(hStmt_Insert, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 24, 0, (SQLPOINTER)PC_TRKKEY3.constData(), 0, &cbPC_TRKKEY3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [23] Type: 1 Buffer Size: 24 FieldName: PC_TRKKEY4 ";
		r = SQLBindParameter(hStmt_Insert, 23, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 24, 0, (SQLPOINTER)PC_TRKKEY4.constData(), 0, &cbPC_TRKKEY4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_TRKQTY ";
		r = SQLBindParameter(hStmt_Insert, 24, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_TRKQTY.constData(), 0, &cbPC_TRKQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [25] Type: 8 Buffer Size: 8 FieldName: PC_TRKUOMQTY ";
		r = SQLBindParameter(hStmt_Insert, 25, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_TRKUOMQTY.constData(), 0, &cbPC_TRKUOMQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [26] Type: 1 Buffer Size: 2 FieldName: PC_TRKUOM ";
		r = SQLBindParameter(hStmt_Insert, 26, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_TRKUOM.constData(), 0, &cbPC_TRKUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [27] Type: 8 Buffer Size: 8 FieldName: PC_TRKUOMCONV ";
		r = SQLBindParameter(hStmt_Insert, 27, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_TRKUOMCONV.constData(), 0, &cbPC_TRKUOMCONV);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [28] Type: 5 Buffer Size: 2 FieldName: PC_TRKREASCODE ";
		r = SQLBindParameter(hStmt_Insert, 28, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_TRKREASCODE.constData(), 0, &cbPC_TRKREASCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [29] Type: 1 Buffer Size: 30 FieldName: PC_TRKREASDESC ";
		r = SQLBindParameter(hStmt_Insert, 29, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_TRKREASDESC.constData(), 0, &cbPC_TRKREASDESC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [30] Type: 5 Buffer Size: 2 FieldName: PC_TRKARCFLAG ";
		r = SQLBindParameter(hStmt_Insert, 30, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_TRKARCFLAG.constData(), 0, &cbPC_TRKARCFLAG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [31] Type: 1 Buffer Size: 30 FieldName: PC_TRKUSERDEF1 ";
		r = SQLBindParameter(hStmt_Insert, 31, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_TRKUSERDEF1.constData(), 0, &cbPC_TRKUSERDEF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [32] Type: 1 Buffer Size: 30 FieldName: PC_TRKUSERDEF2 ";
		r = SQLBindParameter(hStmt_Insert, 32, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_TRKUSERDEF2.constData(), 0, &cbPC_TRKUSERDEF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [33] Type: 1 Buffer Size: 30 FieldName: PC_TRKUSERDEF3 ";
		r = SQLBindParameter(hStmt_Insert, 33, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_TRKUSERDEF3.constData(), 0, &cbPC_TRKUSERDEF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [34] Type: 1 Buffer Size: 30 FieldName: PC_TRKUSERDEF4 ";
		r = SQLBindParameter(hStmt_Insert, 34, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_TRKUSERDEF4.constData(), 0, &cbPC_TRKUSERDEF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [35] Type: 1 Buffer Size: 23 FieldName: PC_TRK_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 35, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_TRK_LASTUPD.constData(), 0, &cbPC_TRK_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [36] Type: 1 Buffer Size: 10 FieldName: PC_TRKNONO ";
		r = SQLBindParameter(hStmt_Insert, 36, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_TRKNONO.constData(), 0, &cbPC_TRKNONO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 37, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 38, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 39, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TRKREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TRKREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TRKREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TRKREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TEXTTEXDSET::PC_TEXTTEXDSET(QObject * parent) : QObject(parent) 
,tableName("PC_TEXTTEXDSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TEXTTEXDSET 
PC_TEXTTEXDSET::~PC_TEXTTEXDSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TEXTTEXDSET

// begin method functions
void PC_TEXTTEXDSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TEXTTEXDSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TEXTTEXDSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TEXTTEXDSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TEXTTEXDSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TEXTTEXDSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TEXTTEXDSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TEXTTEXDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TEXTTEXDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TEXTTEXDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TEXTTEXDSET";
	qDebug(category) << "unsertSQL - update PC_TEXTTEXDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_TEXTTEXDSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TEXTTEXDSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_TEXTTEXDSET
}
void PC_TEXTTEXDSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TEXTTEXDSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TEXTTEXDSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TEXTTEXDSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TEXTTEXDSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TEXTTEXDSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TEXTTEXDSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TEXTTEXDSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TEXTTEXDSET");
				createTable();
			}break;
		}
	}
}

bool PC_TEXTTEXDSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TEXTTEXDSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TEXTTEXDSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TEXTTEXDSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TEXTTEXDSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TEXTTEXDSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTHSHSET::PC_PRTHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_PRTHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTHSHSET 
PC_PRTHSHSET::~PC_PRTHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTHSHSET

// begin method functions
void PC_PRTHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTHSHSET";
	qDebug(category) << "unsertSQL - update PC_PRTHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PRTHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PRTHSHSET
}
void PC_PRTHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_PRTHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTMBOSET::PC_PRTMBOSET(QObject * parent) : QObject(parent) 
,tableName("PC_PRTMBOSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTMBOSET 
PC_PRTMBOSET::~PC_PRTMBOSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTMBOSET

// begin method functions
void PC_PRTMBOSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTMBOSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTMBOSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTMBOSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTMBOSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTMBOSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTMBOSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTMBOSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTMBOSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTMBOSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTMBOSET";
	qDebug(category) << "unsertSQL - update PC_PRTMBOSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PRTMBOSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTMBOSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PRTMBOSET
}
void PC_PRTMBOSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTMBOSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTMBOSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTMBOSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTMBOSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTMBOSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTMBOSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTMBOSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTMBOSET");
				createTable();
			}break;
		}
	}
}

bool PC_PRTMBOSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTMBOSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTMBOSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTMBOSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTMBOSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTMBOSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_ADTADTDESSET::PC_ADTADTDESSET(QObject * parent) : QObject(parent) 
,tableName("PC_ADTADTDESSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_ADTADTDESSET 
PC_ADTADTDESSET::~PC_ADTADTDESSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_ADTADTDESSET

// begin method functions
void PC_ADTADTDESSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_ADTADTDESSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_ADTADTDESSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_ADTADTDESSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_ADTADTDESSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_ADTADTDESSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_ADTADTDESSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_ADTADTDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_ADTADTDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_ADTADTDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_ADTADTDESSET";
	qDebug(category) << "unsertSQL - update PC_ADTADTDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_ADTADTDESSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_ADTADTDESSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_ADTADTDESSET
}
void PC_ADTADTDESSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_ADTADTDESSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_ADTADTDESSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_ADTADTDESSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_ADTADTDESSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_ADTADTDESSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_ADTADTDESSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_ADTADTDESSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_ADTADTDESSET");
				createTable();
			}break;
		}
	}
}

bool PC_ADTADTDESSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_ADTADTDESSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_ADTADTDESSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_ADTADTDESSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_ADTADTDESSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_ADTADTDESSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MCSTREC::PC_MCSTREC(QObject * parent) : QObject(parent) 
,tableName("PC_MCSTREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MCSTREC 
PC_MCSTREC::~PC_MCSTREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_MCSTMTHD.clear();
	PC_MCSTSCMT.clear();
	PC_MCSTSCMO.clear();
	PC_MCSTSAMBF.clear();
	PC_MCSTSCDL.clear();
	PC_MCSTSCO1.clear();
	PC_MCSTSCO2.clear();
	PC_MCSTSCOP.clear();
	PC_MCSTSCOO.clear();
	PC_MCSTSADL.clear();
	PC_MCSTSAO1.clear();
	PC_MCSTSAO2.clear();
	PC_MCSTSAOP.clear();
	PC_MCSTSAOBF.clear();
	PC_MCSTSPUR.clear();
	PC_MCSTLSTAMAT.clear();
	PC_MCSTLSTAMATO.clear();
	PC_MCSTLSTALAB.clear();
	PC_MCSTLSTALABO.clear();
	PC_MCST_LASTUPD.clear();
	PC_MENDPROD.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MCSTREC

// begin method functions
void PC_MCSTREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MCSTREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MCSTREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MCSTREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MCSTREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MCSTMTHD, PC_MCSTSCMT, PC_MCSTSCMO, PC_MCSTSAMBF, PC_MCSTSCDL, PC_MCSTSCO1, PC_MCSTSCO2, PC_MCSTSCOP, PC_MCSTSCOO, PC_MCSTSADL, PC_MCSTSAO1, PC_MCSTSAO2, PC_MCSTSAOP, PC_MCSTSAOBF, PC_MCSTSPUR, PC_MCSTLSTAMAT, PC_MCSTLSTAMATO, PC_MCSTLSTALAB, PC_MCSTLSTALABO, PC_MCST_LASTUPD, PC_MENDPROD from PC_MCSTREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MCSTREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MCSTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MCSTMTHD, PC_MCSTSCMT, PC_MCSTSCMO, PC_MCSTSAMBF, PC_MCSTSCDL, PC_MCSTSCO1, PC_MCSTSCO2, PC_MCSTSCOP, PC_MCSTSCOO, PC_MCSTSADL, PC_MCSTSAO1, PC_MCSTSAO2, PC_MCSTSAOP, PC_MCSTSAOBF, PC_MCSTSPUR, PC_MCSTLSTAMAT, PC_MCSTLSTAMATO, PC_MCSTLSTALAB, PC_MCSTLSTALABO, PC_MCST_LASTUPD, PC_MENDPROD ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MCSTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MCSTMTHD = ?, PC_MCSTSCMT = ?, PC_MCSTSCMO = ?, PC_MCSTSAMBF = ?, PC_MCSTSCDL = ?, PC_MCSTSCO1 = ?, PC_MCSTSCO2 = ?, PC_MCSTSCOP = ?, PC_MCSTSCOO = ?, PC_MCSTSADL = ?, PC_MCSTSAO1 = ?, PC_MCSTSAO2 = ?, PC_MCSTSAOP = ?, PC_MCSTSAOBF = ?, PC_MCSTSPUR = ?, PC_MCSTLSTAMAT = ?, PC_MCSTLSTAMATO = ?, PC_MCSTLSTALAB = ?, PC_MCSTLSTALABO = ?, PC_MCST_LASTUPD = ?, PC_MENDPROD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MCSTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MCSTMTHD, PC_MCSTSCMT, PC_MCSTSCMO, PC_MCSTSAMBF, PC_MCSTSCDL, PC_MCSTSCO1, PC_MCSTSCO2, PC_MCSTSCOP, PC_MCSTSCOO, PC_MCSTSADL, PC_MCSTSAO1, PC_MCSTSAO2, PC_MCSTSAOP, PC_MCSTSAOBF, PC_MCSTSPUR, PC_MCSTLSTAMAT, PC_MCSTLSTAMATO, PC_MCSTLSTALAB, PC_MCSTLSTALABO, PC_MCST_LASTUPD, PC_MENDPROD ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MCSTMTHD, PC_MCSTSCMT, PC_MCSTSCMO, PC_MCSTSAMBF, PC_MCSTSCDL, PC_MCSTSCO1, PC_MCSTSCO2, PC_MCSTSCOP, PC_MCSTSCOO, PC_MCSTSADL, PC_MCSTSAO1, PC_MCSTSAO2, PC_MCSTSAOP, PC_MCSTSAOBF, PC_MCSTSPUR, PC_MCSTLSTAMAT, PC_MCSTLSTAMATO, PC_MCSTLSTALAB, PC_MCSTLSTALABO, PC_MCST_LASTUPD, PC_MENDPROD from PC_MCSTREC";
	qDebug(category) << "unsertSQL - update PC_MCSTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MCSTMTHD = ?, PC_MCSTSCMT = ?, PC_MCSTSCMO = ?, PC_MCSTSAMBF = ?, PC_MCSTSCDL = ?, PC_MCSTSCO1 = ?, PC_MCSTSCO2 = ?, PC_MCSTSCOP = ?, PC_MCSTSCOO = ?, PC_MCSTSADL = ?, PC_MCSTSAO1 = ?, PC_MCSTSAO2 = ?, PC_MCSTSAOP = ?, PC_MCSTSAOBF = ?, PC_MCSTSPUR = ?, PC_MCSTLSTAMAT = ?, PC_MCSTLSTAMATO = ?, PC_MCSTLSTALAB = ?, PC_MCSTLSTALABO = ?, PC_MCST_LASTUPD = ?, PC_MENDPROD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_MCSTREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MCSTREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_MCSTMTHD[2]";
	PC_MCSTMTHD.resize(2);
	qDebug(category) << "Malloc - PC_MCSTSCMT[8]";
	PC_MCSTSCMT.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSCMO[8]";
	PC_MCSTSCMO.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSAMBF[8]";
	PC_MCSTSAMBF.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSCDL[8]";
	PC_MCSTSCDL.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSCO1[8]";
	PC_MCSTSCO1.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSCO2[8]";
	PC_MCSTSCO2.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSCOP[8]";
	PC_MCSTSCOP.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSCOO[8]";
	PC_MCSTSCOO.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSADL[8]";
	PC_MCSTSADL.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSAO1[8]";
	PC_MCSTSAO1.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSAO2[8]";
	PC_MCSTSAO2.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSAOP[8]";
	PC_MCSTSAOP.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSAOBF[8]";
	PC_MCSTSAOBF.resize(8);
	qDebug(category) << "Malloc - PC_MCSTSPUR[8]";
	PC_MCSTSPUR.resize(8);
	qDebug(category) << "Malloc - PC_MCSTLSTAMAT[8]";
	PC_MCSTLSTAMAT.resize(8);
	qDebug(category) << "Malloc - PC_MCSTLSTAMATO[8]";
	PC_MCSTLSTAMATO.resize(8);
	qDebug(category) << "Malloc - PC_MCSTLSTALAB[8]";
	PC_MCSTLSTALAB.resize(8);
	qDebug(category) << "Malloc - PC_MCSTLSTALABO[8]";
	PC_MCSTLSTALABO.resize(8);
	qDebug(category) << "Malloc - PC_MCST_LASTUPD[23]";
	PC_MCST_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_MENDPROD[18]";
	PC_MENDPROD.resize(18);

#pragma endregion Resize Fields PC_MCSTREC
}
void PC_MCSTREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MCSTREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MCSTREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MCSTREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MCSTREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MCSTREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MCSTREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MCSTREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MCSTREC");
				createTable();
			}break;
		}
	}
}

bool PC_MCSTREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 2 FieldName: PC_MCSTMTHD ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_MCSTMTHD.data(), 2, &cbPC_MCSTMTHD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCMT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 8, PC_MCSTSCMT.data(), 8, &cbPC_MCSTSCMT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCMO ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 8, PC_MCSTSCMO.data(), 8, &cbPC_MCSTSCMO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSAMBF ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 8, PC_MCSTSAMBF.data(), 8, &cbPC_MCSTSAMBF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCDL ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 8, PC_MCSTSCDL.data(), 8, &cbPC_MCSTSCDL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCO1 ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 8, PC_MCSTSCO1.data(), 8, &cbPC_MCSTSCO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCO2 ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 8, PC_MCSTSCO2.data(), 8, &cbPC_MCSTSCO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCOP ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 8, PC_MCSTSCOP.data(), 8, &cbPC_MCSTSCOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCOO ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 8, PC_MCSTSCOO.data(), 8, &cbPC_MCSTSCOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSADL ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 8, PC_MCSTSADL.data(), 8, &cbPC_MCSTSADL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSAO1 ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 8, PC_MCSTSAO1.data(), 8, &cbPC_MCSTSAO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSAO2 ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 8, PC_MCSTSAO2.data(), 8, &cbPC_MCSTSAO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSAOP ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 8, PC_MCSTSAOP.data(), 8, &cbPC_MCSTSAOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSAOBF ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 8, PC_MCSTSAOBF.data(), 8, &cbPC_MCSTSAOBF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [20] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSPUR ";
		r = ::SQLBindCol(hStmt_Fetch, 20, 8, PC_MCSTSPUR.data(), 8, &cbPC_MCSTSPUR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [21] Type: 8 Buffer Size: 8 FieldName: PC_MCSTLSTAMAT ";
		r = ::SQLBindCol(hStmt_Fetch, 21, 8, PC_MCSTLSTAMAT.data(), 8, &cbPC_MCSTLSTAMAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_MCSTLSTAMATO ";
		r = ::SQLBindCol(hStmt_Fetch, 22, 8, PC_MCSTLSTAMATO.data(), 8, &cbPC_MCSTLSTAMATO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [23] Type: 8 Buffer Size: 8 FieldName: PC_MCSTLSTALAB ";
		r = ::SQLBindCol(hStmt_Fetch, 23, 8, PC_MCSTLSTALAB.data(), 8, &cbPC_MCSTLSTALAB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_MCSTLSTALABO ";
		r = ::SQLBindCol(hStmt_Fetch, 24, 8, PC_MCSTLSTALABO.data(), 8, &cbPC_MCSTLSTALABO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [25] Type: 1 Buffer Size: 23 FieldName: PC_MCST_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 25, 1, PC_MCST_LASTUPD.data(), 23, &cbPC_MCST_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [26] Type: 1 Buffer Size: 18 FieldName: PC_MENDPROD ";
		r = ::SQLBindCol(hStmt_Fetch, 26, 1, PC_MENDPROD.data(), 18, &cbPC_MENDPROD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MCSTREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 2 FieldName: PC_MCSTMTHD ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_MCSTMTHD.constData(), 0, &cbPC_MCSTMTHD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCMT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSCMT.constData(), 0, &cbPC_MCSTSCMT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCMO ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSCMO.constData(), 0, &cbPC_MCSTSCMO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSAMBF ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSAMBF.constData(), 0, &cbPC_MCSTSAMBF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCDL ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSCDL.constData(), 0, &cbPC_MCSTSCDL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCO1 ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSCO1.constData(), 0, &cbPC_MCSTSCO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCO2 ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSCO2.constData(), 0, &cbPC_MCSTSCO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCOP ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSCOP.constData(), 0, &cbPC_MCSTSCOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSCOO ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSCOO.constData(), 0, &cbPC_MCSTSCOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSADL ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSADL.constData(), 0, &cbPC_MCSTSADL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSAO1 ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSAO1.constData(), 0, &cbPC_MCSTSAO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSAO2 ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSAO2.constData(), 0, &cbPC_MCSTSAO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSAOP ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSAOP.constData(), 0, &cbPC_MCSTSAOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSAOBF ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSAOBF.constData(), 0, &cbPC_MCSTSAOBF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [20] Type: 8 Buffer Size: 8 FieldName: PC_MCSTSPUR ";
		r = SQLBindParameter(hStmt_Insert, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTSPUR.constData(), 0, &cbPC_MCSTSPUR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [21] Type: 8 Buffer Size: 8 FieldName: PC_MCSTLSTAMAT ";
		r = SQLBindParameter(hStmt_Insert, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTLSTAMAT.constData(), 0, &cbPC_MCSTLSTAMAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_MCSTLSTAMATO ";
		r = SQLBindParameter(hStmt_Insert, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTLSTAMATO.constData(), 0, &cbPC_MCSTLSTAMATO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [23] Type: 8 Buffer Size: 8 FieldName: PC_MCSTLSTALAB ";
		r = SQLBindParameter(hStmt_Insert, 23, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTLSTALAB.constData(), 0, &cbPC_MCSTLSTALAB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_MCSTLSTALABO ";
		r = SQLBindParameter(hStmt_Insert, 24, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MCSTLSTALABO.constData(), 0, &cbPC_MCSTLSTALABO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [25] Type: 1 Buffer Size: 23 FieldName: PC_MCST_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 25, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_MCST_LASTUPD.constData(), 0, &cbPC_MCST_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [26] Type: 1 Buffer Size: 18 FieldName: PC_MENDPROD ";
		r = SQLBindParameter(hStmt_Insert, 26, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_MENDPROD.constData(), 0, &cbPC_MENDPROD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 27, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 28, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 29, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MCSTREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MCSTREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MCSTREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MCSTREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TOOTWUSET::PC_TOOTWUSET(QObject * parent) : QObject(parent) 
,tableName("PC_TOOTWUSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TOOTWUSET 
PC_TOOTWUSET::~PC_TOOTWUSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TOOTWUSET

// begin method functions
void PC_TOOTWUSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TOOTWUSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TOOTWUSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TOOTWUSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TOOTWUSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TOOTWUSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TOOTWUSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TOOTWUSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TOOTWUSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TOOTWUSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TOOTWUSET";
	qDebug(category) << "unsertSQL - update PC_TOOTWUSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_TOOTWUSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TOOTWUSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_TOOTWUSET
}
void PC_TOOTWUSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TOOTWUSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TOOTWUSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TOOTWUSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TOOTWUSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TOOTWUSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TOOTWUSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TOOTWUSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TOOTWUSET");
				createTable();
			}break;
		}
	}
}

bool PC_TOOTWUSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TOOTWUSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TOOTWUSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TOOTWUSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TOOTWUSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TOOTWUSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_ADTREC::PC_ADTREC(QObject * parent) : QObject(parent) 
,tableName("PC_ADTREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_ADTREC 
PC_ADTREC::~PC_ADTREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_ADTINGRED.clear();
	PC_ADTYLD.clear();
	PC_ADTITEM.clear();
	PC_ADTSCALE.clear();
	PC_ADTQPB.clear();
	PC_ADTSEQ.clear();
	PC_ADTUOM.clear();
	PC_ADT_LASTUPD.clear();
	PC_ALTHSUBNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_ADTREC

// begin method functions
void PC_ADTREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_ADTREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_ADTREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_ADTREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_ADTREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADTINGRED, PC_ADTYLD, PC_ADTITEM, PC_ADTSCALE, PC_ADTQPB, PC_ADTSEQ, PC_ADTUOM, PC_ADT_LASTUPD, PC_ALTHSUBNO from PC_ADTREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_ADTREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_ADTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADTINGRED, PC_ADTYLD, PC_ADTITEM, PC_ADTSCALE, PC_ADTQPB, PC_ADTSEQ, PC_ADTUOM, PC_ADT_LASTUPD, PC_ALTHSUBNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_ADTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ADTINGRED = ?, PC_ADTYLD = ?, PC_ADTITEM = ?, PC_ADTSCALE = ?, PC_ADTQPB = ?, PC_ADTSEQ = ?, PC_ADTUOM = ?, PC_ADT_LASTUPD = ?, PC_ALTHSUBNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_ADTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADTINGRED, PC_ADTYLD, PC_ADTITEM, PC_ADTSCALE, PC_ADTQPB, PC_ADTSEQ, PC_ADTUOM, PC_ADT_LASTUPD, PC_ALTHSUBNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ADTINGRED, PC_ADTYLD, PC_ADTITEM, PC_ADTSCALE, PC_ADTQPB, PC_ADTSEQ, PC_ADTUOM, PC_ADT_LASTUPD, PC_ALTHSUBNO from PC_ADTREC";
	qDebug(category) << "unsertSQL - update PC_ADTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ADTINGRED = ?, PC_ADTYLD = ?, PC_ADTITEM = ?, PC_ADTSCALE = ?, PC_ADTQPB = ?, PC_ADTSEQ = ?, PC_ADTUOM = ?, PC_ADT_LASTUPD = ?, PC_ALTHSUBNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_ADTREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_ADTREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_ADTINGRED[18]";
	PC_ADTINGRED.resize(18);
	qDebug(category) << "Malloc - PC_ADTYLD[8]";
	PC_ADTYLD.resize(8);
	qDebug(category) << "Malloc - PC_ADTITEM[2]";
	PC_ADTITEM.resize(2);
	qDebug(category) << "Malloc - PC_ADTSCALE[2]";
	PC_ADTSCALE.resize(2);
	qDebug(category) << "Malloc - PC_ADTQPB[8]";
	PC_ADTQPB.resize(8);
	qDebug(category) << "Malloc - PC_ADTSEQ[2]";
	PC_ADTSEQ.resize(2);
	qDebug(category) << "Malloc - PC_ADTUOM[2]";
	PC_ADTUOM.resize(2);
	qDebug(category) << "Malloc - PC_ADT_LASTUPD[23]";
	PC_ADT_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_ALTHSUBNO[16]";
	PC_ALTHSUBNO.resize(16);

#pragma endregion Resize Fields PC_ADTREC
}
void PC_ADTREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_ADTREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_ADTREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_ADTREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_ADTREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_ADTREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_ADTREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_ADTREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_ADTREC");
				createTable();
			}break;
		}
	}
}

bool PC_ADTREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_ADTINGRED ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_ADTINGRED.data(), 18, &cbPC_ADTINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 8 Buffer Size: 8 FieldName: PC_ADTYLD ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 8, PC_ADTYLD.data(), 8, &cbPC_ADTYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_ADTITEM ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, PC_ADTITEM.data(), 2, &cbPC_ADTITEM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_ADTSCALE ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 5, PC_ADTSCALE.data(), 2, &cbPC_ADTSCALE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_ADTQPB ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 8, PC_ADTQPB.data(), 8, &cbPC_ADTQPB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_ADTSEQ ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 5, PC_ADTSEQ.data(), 2, &cbPC_ADTSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 1 Buffer Size: 2 FieldName: PC_ADTUOM ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 1, PC_ADTUOM.data(), 2, &cbPC_ADTUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 1 Buffer Size: 23 FieldName: PC_ADT_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 1, PC_ADT_LASTUPD.data(), 23, &cbPC_ADT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 1 Buffer Size: 16 FieldName: PC_ALTHSUBNO ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 1, PC_ALTHSUBNO.data(), 16, &cbPC_ALTHSUBNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_ADTREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_ADTINGRED ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_ADTINGRED.constData(), 0, &cbPC_ADTINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 8 Buffer Size: 8 FieldName: PC_ADTYLD ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_ADTYLD.constData(), 0, &cbPC_ADTYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_ADTITEM ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_ADTITEM.constData(), 0, &cbPC_ADTITEM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_ADTSCALE ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_ADTSCALE.constData(), 0, &cbPC_ADTSCALE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_ADTQPB ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_ADTQPB.constData(), 0, &cbPC_ADTQPB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_ADTSEQ ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_ADTSEQ.constData(), 0, &cbPC_ADTSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 1 Buffer Size: 2 FieldName: PC_ADTUOM ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_ADTUOM.constData(), 0, &cbPC_ADTUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 1 Buffer Size: 23 FieldName: PC_ADT_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_ADT_LASTUPD.constData(), 0, &cbPC_ADT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 1 Buffer Size: 16 FieldName: PC_ALTHSUBNO ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 16, 0, (SQLPOINTER)PC_ALTHSUBNO.constData(), 0, &cbPC_ALTHSUBNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_ADTREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_ADTREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_ADTREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_ADTREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_APITAPISAFSET::PC_APITAPISAFSET(QObject * parent) : QObject(parent) 
,tableName("PC_APITAPISAFSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_APITAPISAFSET 
PC_APITAPISAFSET::~PC_APITAPISAFSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_APITAPISAFSET

// begin method functions
void PC_APITAPISAFSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_APITAPISAFSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_APITAPISAFSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_APITAPISAFSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_APITAPISAFSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APITAPISAFSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_APITAPISAFSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_APITAPISAFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_APITAPISAFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_APITAPISAFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APITAPISAFSET";
	qDebug(category) << "unsertSQL - update PC_APITAPISAFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_APITAPISAFSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_APITAPISAFSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_APITAPISAFSET
}
void PC_APITAPISAFSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_APITAPISAFSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_APITAPISAFSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_APITAPISAFSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_APITAPISAFSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_APITAPISAFSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_APITAPISAFSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_APITAPISAFSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_APITAPISAFSET");
				createTable();
			}break;
		}
	}
}

bool PC_APITAPISAFSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_APITAPISAFSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_APITAPISAFSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_APITAPISAFSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_APITAPISAFSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_APITAPISAFSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_ALTHADFSET::PC_ALTHADFSET(QObject * parent) : QObject(parent) 
,tableName("PC_ALTHADFSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_ALTHADFSET 
PC_ALTHADFSET::~PC_ALTHADFSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_ALTHADFSET

// begin method functions
void PC_ALTHADFSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_ALTHADFSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_ALTHADFSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_ALTHADFSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_ALTHADFSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_ALTHADFSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_ALTHADFSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_ALTHADFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_ALTHADFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_ALTHADFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_ALTHADFSET";
	qDebug(category) << "unsertSQL - update PC_ALTHADFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_ALTHADFSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_ALTHADFSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_ALTHADFSET
}
void PC_ALTHADFSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_ALTHADFSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_ALTHADFSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_ALTHADFSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_ALTHADFSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_ALTHADFSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_ALTHADFSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_ALTHADFSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_ALTHADFSET");
				createTable();
			}break;
		}
	}
}

bool PC_ALTHADFSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_ALTHADFSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_ALTHADFSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_ALTHADFSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_ALTHADFSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_ALTHADFSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MPIDESREC::PC_MPIDESREC(QObject * parent) : QObject(parent) 
,tableName("PC_MPIDESREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MPIDESREC 
PC_MPIDESREC::~PC_MPIDESREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_MPIDESCODE.clear();
	PC_MPIDESTEXT.clear();
	PC_MPIDES_LASTUPD.clear();
	PC_MPICODE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MPIDESREC

// begin method functions
void PC_MPIDESREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MPIDESREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MPIDESREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MPIDESREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MPIDESREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPIDESCODE, PC_MPIDESTEXT, PC_MPIDES_LASTUPD, PC_MPICODE from PC_MPIDESREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MPIDESREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MPIDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPIDESCODE, PC_MPIDESTEXT, PC_MPIDES_LASTUPD, PC_MPICODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MPIDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MPIDESCODE = ?, PC_MPIDESTEXT = ?, PC_MPIDES_LASTUPD = ?, PC_MPICODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MPIDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPIDESCODE, PC_MPIDESTEXT, PC_MPIDES_LASTUPD, PC_MPICODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MPIDESCODE, PC_MPIDESTEXT, PC_MPIDES_LASTUPD, PC_MPICODE from PC_MPIDESREC";
	qDebug(category) << "unsertSQL - update PC_MPIDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MPIDESCODE = ?, PC_MPIDESTEXT = ?, PC_MPIDES_LASTUPD = ?, PC_MPICODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_MPIDESREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MPIDESREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_MPIDESCODE[10]";
	PC_MPIDESCODE.resize(10);
	qDebug(category) << "Malloc - PC_MPIDESTEXT[60]";
	PC_MPIDESTEXT.resize(60);
	qDebug(category) << "Malloc - PC_MPIDES_LASTUPD[23]";
	PC_MPIDES_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_MPICODE[2]";
	PC_MPICODE.resize(2);

#pragma endregion Resize Fields PC_MPIDESREC
}
void PC_MPIDESREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MPIDESREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MPIDESREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MPIDESREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MPIDESREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MPIDESREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MPIDESREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MPIDESREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MPIDESREC");
				createTable();
			}break;
		}
	}
}

bool PC_MPIDESREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_MPIDESCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_MPIDESCODE.data(), 10, &cbPC_MPIDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_MPIDESTEXT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_MPIDESTEXT.data(), 60, &cbPC_MPIDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_MPIDES_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_MPIDES_LASTUPD.data(), 23, &cbPC_MPIDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_MPICODE ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 5, PC_MPICODE.data(), 2, &cbPC_MPICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MPIDESREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_MPIDESCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_MPIDESCODE.constData(), 0, &cbPC_MPIDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_MPIDESTEXT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_MPIDESTEXT.constData(), 0, &cbPC_MPIDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_MPIDES_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_MPIDES_LASTUPD.constData(), 0, &cbPC_MPIDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_MPICODE ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MPICODE.constData(), 0, &cbPC_MPICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MPIDESREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MPIDESREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MPIDESREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MPIDESREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_APIDESREC::PC_APIDESREC(QObject * parent) : QObject(parent) 
,tableName("PC_APIDESREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_APIDESREC 
PC_APIDESREC::~PC_APIDESREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_APIDESCODE.clear();
	PC_APIDESTEXT.clear();
	PC_APIDES_LASTUPD.clear();
	PC_APITCODE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_APIDESREC

// begin method functions
void PC_APIDESREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_APIDESREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_APIDESREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_APIDESREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_APIDESREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIDESCODE, PC_APIDESTEXT, PC_APIDES_LASTUPD, PC_APITCODE from PC_APIDESREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_APIDESREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_APIDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIDESCODE, PC_APIDESTEXT, PC_APIDES_LASTUPD, PC_APITCODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_APIDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_APIDESCODE = ?, PC_APIDESTEXT = ?, PC_APIDES_LASTUPD = ?, PC_APITCODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_APIDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIDESCODE, PC_APIDESTEXT, PC_APIDES_LASTUPD, PC_APITCODE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIDESCODE, PC_APIDESTEXT, PC_APIDES_LASTUPD, PC_APITCODE from PC_APIDESREC";
	qDebug(category) << "unsertSQL - update PC_APIDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_APIDESCODE = ?, PC_APIDESTEXT = ?, PC_APIDES_LASTUPD = ?, PC_APITCODE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_APIDESREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_APIDESREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_APIDESCODE[10]";
	PC_APIDESCODE.resize(10);
	qDebug(category) << "Malloc - PC_APIDESTEXT[60]";
	PC_APIDESTEXT.resize(60);
	qDebug(category) << "Malloc - PC_APIDES_LASTUPD[23]";
	PC_APIDES_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_APITCODE[2]";
	PC_APITCODE.resize(2);

#pragma endregion Resize Fields PC_APIDESREC
}
void PC_APIDESREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_APIDESREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_APIDESREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_APIDESREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_APIDESREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_APIDESREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_APIDESREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_APIDESREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_APIDESREC");
				createTable();
			}break;
		}
	}
}

bool PC_APIDESREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_APIDESCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_APIDESCODE.data(), 10, &cbPC_APIDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_APIDESTEXT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_APIDESTEXT.data(), 60, &cbPC_APIDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_APIDES_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_APIDES_LASTUPD.data(), 23, &cbPC_APIDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_APITCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 5, PC_APITCODE.data(), 2, &cbPC_APITCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_APIDESREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_APIDESCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_APIDESCODE.constData(), 0, &cbPC_APIDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_APIDESTEXT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_APIDESTEXT.constData(), 0, &cbPC_APIDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_APIDES_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_APIDES_LASTUPD.constData(), 0, &cbPC_APIDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 5 Buffer Size: 2 FieldName: PC_APITCODE ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_APITCODE.constData(), 0, &cbPC_APITCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_APIDESREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_APIDESREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_APIDESREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_APIDESREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MBOMPISET::PC_MBOMPISET(QObject * parent) : QObject(parent) 
,tableName("PC_MBOMPISET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MBOMPISET 
PC_MBOMPISET::~PC_MBOMPISET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MBOMPISET

// begin method functions
void PC_MBOMPISET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MBOMPISET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MBOMPISET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MBOMPISET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MBOMPISET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOMPISET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MBOMPISET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MBOMPISET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MBOMPISET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MBOMPISET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MBOMPISET";
	qDebug(category) << "unsertSQL - update PC_MBOMPISET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_MBOMPISET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MBOMPISET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_MBOMPISET
}
void PC_MBOMPISET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MBOMPISET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MBOMPISET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MBOMPISET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MBOMPISET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MBOMPISET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MBOMPISET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MBOMPISET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MBOMPISET");
				createTable();
			}break;
		}
	}
}

bool PC_MBOMPISET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MBOMPISET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MBOMPISET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MBOMPISET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MBOMPISET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MBOMPISET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTMENDSET::PC_PRTMENDSET(QObject * parent) : QObject(parent) 
,tableName("PC_PRTMENDSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTMENDSET 
PC_PRTMENDSET::~PC_PRTMENDSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTMENDSET

// begin method functions
void PC_PRTMENDSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTMENDSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTMENDSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTMENDSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTMENDSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTMENDSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTMENDSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTMENDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTMENDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTMENDSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTMENDSET";
	qDebug(category) << "unsertSQL - update PC_PRTMENDSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PRTMENDSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTMENDSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PRTMENDSET
}
void PC_PRTMENDSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTMENDSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTMENDSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTMENDSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTMENDSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTMENDSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTMENDSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTMENDSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTMENDSET");
				createTable();
			}break;
		}
	}
}

bool PC_PRTMENDSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTMENDSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTMENDSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTMENDSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTMENDSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTMENDSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_APIHREC::PC_APIHREC(QObject * parent) : QObject(parent) 
,tableName("PC_APIHREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_APIHREC 
PC_APIHREC::~PC_APIHREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_APIHSUBPNO.clear();
	PC_APIHTYPE.clear();
	PC_APIHPICODE.clear();
	PC_APIHFRMNAME.clear();
	PC_APIHEDAT.clear();
	PC_APIHIDAT.clear();
	PC_APIH_LASTUPD.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_APIHREC

// begin method functions
void PC_APIHREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_APIHREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_APIHREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_APIHREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_APIHREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIHSUBPNO, PC_APIHTYPE, PC_APIHPICODE, PC_APIHFRMNAME, PC_APIHEDAT, PC_APIHIDAT, PC_APIH_LASTUPD from PC_APIHREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_APIHREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_APIHREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIHSUBPNO, PC_APIHTYPE, PC_APIHPICODE, PC_APIHFRMNAME, PC_APIHEDAT, PC_APIHIDAT, PC_APIH_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_APIHREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_APIHSUBPNO = ?, PC_APIHTYPE = ?, PC_APIHPICODE = ?, PC_APIHFRMNAME = ?, PC_APIHEDAT = ?, PC_APIHIDAT = ?, PC_APIH_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_APIHREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIHSUBPNO, PC_APIHTYPE, PC_APIHPICODE, PC_APIHFRMNAME, PC_APIHEDAT, PC_APIHIDAT, PC_APIH_LASTUPD ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIHSUBPNO, PC_APIHTYPE, PC_APIHPICODE, PC_APIHFRMNAME, PC_APIHEDAT, PC_APIHIDAT, PC_APIH_LASTUPD from PC_APIHREC";
	qDebug(category) << "unsertSQL - update PC_APIHREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_APIHSUBPNO = ?, PC_APIHTYPE = ?, PC_APIHPICODE = ?, PC_APIHFRMNAME = ?, PC_APIHEDAT = ?, PC_APIHIDAT = ?, PC_APIH_LASTUPD = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_APIHREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_APIHREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_APIHSUBPNO[16]";
	PC_APIHSUBPNO.resize(16);
	qDebug(category) << "Malloc - PC_APIHTYPE[2]";
	PC_APIHTYPE.resize(2);
	qDebug(category) << "Malloc - PC_APIHPICODE[2]";
	PC_APIHPICODE.resize(2);
	qDebug(category) << "Malloc - PC_APIHFRMNAME[20]";
	PC_APIHFRMNAME.resize(20);
	qDebug(category) << "Malloc - PC_APIHEDAT[4]";
	PC_APIHEDAT.resize(4);
	qDebug(category) << "Malloc - PC_APIHIDAT[4]";
	PC_APIHIDAT.resize(4);
	qDebug(category) << "Malloc - PC_APIH_LASTUPD[23]";
	PC_APIH_LASTUPD.resize(23);

#pragma endregion Resize Fields PC_APIHREC
}
void PC_APIHREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_APIHREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_APIHREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_APIHREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_APIHREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_APIHREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_APIHREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_APIHREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_APIHREC");
				createTable();
			}break;
		}
	}
}

bool PC_APIHREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_APIHSUBPNO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_APIHSUBPNO.data(), 16, &cbPC_APIHSUBPNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_APIHTYPE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_APIHTYPE.data(), 2, &cbPC_APIHTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_APIHPICODE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, PC_APIHPICODE.data(), 2, &cbPC_APIHPICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 20 FieldName: PC_APIHFRMNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_APIHFRMNAME.data(), 20, &cbPC_APIHFRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 4 Buffer Size: 4 FieldName: PC_APIHEDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 4, PC_APIHEDAT.data(), 4, &cbPC_APIHEDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 4 Buffer Size: 4 FieldName: PC_APIHIDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 4, PC_APIHIDAT.data(), 4, &cbPC_APIHIDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 1 Buffer Size: 23 FieldName: PC_APIH_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 1, PC_APIH_LASTUPD.data(), 23, &cbPC_APIH_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_APIHREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_APIHSUBPNO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 16, 0, (SQLPOINTER)PC_APIHSUBPNO.constData(), 0, &cbPC_APIHSUBPNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_APIHTYPE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_APIHTYPE.constData(), 0, &cbPC_APIHTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_APIHPICODE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_APIHPICODE.constData(), 0, &cbPC_APIHPICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 20 FieldName: PC_APIHFRMNAME ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 20, 0, (SQLPOINTER)PC_APIHFRMNAME.constData(), 0, &cbPC_APIHFRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 4 Buffer Size: 4 FieldName: PC_APIHEDAT ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_APIHEDAT.constData(), 0, &cbPC_APIHEDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 4 Buffer Size: 4 FieldName: PC_APIHIDAT ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_APIHIDAT.constData(), 0, &cbPC_APIHIDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 1 Buffer Size: 23 FieldName: PC_APIH_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_APIH_LASTUPD.constData(), 0, &cbPC_APIH_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_APIHREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_APIHREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_APIHREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_APIHREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_APIFREC::PC_APIFREC(QObject * parent) : QObject(parent) 
,tableName("PC_APIFREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_APIFREC 
PC_APIFREC::~PC_APIFREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_APIFCODE.clear();
	PC_APIFSEQ.clear();
	PC_APIF_LASTUPD.clear();
	PC_APIHSUBPNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_APIFREC

// begin method functions
void PC_APIFREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_APIFREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_APIFREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_APIFREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_APIFREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIFCODE, PC_APIFSEQ, PC_APIF_LASTUPD, PC_APIHSUBPNO from PC_APIFREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_APIFREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_APIFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIFCODE, PC_APIFSEQ, PC_APIF_LASTUPD, PC_APIHSUBPNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_APIFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_APIFCODE = ?, PC_APIFSEQ = ?, PC_APIF_LASTUPD = ?, PC_APIHSUBPNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_APIFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIFCODE, PC_APIFSEQ, PC_APIF_LASTUPD, PC_APIHSUBPNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_APIFCODE, PC_APIFSEQ, PC_APIF_LASTUPD, PC_APIHSUBPNO from PC_APIFREC";
	qDebug(category) << "unsertSQL - update PC_APIFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_APIFCODE = ?, PC_APIFSEQ = ?, PC_APIF_LASTUPD = ?, PC_APIHSUBPNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_APIFREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_APIFREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_APIFCODE[2]";
	PC_APIFCODE.resize(2);
	qDebug(category) << "Malloc - PC_APIFSEQ[2]";
	PC_APIFSEQ.resize(2);
	qDebug(category) << "Malloc - PC_APIF_LASTUPD[23]";
	PC_APIF_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_APIHSUBPNO[16]";
	PC_APIHSUBPNO.resize(16);

#pragma endregion Resize Fields PC_APIFREC
}
void PC_APIFREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_APIFREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_APIFREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_APIFREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_APIFREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_APIFREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_APIFREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_APIFREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_APIFREC");
				createTable();
			}break;
		}
	}
}

bool PC_APIFREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_APIFCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, PC_APIFCODE.data(), 2, &cbPC_APIFCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_APIFSEQ ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_APIFSEQ.data(), 2, &cbPC_APIFSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_APIF_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_APIF_LASTUPD.data(), 23, &cbPC_APIF_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 16 FieldName: PC_APIHSUBPNO ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_APIHSUBPNO.data(), 16, &cbPC_APIHSUBPNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_APIFREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_APIFCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_APIFCODE.constData(), 0, &cbPC_APIFCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_APIFSEQ ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_APIFSEQ.constData(), 0, &cbPC_APIFSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_APIF_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_APIF_LASTUPD.constData(), 0, &cbPC_APIF_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 16 FieldName: PC_APIHSUBPNO ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 16, 0, (SQLPOINTER)PC_APIHSUBPNO.constData(), 0, &cbPC_APIHSUBPNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_APIFREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_APIFREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_APIFREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_APIFREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTSLTSET::PC_PRTSLTSET(QObject * parent) : QObject(parent) 
,tableName("PC_PRTSLTSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTSLTSET 
PC_PRTSLTSET::~PC_PRTSLTSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTSLTSET

// begin method functions
void PC_PRTSLTSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTSLTSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTSLTSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTSLTSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTSLTSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTSLTSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTSLTSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTSLTSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTSLTSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTSLTSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTSLTSET";
	qDebug(category) << "unsertSQL - update PC_PRTSLTSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PRTSLTSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTSLTSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PRTSLTSET
}
void PC_PRTSLTSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTSLTSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTSLTSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTSLTSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTSLTSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTSLTSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTSLTSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTSLTSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTSLTSET");
				createTable();
			}break;
		}
	}
}

bool PC_PRTSLTSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTSLTSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTSLTSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTSLTSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTSLTSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTSLTSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_SIFREC::PC_SIFREC(QObject * parent) : QObject(parent) 
,tableName("PC_SIFREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_SIFREC 
PC_SIFREC::~PC_SIFREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_SIFNO.clear();
	PC_INGRED.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_SIFREC

// begin method functions
void PC_SIFREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_SIFREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_SIFREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_SIFREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_SIFREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_SIFNO, PC_INGRED from PC_SIFREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_SIFREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_SIFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_SIFNO, PC_INGRED ) values ( ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_SIFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_SIFNO = ?, PC_INGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_SIFREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_SIFNO, PC_INGRED ) values ( ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_SIFNO, PC_INGRED from PC_SIFREC";
	qDebug(category) << "unsertSQL - update PC_SIFREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_SIFNO = ?, PC_INGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_SIFREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_SIFREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_SIFNO[16]";
	PC_SIFNO.resize(16);
	qDebug(category) << "Malloc - PC_INGRED[18]";
	PC_INGRED.resize(18);

#pragma endregion Resize Fields PC_SIFREC
}
void PC_SIFREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_SIFREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_SIFREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_SIFREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_SIFREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_SIFREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_SIFREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_SIFREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_SIFREC");
				createTable();
			}break;
		}
	}
}

bool PC_SIFREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_SIFNO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_SIFNO.data(), 16, &cbPC_SIFNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 18 FieldName: PC_INGRED ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_INGRED.data(), 18, &cbPC_INGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_SIFREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 16 FieldName: PC_SIFNO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 16, 0, (SQLPOINTER)PC_SIFNO.constData(), 0, &cbPC_SIFNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 18 FieldName: PC_INGRED ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_INGRED.constData(), 0, &cbPC_INGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_SIFREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_SIFREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_SIFREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_SIFREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MBODESREC::PC_MBODESREC(QObject * parent) : QObject(parent) 
,tableName("PC_MBODESREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MBODESREC 
PC_MBODESREC::~PC_MBODESREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_MBODESCODE.clear();
	PC_MBODESTEXT.clear();
	PC_MBODES_LASTUPD.clear();
	PC_MBOWIPACCT.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MBODESREC

// begin method functions
void PC_MBODESREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MBODESREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MBODESREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MBODESREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MBODESREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MBODESCODE, PC_MBODESTEXT, PC_MBODES_LASTUPD, PC_MBOWIPACCT from PC_MBODESREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MBODESREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MBODESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MBODESCODE, PC_MBODESTEXT, PC_MBODES_LASTUPD, PC_MBOWIPACCT ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MBODESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MBODESCODE = ?, PC_MBODESTEXT = ?, PC_MBODES_LASTUPD = ?, PC_MBOWIPACCT = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MBODESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MBODESCODE, PC_MBODESTEXT, PC_MBODES_LASTUPD, PC_MBOWIPACCT ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MBODESCODE, PC_MBODESTEXT, PC_MBODES_LASTUPD, PC_MBOWIPACCT from PC_MBODESREC";
	qDebug(category) << "unsertSQL - update PC_MBODESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MBODESCODE = ?, PC_MBODESTEXT = ?, PC_MBODES_LASTUPD = ?, PC_MBOWIPACCT = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_MBODESREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MBODESREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_MBODESCODE[10]";
	PC_MBODESCODE.resize(10);
	qDebug(category) << "Malloc - PC_MBODESTEXT[60]";
	PC_MBODESTEXT.resize(60);
	qDebug(category) << "Malloc - PC_MBODES_LASTUPD[23]";
	PC_MBODES_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_MBOWIPACCT[24]";
	PC_MBOWIPACCT.resize(24);

#pragma endregion Resize Fields PC_MBODESREC
}
void PC_MBODESREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MBODESREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MBODESREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MBODESREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MBODESREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MBODESREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MBODESREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MBODESREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MBODESREC");
				createTable();
			}break;
		}
	}
}

bool PC_MBODESREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_MBODESCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_MBODESCODE.data(), 10, &cbPC_MBODESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_MBODESTEXT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_MBODESTEXT.data(), 60, &cbPC_MBODESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_MBODES_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_MBODES_LASTUPD.data(), 23, &cbPC_MBODES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_MBOWIPACCT.data(), 24, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MBODESREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_MBODESCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_MBODESCODE.constData(), 0, &cbPC_MBODESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_MBODESTEXT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_MBODESTEXT.constData(), 0, &cbPC_MBODESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_MBODES_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_MBODES_LASTUPD.constData(), 0, &cbPC_MBODES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 24, 0, (SQLPOINTER)PC_MBOWIPACCT.constData(), 0, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MBODESREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MBODESREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MBODESREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MBODESREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MPIMPISAFSET::PC_MPIMPISAFSET(QObject * parent) : QObject(parent) 
,tableName("PC_MPIMPISAFSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MPIMPISAFSET 
PC_MPIMPISAFSET::~PC_MPIMPISAFSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MPIMPISAFSET

// begin method functions
void PC_MPIMPISAFSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MPIMPISAFSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MPIMPISAFSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MPIMPISAFSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MPIMPISAFSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MPIMPISAFSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MPIMPISAFSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MPIMPISAFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MPIMPISAFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MPIMPISAFSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MPIMPISAFSET";
	qDebug(category) << "unsertSQL - update PC_MPIMPISAFSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_MPIMPISAFSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MPIMPISAFSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_MPIMPISAFSET
}
void PC_MPIMPISAFSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MPIMPISAFSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MPIMPISAFSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MPIMPISAFSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MPIMPISAFSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MPIMPISAFSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MPIMPISAFSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MPIMPISAFSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MPIMPISAFSET");
				createTable();
			}break;
		}
	}
}

bool PC_MPIMPISAFSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MPIMPISAFSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MPIMPISAFSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MPIMPISAFSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MPIMPISAFSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MPIMPISAFSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_WOHREC::PC_WOHREC(QObject * parent) : QObject(parent) 
,tableName("PC_WOHREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_WOHREC 
PC_WOHREC::~PC_WOHREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_WOHNO.clear();
	PC_WOHPRT.clear();
	PC_WOH_LASTUPD.clear();
	PC_MBOWIPACCT.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_WOHREC

// begin method functions
void PC_WOHREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_WOHREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_WOHREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_WOHREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_WOHREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_WOHNO, PC_WOHPRT, PC_WOH_LASTUPD, PC_MBOWIPACCT from PC_WOHREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_WOHREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_WOHREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_WOHNO, PC_WOHPRT, PC_WOH_LASTUPD, PC_MBOWIPACCT ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_WOHREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_WOHNO = ?, PC_WOHPRT = ?, PC_WOH_LASTUPD = ?, PC_MBOWIPACCT = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_WOHREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_WOHNO, PC_WOHPRT, PC_WOH_LASTUPD, PC_MBOWIPACCT ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_WOHNO, PC_WOHPRT, PC_WOH_LASTUPD, PC_MBOWIPACCT from PC_WOHREC";
	qDebug(category) << "unsertSQL - update PC_WOHREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_WOHNO = ?, PC_WOHPRT = ?, PC_WOH_LASTUPD = ?, PC_MBOWIPACCT = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_WOHREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_WOHREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_WOHNO[10]";
	PC_WOHNO.resize(10);
	qDebug(category) << "Malloc - PC_WOHPRT[18]";
	PC_WOHPRT.resize(18);
	qDebug(category) << "Malloc - PC_WOH_LASTUPD[23]";
	PC_WOH_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_MBOWIPACCT[24]";
	PC_MBOWIPACCT.resize(24);

#pragma endregion Resize Fields PC_WOHREC
}
void PC_WOHREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_WOHREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_WOHREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_WOHREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_WOHREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_WOHREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_WOHREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_WOHREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_WOHREC");
				createTable();
			}break;
		}
	}
}

bool PC_WOHREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_WOHNO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_WOHNO.data(), 10, &cbPC_WOHNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 18 FieldName: PC_WOHPRT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_WOHPRT.data(), 18, &cbPC_WOHPRT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_WOH_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_WOH_LASTUPD.data(), 23, &cbPC_WOH_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_MBOWIPACCT.data(), 24, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_WOHREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_WOHNO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_WOHNO.constData(), 0, &cbPC_WOHNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 18 FieldName: PC_WOHPRT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_WOHPRT.constData(), 0, &cbPC_WOHPRT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_WOH_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_WOH_LASTUPD.constData(), 0, &cbPC_WOH_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 24, 0, (SQLPOINTER)PC_MBOWIPACCT.constData(), 0, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_WOHREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_WOHREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_WOHREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_WOHREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TRKNOTRKSET::PC_TRKNOTRKSET(QObject * parent) : QObject(parent) 
,tableName("PC_TRKNOTRKSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TRKNOTRKSET 
PC_TRKNOTRKSET::~PC_TRKNOTRKSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TRKNOTRKSET

// begin method functions
void PC_TRKNOTRKSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TRKNOTRKSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TRKNOTRKSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TRKNOTRKSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TRKNOTRKSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TRKNOTRKSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TRKNOTRKSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TRKNOTRKSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TRKNOTRKSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TRKNOTRKSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TRKNOTRKSET";
	qDebug(category) << "unsertSQL - update PC_TRKNOTRKSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_TRKNOTRKSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TRKNOTRKSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_TRKNOTRKSET
}
void PC_TRKNOTRKSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TRKNOTRKSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TRKNOTRKSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TRKNOTRKSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TRKNOTRKSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TRKNOTRKSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TRKNOTRKSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TRKNOTRKSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TRKNOTRKSET");
				createTable();
			}break;
		}
	}
}

bool PC_TRKNOTRKSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TRKNOTRKSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TRKNOTRKSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TRKNOTRKSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TRKNOTRKSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TRKNOTRKSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_APITTWUSET::PC_APITTWUSET(QObject * parent) : QObject(parent) 
,tableName("PC_APITTWUSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_APITTWUSET 
PC_APITTWUSET::~PC_APITTWUSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_APITTWUSET

// begin method functions
void PC_APITTWUSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_APITTWUSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_APITTWUSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_APITTWUSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_APITTWUSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APITTWUSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_APITTWUSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_APITTWUSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_APITTWUSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_APITTWUSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_APITTWUSET";
	qDebug(category) << "unsertSQL - update PC_APITTWUSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_APITTWUSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_APITTWUSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_APITTWUSET
}
void PC_APITTWUSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_APITTWUSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_APITTWUSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_APITTWUSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_APITTWUSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_APITTWUSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_APITTWUSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_APITTWUSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_APITTWUSET");
				createTable();
			}break;
		}
	}
}

bool PC_APITTWUSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_APITTWUSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_APITTWUSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_APITTWUSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_APITTWUSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_APITTWUSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_CATFRMSET::PC_CATFRMSET(QObject * parent) : QObject(parent) 
,tableName("PC_CATFRMSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_CATFRMSET 
PC_CATFRMSET::~PC_CATFRMSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_CATFRMSET

// begin method functions
void PC_CATFRMSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_CATFRMSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_CATFRMSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_CATFRMSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_CATFRMSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CATFRMSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_CATFRMSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_CATFRMSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_CATFRMSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_CATFRMSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_CATFRMSET";
	qDebug(category) << "unsertSQL - update PC_CATFRMSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_CATFRMSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_CATFRMSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_CATFRMSET
}
void PC_CATFRMSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_CATFRMSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_CATFRMSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_CATFRMSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_CATFRMSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_CATFRMSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_CATFRMSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_CATFRMSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_CATFRMSET");
				createTable();
			}break;
		}
	}
}

bool PC_CATFRMSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_CATFRMSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_CATFRMSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_CATFRMSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_CATFRMSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_CATFRMSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTINGSET::PC_PRTINGSET(QObject * parent) : QObject(parent) 
,tableName("PC_PRTINGSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTINGSET 
PC_PRTINGSET::~PC_PRTINGSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTINGSET

// begin method functions
void PC_PRTINGSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTINGSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTINGSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTINGSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTINGSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTINGSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTINGSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTINGSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTINGSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTINGSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PRTINGSET";
	qDebug(category) << "unsertSQL - update PC_PRTINGSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PRTINGSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTINGSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PRTINGSET
}
void PC_PRTINGSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTINGSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTINGSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTINGSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTINGSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTINGSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTINGSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTINGSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTINGSET");
				createTable();
			}break;
		}
	}
}

bool PC_PRTINGSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTINGSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTINGSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTINGSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTINGSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTINGSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PITWUSET::PC_PITWUSET(QObject * parent) : QObject(parent) 
,tableName("PC_PITWUSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PITWUSET 
PC_PITWUSET::~PC_PITWUSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PITWUSET

// begin method functions
void PC_PITWUSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PITWUSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PITWUSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PITWUSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PITWUSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PITWUSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PITWUSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PITWUSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PITWUSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PITWUSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PITWUSET";
	qDebug(category) << "unsertSQL - update PC_PITWUSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PITWUSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PITWUSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PITWUSET
}
void PC_PITWUSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PITWUSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PITWUSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PITWUSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PITWUSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PITWUSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PITWUSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PITWUSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PITWUSET");
				createTable();
			}break;
		}
	}
}

bool PC_PITWUSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PITWUSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PITWUSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PITWUSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PITWUSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PITWUSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PRTREC::PC_PRTREC(QObject * parent) : QObject(parent) 
,tableName("PC_PRTREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PRTREC 
PC_PRTREC::~PC_PRTREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_PRTNO.clear();
	PC_PRTNBFLG.clear();
	PC_PRTCSTFRM.clear();
	PC_PRTMSDS.clear();
	PC_PRT_LASTUPD.clear();
	PC_PRTACTSTAT.clear();
	PC_PRTACTDATE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PRTREC

// begin method functions
void PC_PRTREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PRTREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PRTREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PRTREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PRTREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_PRTNO, PC_PRTNBFLG, PC_PRTCSTFRM, PC_PRTMSDS, PC_PRT_LASTUPD, PC_PRTACTSTAT, PC_PRTACTDATE from PC_PRTREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PRTREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PRTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_PRTNO, PC_PRTNBFLG, PC_PRTCSTFRM, PC_PRTMSDS, PC_PRT_LASTUPD, PC_PRTACTSTAT, PC_PRTACTDATE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PRTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_PRTNO = ?, PC_PRTNBFLG = ?, PC_PRTCSTFRM = ?, PC_PRTMSDS = ?, PC_PRT_LASTUPD = ?, PC_PRTACTSTAT = ?, PC_PRTACTDATE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PRTREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_PRTNO, PC_PRTNBFLG, PC_PRTCSTFRM, PC_PRTMSDS, PC_PRT_LASTUPD, PC_PRTACTSTAT, PC_PRTACTDATE ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_PRTNO, PC_PRTNBFLG, PC_PRTCSTFRM, PC_PRTMSDS, PC_PRT_LASTUPD, PC_PRTACTSTAT, PC_PRTACTDATE from PC_PRTREC";
	qDebug(category) << "unsertSQL - update PC_PRTREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_PRTNO = ?, PC_PRTNBFLG = ?, PC_PRTCSTFRM = ?, PC_PRTMSDS = ?, PC_PRT_LASTUPD = ?, PC_PRTACTSTAT = ?, PC_PRTACTDATE = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_PRTREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PRTREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_PRTNO[18]";
	PC_PRTNO.resize(18);
	qDebug(category) << "Malloc - PC_PRTNBFLG[2]";
	PC_PRTNBFLG.resize(2);
	qDebug(category) << "Malloc - PC_PRTCSTFRM[20]";
	PC_PRTCSTFRM.resize(20);
	qDebug(category) << "Malloc - PC_PRTMSDS[10]";
	PC_PRTMSDS.resize(10);
	qDebug(category) << "Malloc - PC_PRT_LASTUPD[23]";
	PC_PRT_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_PRTACTSTAT[5]";
	PC_PRTACTSTAT.resize(5);
	qDebug(category) << "Malloc - PC_PRTACTDATE[4]";
	PC_PRTACTDATE.resize(4);

#pragma endregion Resize Fields PC_PRTREC
}
void PC_PRTREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PRTREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PRTREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PRTREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PRTREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PRTREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PRTREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PRTREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PRTREC");
				createTable();
			}break;
		}
	}
}

bool PC_PRTREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_PRTNO.data(), 18, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 2 FieldName: PC_PRTNBFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_PRTNBFLG.data(), 2, &cbPC_PRTNBFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 20 FieldName: PC_PRTCSTFRM ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_PRTCSTFRM.data(), 20, &cbPC_PRTCSTFRM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 10 FieldName: PC_PRTMSDS ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_PRTMSDS.data(), 10, &cbPC_PRTMSDS);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 1 Buffer Size: 23 FieldName: PC_PRT_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 1, PC_PRT_LASTUPD.data(), 23, &cbPC_PRT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 1 Buffer Size: 5 FieldName: PC_PRTACTSTAT ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 1, PC_PRTACTSTAT.data(), 5, &cbPC_PRTACTSTAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 4 Buffer Size: 4 FieldName: PC_PRTACTDATE ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 4, PC_PRTACTDATE.data(), 4, &cbPC_PRTACTDATE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PRTREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_PRTNO.constData(), 0, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 2 FieldName: PC_PRTNBFLG ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_PRTNBFLG.constData(), 0, &cbPC_PRTNBFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 20 FieldName: PC_PRTCSTFRM ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 20, 0, (SQLPOINTER)PC_PRTCSTFRM.constData(), 0, &cbPC_PRTCSTFRM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 10 FieldName: PC_PRTMSDS ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_PRTMSDS.constData(), 0, &cbPC_PRTMSDS);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 1 Buffer Size: 23 FieldName: PC_PRT_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_PRT_LASTUPD.constData(), 0, &cbPC_PRT_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 1 Buffer Size: 5 FieldName: PC_PRTACTSTAT ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 5, 0, (SQLPOINTER)PC_PRTACTSTAT.constData(), 0, &cbPC_PRTACTSTAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 4 Buffer Size: 4 FieldName: PC_PRTACTDATE ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_PRTACTDATE.constData(), 0, &cbPC_PRTACTDATE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PRTREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PRTREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PRTREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PRTREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PIREC::PC_PIREC(QObject * parent) : QObject(parent) 
,tableName("PC_PIREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PIREC 
PC_PIREC::~PC_PIREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_PICODE.clear();
	PC_PISEQ.clear();
	PC_PIEFDAT.clear();
	PC_PIINDAT.clear();
	PC_PICPFLG.clear();
	PC_PIPRUFLG.clear();
	PC_PITHR.clear();
	PC_PIOSHR.clear();
	PC_PIORHR.clear();
	PC_PISLSHR.clear();
	PC_PISLRHR.clear();
	PC_PISMSHR.clear();
	PC_PISMRHR.clear();
	PC_PIYLD.clear();
	PC_PISPROC.clear();
	PC_PIPLSHR.clear();
	PC_PIPLRHR.clear();
	PC_PIPMSHR.clear();
	PC_PIPMRHR.clear();
	PC_PIPYLD.clear();
	PC_PIPPROC.clear();
	PC_PIYSCMT.clear();
	PC_PIYSCMO.clear();
	PC_PIYSADL.clear();
	PC_PIYSCDL.clear();
	PC_PIYSAO1.clear();
	PC_PIYSCO1.clear();
	PC_PIYSAO2.clear();
	PC_PIYSCO2.clear();
	PC_PIYSAOP.clear();
	PC_PIYSCOP.clear();
	PC_PIYSAOO.clear();
	PC_PIYSCOO.clear();
	PC_PIYPCMT.clear();
	PC_PIYPCMO.clear();
	PC_PIYPADL.clear();
	PC_PIYPCDL.clear();
	PC_PIYPAO1.clear();
	PC_PIYPCO1.clear();
	PC_PIYPAO2.clear();
	PC_PIYPCO2.clear();
	PC_PIYPAOP.clear();
	PC_PIYPCOP.clear();
	PC_PIYPAOO.clear();
	PC_PIYPCOO.clear();
	PC_PIQUE.clear();
	PC_PI_LASTUPD.clear();
	PC_PIMSEQ.clear();
	PC_FRMNAME.clear();
	PC_WKCNTR.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PIREC

// begin method functions
void PC_PIREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PIREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PIREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PIREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PIREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_PICODE, PC_PISEQ, PC_PIEFDAT, PC_PIINDAT, PC_PICPFLG, PC_PIPRUFLG, PC_PITHR, PC_PIOSHR, PC_PIORHR, PC_PISLSHR, PC_PISLRHR, PC_PISMSHR, PC_PISMRHR, PC_PIYLD, PC_PISPROC, PC_PIPLSHR, PC_PIPLRHR, PC_PIPMSHR, PC_PIPMRHR, PC_PIPYLD, PC_PIPPROC, PC_PIYSCMT, PC_PIYSCMO, PC_PIYSADL, PC_PIYSCDL, PC_PIYSAO1, PC_PIYSCO1, PC_PIYSAO2, PC_PIYSCO2, PC_PIYSAOP, PC_PIYSCOP, PC_PIYSAOO, PC_PIYSCOO, PC_PIYPCMT, PC_PIYPCMO, PC_PIYPADL, PC_PIYPCDL, PC_PIYPAO1, PC_PIYPCO1, PC_PIYPAO2, PC_PIYPCO2, PC_PIYPAOP, PC_PIYPCOP, PC_PIYPAOO, PC_PIYPCOO, PC_PIQUE, PC_PI_LASTUPD, PC_PIMSEQ, PC_FRMNAME, PC_WKCNTR from PC_PIREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PIREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PIREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_PICODE, PC_PISEQ, PC_PIEFDAT, PC_PIINDAT, PC_PICPFLG, PC_PIPRUFLG, PC_PITHR, PC_PIOSHR, PC_PIORHR, PC_PISLSHR, PC_PISLRHR, PC_PISMSHR, PC_PISMRHR, PC_PIYLD, PC_PISPROC, PC_PIPLSHR, PC_PIPLRHR, PC_PIPMSHR, PC_PIPMRHR, PC_PIPYLD, PC_PIPPROC, PC_PIYSCMT, PC_PIYSCMO, PC_PIYSADL, PC_PIYSCDL, PC_PIYSAO1, PC_PIYSCO1, PC_PIYSAO2, PC_PIYSCO2, PC_PIYSAOP, PC_PIYSCOP, PC_PIYSAOO, PC_PIYSCOO, PC_PIYPCMT, PC_PIYPCMO, PC_PIYPADL, PC_PIYPCDL, PC_PIYPAO1, PC_PIYPCO1, PC_PIYPAO2, PC_PIYPCO2, PC_PIYPAOP, PC_PIYPCOP, PC_PIYPAOO, PC_PIYPCOO, PC_PIQUE, PC_PI_LASTUPD, PC_PIMSEQ, PC_FRMNAME, PC_WKCNTR ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PIREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_PICODE = ?, PC_PISEQ = ?, PC_PIEFDAT = ?, PC_PIINDAT = ?, PC_PICPFLG = ?, PC_PIPRUFLG = ?, PC_PITHR = ?, PC_PIOSHR = ?, PC_PIORHR = ?, PC_PISLSHR = ?, PC_PISLRHR = ?, PC_PISMSHR = ?, PC_PISMRHR = ?, PC_PIYLD = ?, PC_PISPROC = ?, PC_PIPLSHR = ?, PC_PIPLRHR = ?, PC_PIPMSHR = ?, PC_PIPMRHR = ?, PC_PIPYLD = ?, PC_PIPPROC = ?, PC_PIYSCMT = ?, PC_PIYSCMO = ?, PC_PIYSADL = ?, PC_PIYSCDL = ?, PC_PIYSAO1 = ?, PC_PIYSCO1 = ?, PC_PIYSAO2 = ?, PC_PIYSCO2 = ?, PC_PIYSAOP = ?, PC_PIYSCOP = ?, PC_PIYSAOO = ?, PC_PIYSCOO = ?, PC_PIYPCMT = ?, PC_PIYPCMO = ?, PC_PIYPADL = ?, PC_PIYPCDL = ?, PC_PIYPAO1 = ?, PC_PIYPCO1 = ?, PC_PIYPAO2 = ?, PC_PIYPCO2 = ?, PC_PIYPAOP = ?, PC_PIYPCOP = ?, PC_PIYPAOO = ?, PC_PIYPCOO = ?, PC_PIQUE = ?, PC_PI_LASTUPD = ?, PC_PIMSEQ = ?, PC_FRMNAME = ?, PC_WKCNTR = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PIREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_PICODE, PC_PISEQ, PC_PIEFDAT, PC_PIINDAT, PC_PICPFLG, PC_PIPRUFLG, PC_PITHR, PC_PIOSHR, PC_PIORHR, PC_PISLSHR, PC_PISLRHR, PC_PISMSHR, PC_PISMRHR, PC_PIYLD, PC_PISPROC, PC_PIPLSHR, PC_PIPLRHR, PC_PIPMSHR, PC_PIPMRHR, PC_PIPYLD, PC_PIPPROC, PC_PIYSCMT, PC_PIYSCMO, PC_PIYSADL, PC_PIYSCDL, PC_PIYSAO1, PC_PIYSCO1, PC_PIYSAO2, PC_PIYSCO2, PC_PIYSAOP, PC_PIYSCOP, PC_PIYSAOO, PC_PIYSCOO, PC_PIYPCMT, PC_PIYPCMO, PC_PIYPADL, PC_PIYPCDL, PC_PIYPAO1, PC_PIYPCO1, PC_PIYPAO2, PC_PIYPCO2, PC_PIYPAOP, PC_PIYPCOP, PC_PIYPAOO, PC_PIYPCOO, PC_PIQUE, PC_PI_LASTUPD, PC_PIMSEQ, PC_FRMNAME, PC_WKCNTR ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_PICODE, PC_PISEQ, PC_PIEFDAT, PC_PIINDAT, PC_PICPFLG, PC_PIPRUFLG, PC_PITHR, PC_PIOSHR, PC_PIORHR, PC_PISLSHR, PC_PISLRHR, PC_PISMSHR, PC_PISMRHR, PC_PIYLD, PC_PISPROC, PC_PIPLSHR, PC_PIPLRHR, PC_PIPMSHR, PC_PIPMRHR, PC_PIPYLD, PC_PIPPROC, PC_PIYSCMT, PC_PIYSCMO, PC_PIYSADL, PC_PIYSCDL, PC_PIYSAO1, PC_PIYSCO1, PC_PIYSAO2, PC_PIYSCO2, PC_PIYSAOP, PC_PIYSCOP, PC_PIYSAOO, PC_PIYSCOO, PC_PIYPCMT, PC_PIYPCMO, PC_PIYPADL, PC_PIYPCDL, PC_PIYPAO1, PC_PIYPCO1, PC_PIYPAO2, PC_PIYPCO2, PC_PIYPAOP, PC_PIYPCOP, PC_PIYPAOO, PC_PIYPCOO, PC_PIQUE, PC_PI_LASTUPD, PC_PIMSEQ, PC_FRMNAME, PC_WKCNTR from PC_PIREC";
	qDebug(category) << "unsertSQL - update PC_PIREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_PICODE = ?, PC_PISEQ = ?, PC_PIEFDAT = ?, PC_PIINDAT = ?, PC_PICPFLG = ?, PC_PIPRUFLG = ?, PC_PITHR = ?, PC_PIOSHR = ?, PC_PIORHR = ?, PC_PISLSHR = ?, PC_PISLRHR = ?, PC_PISMSHR = ?, PC_PISMRHR = ?, PC_PIYLD = ?, PC_PISPROC = ?, PC_PIPLSHR = ?, PC_PIPLRHR = ?, PC_PIPMSHR = ?, PC_PIPMRHR = ?, PC_PIPYLD = ?, PC_PIPPROC = ?, PC_PIYSCMT = ?, PC_PIYSCMO = ?, PC_PIYSADL = ?, PC_PIYSCDL = ?, PC_PIYSAO1 = ?, PC_PIYSCO1 = ?, PC_PIYSAO2 = ?, PC_PIYSCO2 = ?, PC_PIYSAOP = ?, PC_PIYSCOP = ?, PC_PIYSAOO = ?, PC_PIYSCOO = ?, PC_PIYPCMT = ?, PC_PIYPCMO = ?, PC_PIYPADL = ?, PC_PIYPCDL = ?, PC_PIYPAO1 = ?, PC_PIYPCO1 = ?, PC_PIYPAO2 = ?, PC_PIYPCO2 = ?, PC_PIYPAOP = ?, PC_PIYPCOP = ?, PC_PIYPAOO = ?, PC_PIYPCOO = ?, PC_PIQUE = ?, PC_PI_LASTUPD = ?, PC_PIMSEQ = ?, PC_FRMNAME = ?, PC_WKCNTR = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_PIREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PIREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_PICODE[2]";
	PC_PICODE.resize(2);
	qDebug(category) << "Malloc - PC_PISEQ[2]";
	PC_PISEQ.resize(2);
	qDebug(category) << "Malloc - PC_PIEFDAT[4]";
	PC_PIEFDAT.resize(4);
	qDebug(category) << "Malloc - PC_PIINDAT[4]";
	PC_PIINDAT.resize(4);
	qDebug(category) << "Malloc - PC_PICPFLG[2]";
	PC_PICPFLG.resize(2);
	qDebug(category) << "Malloc - PC_PIPRUFLG[2]";
	PC_PIPRUFLG.resize(2);
	qDebug(category) << "Malloc - PC_PITHR[8]";
	PC_PITHR.resize(8);
	qDebug(category) << "Malloc - PC_PIOSHR[8]";
	PC_PIOSHR.resize(8);
	qDebug(category) << "Malloc - PC_PIORHR[8]";
	PC_PIORHR.resize(8);
	qDebug(category) << "Malloc - PC_PISLSHR[8]";
	PC_PISLSHR.resize(8);
	qDebug(category) << "Malloc - PC_PISLRHR[8]";
	PC_PISLRHR.resize(8);
	qDebug(category) << "Malloc - PC_PISMSHR[8]";
	PC_PISMSHR.resize(8);
	qDebug(category) << "Malloc - PC_PISMRHR[8]";
	PC_PISMRHR.resize(8);
	qDebug(category) << "Malloc - PC_PIYLD[8]";
	PC_PIYLD.resize(8);
	qDebug(category) << "Malloc - PC_PISPROC[8]";
	PC_PISPROC.resize(8);
	qDebug(category) << "Malloc - PC_PIPLSHR[8]";
	PC_PIPLSHR.resize(8);
	qDebug(category) << "Malloc - PC_PIPLRHR[8]";
	PC_PIPLRHR.resize(8);
	qDebug(category) << "Malloc - PC_PIPMSHR[8]";
	PC_PIPMSHR.resize(8);
	qDebug(category) << "Malloc - PC_PIPMRHR[8]";
	PC_PIPMRHR.resize(8);
	qDebug(category) << "Malloc - PC_PIPYLD[8]";
	PC_PIPYLD.resize(8);
	qDebug(category) << "Malloc - PC_PIPPROC[8]";
	PC_PIPPROC.resize(8);
	qDebug(category) << "Malloc - PC_PIYSCMT[8]";
	PC_PIYSCMT.resize(8);
	qDebug(category) << "Malloc - PC_PIYSCMO[8]";
	PC_PIYSCMO.resize(8);
	qDebug(category) << "Malloc - PC_PIYSADL[8]";
	PC_PIYSADL.resize(8);
	qDebug(category) << "Malloc - PC_PIYSCDL[8]";
	PC_PIYSCDL.resize(8);
	qDebug(category) << "Malloc - PC_PIYSAO1[8]";
	PC_PIYSAO1.resize(8);
	qDebug(category) << "Malloc - PC_PIYSCO1[8]";
	PC_PIYSCO1.resize(8);
	qDebug(category) << "Malloc - PC_PIYSAO2[8]";
	PC_PIYSAO2.resize(8);
	qDebug(category) << "Malloc - PC_PIYSCO2[8]";
	PC_PIYSCO2.resize(8);
	qDebug(category) << "Malloc - PC_PIYSAOP[8]";
	PC_PIYSAOP.resize(8);
	qDebug(category) << "Malloc - PC_PIYSCOP[8]";
	PC_PIYSCOP.resize(8);
	qDebug(category) << "Malloc - PC_PIYSAOO[8]";
	PC_PIYSAOO.resize(8);
	qDebug(category) << "Malloc - PC_PIYSCOO[8]";
	PC_PIYSCOO.resize(8);
	qDebug(category) << "Malloc - PC_PIYPCMT[8]";
	PC_PIYPCMT.resize(8);
	qDebug(category) << "Malloc - PC_PIYPCMO[8]";
	PC_PIYPCMO.resize(8);
	qDebug(category) << "Malloc - PC_PIYPADL[8]";
	PC_PIYPADL.resize(8);
	qDebug(category) << "Malloc - PC_PIYPCDL[8]";
	PC_PIYPCDL.resize(8);
	qDebug(category) << "Malloc - PC_PIYPAO1[8]";
	PC_PIYPAO1.resize(8);
	qDebug(category) << "Malloc - PC_PIYPCO1[8]";
	PC_PIYPCO1.resize(8);
	qDebug(category) << "Malloc - PC_PIYPAO2[8]";
	PC_PIYPAO2.resize(8);
	qDebug(category) << "Malloc - PC_PIYPCO2[8]";
	PC_PIYPCO2.resize(8);
	qDebug(category) << "Malloc - PC_PIYPAOP[8]";
	PC_PIYPAOP.resize(8);
	qDebug(category) << "Malloc - PC_PIYPCOP[8]";
	PC_PIYPCOP.resize(8);
	qDebug(category) << "Malloc - PC_PIYPAOO[8]";
	PC_PIYPAOO.resize(8);
	qDebug(category) << "Malloc - PC_PIYPCOO[8]";
	PC_PIYPCOO.resize(8);
	qDebug(category) << "Malloc - PC_PIQUE[10]";
	PC_PIQUE.resize(10);
	qDebug(category) << "Malloc - PC_PI_LASTUPD[23]";
	PC_PI_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_PIMSEQ[2]";
	PC_PIMSEQ.resize(2);
	qDebug(category) << "Malloc - PC_FRMNAME[20]";
	PC_FRMNAME.resize(20);
	qDebug(category) << "Malloc - PC_WKCNTR[10]";
	PC_WKCNTR.resize(10);

#pragma endregion Resize Fields PC_PIREC
}
void PC_PIREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PIREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PIREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PIREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PIREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PIREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PIREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PIREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PIREC");
				createTable();
			}break;
		}
	}
}

bool PC_PIREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_PICODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, PC_PICODE.data(), 2, &cbPC_PICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_PISEQ ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_PISEQ.data(), 2, &cbPC_PISEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 4 Buffer Size: 4 FieldName: PC_PIEFDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 4, PC_PIEFDAT.data(), 4, &cbPC_PIEFDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 4 Buffer Size: 4 FieldName: PC_PIINDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 4, PC_PIINDAT.data(), 4, &cbPC_PIINDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 5 Buffer Size: 2 FieldName: PC_PICPFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 5, PC_PICPFLG.data(), 2, &cbPC_PICPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_PIPRUFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 5, PC_PIPRUFLG.data(), 2, &cbPC_PIPRUFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_PITHR ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 8, PC_PITHR.data(), 8, &cbPC_PITHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 8 Buffer Size: 8 FieldName: PC_PIOSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 8, PC_PIOSHR.data(), 8, &cbPC_PIOSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_PIORHR ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 8, PC_PIORHR.data(), 8, &cbPC_PIORHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_PISLSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 8, PC_PISLSHR.data(), 8, &cbPC_PISLSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_PISLRHR ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 8, PC_PISLRHR.data(), 8, &cbPC_PISLRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_PISMSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 8, PC_PISMSHR.data(), 8, &cbPC_PISMSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 8 Buffer Size: 8 FieldName: PC_PISMRHR ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 8, PC_PISMRHR.data(), 8, &cbPC_PISMRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 8 Buffer Size: 8 FieldName: PC_PIYLD ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 8, PC_PIYLD.data(), 8, &cbPC_PIYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [20] Type: 8 Buffer Size: 8 FieldName: PC_PISPROC ";
		r = ::SQLBindCol(hStmt_Fetch, 20, 8, PC_PISPROC.data(), 8, &cbPC_PISPROC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [21] Type: 8 Buffer Size: 8 FieldName: PC_PIPLSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 21, 8, PC_PIPLSHR.data(), 8, &cbPC_PIPLSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_PIPLRHR ";
		r = ::SQLBindCol(hStmt_Fetch, 22, 8, PC_PIPLRHR.data(), 8, &cbPC_PIPLRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [23] Type: 8 Buffer Size: 8 FieldName: PC_PIPMSHR ";
		r = ::SQLBindCol(hStmt_Fetch, 23, 8, PC_PIPMSHR.data(), 8, &cbPC_PIPMSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_PIPMRHR ";
		r = ::SQLBindCol(hStmt_Fetch, 24, 8, PC_PIPMRHR.data(), 8, &cbPC_PIPMRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [25] Type: 8 Buffer Size: 8 FieldName: PC_PIPYLD ";
		r = ::SQLBindCol(hStmt_Fetch, 25, 8, PC_PIPYLD.data(), 8, &cbPC_PIPYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [26] Type: 8 Buffer Size: 8 FieldName: PC_PIPPROC ";
		r = ::SQLBindCol(hStmt_Fetch, 26, 8, PC_PIPPROC.data(), 8, &cbPC_PIPPROC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [27] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCMT ";
		r = ::SQLBindCol(hStmt_Fetch, 27, 8, PC_PIYSCMT.data(), 8, &cbPC_PIYSCMT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [28] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCMO ";
		r = ::SQLBindCol(hStmt_Fetch, 28, 8, PC_PIYSCMO.data(), 8, &cbPC_PIYSCMO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [29] Type: 8 Buffer Size: 8 FieldName: PC_PIYSADL ";
		r = ::SQLBindCol(hStmt_Fetch, 29, 8, PC_PIYSADL.data(), 8, &cbPC_PIYSADL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [30] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCDL ";
		r = ::SQLBindCol(hStmt_Fetch, 30, 8, PC_PIYSCDL.data(), 8, &cbPC_PIYSCDL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [31] Type: 8 Buffer Size: 8 FieldName: PC_PIYSAO1 ";
		r = ::SQLBindCol(hStmt_Fetch, 31, 8, PC_PIYSAO1.data(), 8, &cbPC_PIYSAO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [32] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCO1 ";
		r = ::SQLBindCol(hStmt_Fetch, 32, 8, PC_PIYSCO1.data(), 8, &cbPC_PIYSCO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [33] Type: 8 Buffer Size: 8 FieldName: PC_PIYSAO2 ";
		r = ::SQLBindCol(hStmt_Fetch, 33, 8, PC_PIYSAO2.data(), 8, &cbPC_PIYSAO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [34] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCO2 ";
		r = ::SQLBindCol(hStmt_Fetch, 34, 8, PC_PIYSCO2.data(), 8, &cbPC_PIYSCO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [35] Type: 8 Buffer Size: 8 FieldName: PC_PIYSAOP ";
		r = ::SQLBindCol(hStmt_Fetch, 35, 8, PC_PIYSAOP.data(), 8, &cbPC_PIYSAOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [36] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCOP ";
		r = ::SQLBindCol(hStmt_Fetch, 36, 8, PC_PIYSCOP.data(), 8, &cbPC_PIYSCOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [37] Type: 8 Buffer Size: 8 FieldName: PC_PIYSAOO ";
		r = ::SQLBindCol(hStmt_Fetch, 37, 8, PC_PIYSAOO.data(), 8, &cbPC_PIYSAOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [38] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCOO ";
		r = ::SQLBindCol(hStmt_Fetch, 38, 8, PC_PIYSCOO.data(), 8, &cbPC_PIYSCOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [39] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCMT ";
		r = ::SQLBindCol(hStmt_Fetch, 39, 8, PC_PIYPCMT.data(), 8, &cbPC_PIYPCMT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [40] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCMO ";
		r = ::SQLBindCol(hStmt_Fetch, 40, 8, PC_PIYPCMO.data(), 8, &cbPC_PIYPCMO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [41] Type: 8 Buffer Size: 8 FieldName: PC_PIYPADL ";
		r = ::SQLBindCol(hStmt_Fetch, 41, 8, PC_PIYPADL.data(), 8, &cbPC_PIYPADL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [42] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCDL ";
		r = ::SQLBindCol(hStmt_Fetch, 42, 8, PC_PIYPCDL.data(), 8, &cbPC_PIYPCDL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [43] Type: 8 Buffer Size: 8 FieldName: PC_PIYPAO1 ";
		r = ::SQLBindCol(hStmt_Fetch, 43, 8, PC_PIYPAO1.data(), 8, &cbPC_PIYPAO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [44] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCO1 ";
		r = ::SQLBindCol(hStmt_Fetch, 44, 8, PC_PIYPCO1.data(), 8, &cbPC_PIYPCO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [45] Type: 8 Buffer Size: 8 FieldName: PC_PIYPAO2 ";
		r = ::SQLBindCol(hStmt_Fetch, 45, 8, PC_PIYPAO2.data(), 8, &cbPC_PIYPAO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [46] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCO2 ";
		r = ::SQLBindCol(hStmt_Fetch, 46, 8, PC_PIYPCO2.data(), 8, &cbPC_PIYPCO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [47] Type: 8 Buffer Size: 8 FieldName: PC_PIYPAOP ";
		r = ::SQLBindCol(hStmt_Fetch, 47, 8, PC_PIYPAOP.data(), 8, &cbPC_PIYPAOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [48] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCOP ";
		r = ::SQLBindCol(hStmt_Fetch, 48, 8, PC_PIYPCOP.data(), 8, &cbPC_PIYPCOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [49] Type: 8 Buffer Size: 8 FieldName: PC_PIYPAOO ";
		r = ::SQLBindCol(hStmt_Fetch, 49, 8, PC_PIYPAOO.data(), 8, &cbPC_PIYPAOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [50] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCOO ";
		r = ::SQLBindCol(hStmt_Fetch, 50, 8, PC_PIYPCOO.data(), 8, &cbPC_PIYPCOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [51] Type: 1 Buffer Size: 10 FieldName: PC_PIQUE ";
		r = ::SQLBindCol(hStmt_Fetch, 51, 1, PC_PIQUE.data(), 10, &cbPC_PIQUE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [52] Type: 1 Buffer Size: 23 FieldName: PC_PI_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 52, 1, PC_PI_LASTUPD.data(), 23, &cbPC_PI_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [53] Type: 5 Buffer Size: 2 FieldName: PC_PIMSEQ ";
		r = ::SQLBindCol(hStmt_Fetch, 53, 5, PC_PIMSEQ.data(), 2, &cbPC_PIMSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [54] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 54, 1, PC_FRMNAME.data(), 20, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [55] Type: 1 Buffer Size: 10 FieldName: PC_WKCNTR ";
		r = ::SQLBindCol(hStmt_Fetch, 55, 1, PC_WKCNTR.data(), 10, &cbPC_WKCNTR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PIREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: PC_PICODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_PICODE.constData(), 0, &cbPC_PICODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_PISEQ ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_PISEQ.constData(), 0, &cbPC_PISEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 4 Buffer Size: 4 FieldName: PC_PIEFDAT ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_PIEFDAT.constData(), 0, &cbPC_PIEFDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 4 Buffer Size: 4 FieldName: PC_PIINDAT ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_PIINDAT.constData(), 0, &cbPC_PIINDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 5 Buffer Size: 2 FieldName: PC_PICPFLG ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_PICPFLG.constData(), 0, &cbPC_PICPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_PIPRUFLG ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_PIPRUFLG.constData(), 0, &cbPC_PIPRUFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_PITHR ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PITHR.constData(), 0, &cbPC_PITHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 8 Buffer Size: 8 FieldName: PC_PIOSHR ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIOSHR.constData(), 0, &cbPC_PIOSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_PIORHR ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIORHR.constData(), 0, &cbPC_PIORHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_PISLSHR ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PISLSHR.constData(), 0, &cbPC_PISLSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_PISLRHR ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PISLRHR.constData(), 0, &cbPC_PISLRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_PISMSHR ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PISMSHR.constData(), 0, &cbPC_PISMSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 8 Buffer Size: 8 FieldName: PC_PISMRHR ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PISMRHR.constData(), 0, &cbPC_PISMRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 8 Buffer Size: 8 FieldName: PC_PIYLD ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYLD.constData(), 0, &cbPC_PIYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [20] Type: 8 Buffer Size: 8 FieldName: PC_PISPROC ";
		r = SQLBindParameter(hStmt_Insert, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PISPROC.constData(), 0, &cbPC_PISPROC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [21] Type: 8 Buffer Size: 8 FieldName: PC_PIPLSHR ";
		r = SQLBindParameter(hStmt_Insert, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIPLSHR.constData(), 0, &cbPC_PIPLSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_PIPLRHR ";
		r = SQLBindParameter(hStmt_Insert, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIPLRHR.constData(), 0, &cbPC_PIPLRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [23] Type: 8 Buffer Size: 8 FieldName: PC_PIPMSHR ";
		r = SQLBindParameter(hStmt_Insert, 23, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIPMSHR.constData(), 0, &cbPC_PIPMSHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [24] Type: 8 Buffer Size: 8 FieldName: PC_PIPMRHR ";
		r = SQLBindParameter(hStmt_Insert, 24, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIPMRHR.constData(), 0, &cbPC_PIPMRHR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [25] Type: 8 Buffer Size: 8 FieldName: PC_PIPYLD ";
		r = SQLBindParameter(hStmt_Insert, 25, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIPYLD.constData(), 0, &cbPC_PIPYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [26] Type: 8 Buffer Size: 8 FieldName: PC_PIPPROC ";
		r = SQLBindParameter(hStmt_Insert, 26, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIPPROC.constData(), 0, &cbPC_PIPPROC);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [27] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCMT ";
		r = SQLBindParameter(hStmt_Insert, 27, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSCMT.constData(), 0, &cbPC_PIYSCMT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [28] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCMO ";
		r = SQLBindParameter(hStmt_Insert, 28, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSCMO.constData(), 0, &cbPC_PIYSCMO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [29] Type: 8 Buffer Size: 8 FieldName: PC_PIYSADL ";
		r = SQLBindParameter(hStmt_Insert, 29, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSADL.constData(), 0, &cbPC_PIYSADL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [30] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCDL ";
		r = SQLBindParameter(hStmt_Insert, 30, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSCDL.constData(), 0, &cbPC_PIYSCDL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [31] Type: 8 Buffer Size: 8 FieldName: PC_PIYSAO1 ";
		r = SQLBindParameter(hStmt_Insert, 31, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSAO1.constData(), 0, &cbPC_PIYSAO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [32] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCO1 ";
		r = SQLBindParameter(hStmt_Insert, 32, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSCO1.constData(), 0, &cbPC_PIYSCO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [33] Type: 8 Buffer Size: 8 FieldName: PC_PIYSAO2 ";
		r = SQLBindParameter(hStmt_Insert, 33, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSAO2.constData(), 0, &cbPC_PIYSAO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [34] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCO2 ";
		r = SQLBindParameter(hStmt_Insert, 34, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSCO2.constData(), 0, &cbPC_PIYSCO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [35] Type: 8 Buffer Size: 8 FieldName: PC_PIYSAOP ";
		r = SQLBindParameter(hStmt_Insert, 35, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSAOP.constData(), 0, &cbPC_PIYSAOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [36] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCOP ";
		r = SQLBindParameter(hStmt_Insert, 36, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSCOP.constData(), 0, &cbPC_PIYSCOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [37] Type: 8 Buffer Size: 8 FieldName: PC_PIYSAOO ";
		r = SQLBindParameter(hStmt_Insert, 37, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSAOO.constData(), 0, &cbPC_PIYSAOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [38] Type: 8 Buffer Size: 8 FieldName: PC_PIYSCOO ";
		r = SQLBindParameter(hStmt_Insert, 38, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYSCOO.constData(), 0, &cbPC_PIYSCOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [39] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCMT ";
		r = SQLBindParameter(hStmt_Insert, 39, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPCMT.constData(), 0, &cbPC_PIYPCMT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [40] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCMO ";
		r = SQLBindParameter(hStmt_Insert, 40, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPCMO.constData(), 0, &cbPC_PIYPCMO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [41] Type: 8 Buffer Size: 8 FieldName: PC_PIYPADL ";
		r = SQLBindParameter(hStmt_Insert, 41, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPADL.constData(), 0, &cbPC_PIYPADL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [42] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCDL ";
		r = SQLBindParameter(hStmt_Insert, 42, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPCDL.constData(), 0, &cbPC_PIYPCDL);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [43] Type: 8 Buffer Size: 8 FieldName: PC_PIYPAO1 ";
		r = SQLBindParameter(hStmt_Insert, 43, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPAO1.constData(), 0, &cbPC_PIYPAO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [44] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCO1 ";
		r = SQLBindParameter(hStmt_Insert, 44, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPCO1.constData(), 0, &cbPC_PIYPCO1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [45] Type: 8 Buffer Size: 8 FieldName: PC_PIYPAO2 ";
		r = SQLBindParameter(hStmt_Insert, 45, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPAO2.constData(), 0, &cbPC_PIYPAO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [46] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCO2 ";
		r = SQLBindParameter(hStmt_Insert, 46, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPCO2.constData(), 0, &cbPC_PIYPCO2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [47] Type: 8 Buffer Size: 8 FieldName: PC_PIYPAOP ";
		r = SQLBindParameter(hStmt_Insert, 47, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPAOP.constData(), 0, &cbPC_PIYPAOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [48] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCOP ";
		r = SQLBindParameter(hStmt_Insert, 48, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPCOP.constData(), 0, &cbPC_PIYPCOP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [49] Type: 8 Buffer Size: 8 FieldName: PC_PIYPAOO ";
		r = SQLBindParameter(hStmt_Insert, 49, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPAOO.constData(), 0, &cbPC_PIYPAOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [50] Type: 8 Buffer Size: 8 FieldName: PC_PIYPCOO ";
		r = SQLBindParameter(hStmt_Insert, 50, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_PIYPCOO.constData(), 0, &cbPC_PIYPCOO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [51] Type: 1 Buffer Size: 10 FieldName: PC_PIQUE ";
		r = SQLBindParameter(hStmt_Insert, 51, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_PIQUE.constData(), 0, &cbPC_PIQUE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [52] Type: 1 Buffer Size: 23 FieldName: PC_PI_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 52, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_PI_LASTUPD.constData(), 0, &cbPC_PI_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [53] Type: 5 Buffer Size: 2 FieldName: PC_PIMSEQ ";
		r = SQLBindParameter(hStmt_Insert, 53, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_PIMSEQ.constData(), 0, &cbPC_PIMSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [54] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = SQLBindParameter(hStmt_Insert, 54, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 20, 0, (SQLPOINTER)PC_FRMNAME.constData(), 0, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [55] Type: 1 Buffer Size: 10 FieldName: PC_WKCNTR ";
		r = SQLBindParameter(hStmt_Insert, 55, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_WKCNTR.constData(), 0, &cbPC_WKCNTR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 56, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 57, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 58, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PIREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PIREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PIREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PIREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MPIMPIDESSET::PC_MPIMPIDESSET(QObject * parent) : QObject(parent) 
,tableName("PC_MPIMPIDESSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MPIMPIDESSET 
PC_MPIMPIDESSET::~PC_MPIMPIDESSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MPIMPIDESSET

// begin method functions
void PC_MPIMPIDESSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MPIMPIDESSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MPIMPIDESSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MPIMPIDESSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MPIMPIDESSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MPIMPIDESSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MPIMPIDESSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MPIMPIDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MPIMPIDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MPIMPIDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_MPIMPIDESSET";
	qDebug(category) << "unsertSQL - update PC_MPIMPIDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_MPIMPIDESSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MPIMPIDESSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_MPIMPIDESSET
}
void PC_MPIMPIDESSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MPIMPIDESSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MPIMPIDESSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MPIMPIDESSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MPIMPIDESSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MPIMPIDESSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MPIMPIDESSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MPIMPIDESSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MPIMPIDESSET");
				createTable();
			}break;
		}
	}
}

bool PC_MPIMPIDESSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MPIMPIDESSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MPIMPIDESSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MPIMPIDESSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MPIMPIDESSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MPIMPIDESSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_ADTASTPSET::PC_ADTASTPSET(QObject * parent) : QObject(parent) 
,tableName("PC_ADTASTPSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_ADTASTPSET 
PC_ADTASTPSET::~PC_ADTASTPSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_ADTASTPSET

// begin method functions
void PC_ADTASTPSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_ADTASTPSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_ADTASTPSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_ADTASTPSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_ADTASTPSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_ADTASTPSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_ADTASTPSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_ADTASTPSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_ADTASTPSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_ADTASTPSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_ADTASTPSET";
	qDebug(category) << "unsertSQL - update PC_ADTASTPSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_ADTASTPSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_ADTASTPSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_ADTASTPSET
}
void PC_ADTASTPSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_ADTASTPSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_ADTASTPSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_ADTASTPSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_ADTASTPSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_ADTASTPSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_ADTASTPSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_ADTASTPSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_ADTASTPSET");
				createTable();
			}break;
		}
	}
}

bool PC_ADTASTPSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_ADTASTPSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_ADTASTPSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_ADTASTPSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_ADTASTPSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_ADTASTPSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FRMPISET::PC_FRMPISET(QObject * parent) : QObject(parent) 
,tableName("PC_FRMPISET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FRMPISET 
PC_FRMPISET::~PC_FRMPISET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FRMPISET

// begin method functions
void PC_FRMPISET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FRMPISET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FRMPISET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FRMPISET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FRMPISET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMPISET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FRMPISET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FRMPISET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FRMPISET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FRMPISET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_FRMPISET";
	qDebug(category) << "unsertSQL - update PC_FRMPISET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_FRMPISET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FRMPISET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_FRMPISET
}
void PC_FRMPISET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FRMPISET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FRMPISET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FRMPISET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FRMPISET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FRMPISET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FRMPISET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FRMPISET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FRMPISET");
				createTable();
			}break;
		}
	}
}

bool PC_FRMPISET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FRMPISET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FRMPISET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FRMPISET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FRMPISET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FRMPISET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_IXHSHSET::PC_IXHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_IXHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_IXHSHSET 
PC_IXHSHSET::~PC_IXHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_IXHSHSET

// begin method functions
void PC_IXHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_IXHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_IXHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_IXHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_IXHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_IXHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_IXHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_IXHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_IXHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_IXHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_IXHSHSET";
	qDebug(category) << "unsertSQL - update PC_IXHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_IXHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_IXHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_IXHSHSET
}
void PC_IXHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_IXHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_IXHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_IXHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_IXHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_IXHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_IXHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_IXHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_IXHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_IXHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_IXHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_IXHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_IXHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_IXHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_IXHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_FRMPVREC::PC_FRMPVREC(QObject * parent) : QObject(parent) 
,tableName("PC_FRMPVREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_FRMPVREC 
PC_FRMPVREC::~PC_FRMPVREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_FRMPVUSR.clear();
	PC_FRMPVIXFLG.clear();
	PC_FRMPVCAT.clear();
	PC_FRMPV_LASTUPD.clear();
	PC_USRNAME.clear();
	PC_CATEGORY.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_FRMPVREC

// begin method functions
void PC_FRMPVREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_FRMPVREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_FRMPVREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_FRMPVREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_FRMPVREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_FRMPVUSR, PC_FRMPVIXFLG, PC_FRMPVCAT, PC_FRMPV_LASTUPD, PC_USRNAME, PC_CATEGORY from PC_FRMPVREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_FRMPVREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_FRMPVREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_FRMPVUSR, PC_FRMPVIXFLG, PC_FRMPVCAT, PC_FRMPV_LASTUPD, PC_USRNAME, PC_CATEGORY ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_FRMPVREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_FRMPVUSR = ?, PC_FRMPVIXFLG = ?, PC_FRMPVCAT = ?, PC_FRMPV_LASTUPD = ?, PC_USRNAME = ?, PC_CATEGORY = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_FRMPVREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_FRMPVUSR, PC_FRMPVIXFLG, PC_FRMPVCAT, PC_FRMPV_LASTUPD, PC_USRNAME, PC_CATEGORY ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_FRMPVUSR, PC_FRMPVIXFLG, PC_FRMPVCAT, PC_FRMPV_LASTUPD, PC_USRNAME, PC_CATEGORY from PC_FRMPVREC";
	qDebug(category) << "unsertSQL - update PC_FRMPVREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_FRMPVUSR = ?, PC_FRMPVIXFLG = ?, PC_FRMPVCAT = ?, PC_FRMPV_LASTUPD = ?, PC_USRNAME = ?, PC_CATEGORY = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_FRMPVREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_FRMPVREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_FRMPVUSR[12]";
	PC_FRMPVUSR.resize(12);
	qDebug(category) << "Malloc - PC_FRMPVIXFLG[2]";
	PC_FRMPVIXFLG.resize(2);
	qDebug(category) << "Malloc - PC_FRMPVCAT[10]";
	PC_FRMPVCAT.resize(10);
	qDebug(category) << "Malloc - PC_FRMPV_LASTUPD[23]";
	PC_FRMPV_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_USRNAME[12]";
	PC_USRNAME.resize(12);
	qDebug(category) << "Malloc - PC_CATEGORY[10]";
	PC_CATEGORY.resize(10);

#pragma endregion Resize Fields PC_FRMPVREC
}
void PC_FRMPVREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_FRMPVREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_FRMPVREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_FRMPVREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_FRMPVREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_FRMPVREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_FRMPVREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_FRMPVREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_FRMPVREC");
				createTable();
			}break;
		}
	}
}

bool PC_FRMPVREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 12 FieldName: PC_FRMPVUSR ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_FRMPVUSR.data(), 12, &cbPC_FRMPVUSR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_FRMPVIXFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_FRMPVIXFLG.data(), 2, &cbPC_FRMPVIXFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 10 FieldName: PC_FRMPVCAT ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_FRMPVCAT.data(), 10, &cbPC_FRMPVCAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 23 FieldName: PC_FRMPV_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_FRMPV_LASTUPD.data(), 23, &cbPC_FRMPV_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 1 Buffer Size: 12 FieldName: PC_USRNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 1, PC_USRNAME.data(), 12, &cbPC_USRNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 1 Buffer Size: 10 FieldName: PC_CATEGORY ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 1, PC_CATEGORY.data(), 10, &cbPC_CATEGORY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_FRMPVREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 12 FieldName: PC_FRMPVUSR ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 12, 0, (SQLPOINTER)PC_FRMPVUSR.constData(), 0, &cbPC_FRMPVUSR);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_FRMPVIXFLG ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_FRMPVIXFLG.constData(), 0, &cbPC_FRMPVIXFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 10 FieldName: PC_FRMPVCAT ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_FRMPVCAT.constData(), 0, &cbPC_FRMPVCAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 23 FieldName: PC_FRMPV_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_FRMPV_LASTUPD.constData(), 0, &cbPC_FRMPV_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 1 Buffer Size: 12 FieldName: PC_USRNAME ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 12, 0, (SQLPOINTER)PC_USRNAME.constData(), 0, &cbPC_USRNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 1 Buffer Size: 10 FieldName: PC_CATEGORY ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_CATEGORY.constData(), 0, &cbPC_CATEGORY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_FRMPVREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_FRMPVREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_FRMPVREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_FRMPVREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PISUBPSET::PC_PISUBPSET(QObject * parent) : QObject(parent) 
,tableName("PC_PISUBPSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PISUBPSET 
PC_PISUBPSET::~PC_PISUBPSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PISUBPSET

// begin method functions
void PC_PISUBPSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PISUBPSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PISUBPSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PISUBPSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PISUBPSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PISUBPSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PISUBPSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PISUBPSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PISUBPSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PISUBPSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PISUBPSET";
	qDebug(category) << "unsertSQL - update PC_PISUBPSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PISUBPSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PISUBPSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PISUBPSET
}
void PC_PISUBPSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PISUBPSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PISUBPSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PISUBPSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PISUBPSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PISUBPSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PISUBPSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PISUBPSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PISUBPSET");
				createTable();
			}break;
		}
	}
}

bool PC_PISUBPSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PISUBPSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PISUBPSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PISUBPSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PISUBPSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PISUBPSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MIDESREC::PC_MIDESREC(QObject * parent) : QObject(parent) 
,tableName("PC_MIDESREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MIDESREC 
PC_MIDESREC::~PC_MIDESREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_MIDESCODE.clear();
	PC_MIDESTEXT.clear();
	PC_MIDES_LASTUPD.clear();
	PC_MINGRED.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MIDESREC

// begin method functions
void PC_MIDESREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MIDESREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MIDESREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MIDESREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MIDESREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MIDESCODE, PC_MIDESTEXT, PC_MIDES_LASTUPD, PC_MINGRED from PC_MIDESREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MIDESREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MIDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MIDESCODE, PC_MIDESTEXT, PC_MIDES_LASTUPD, PC_MINGRED ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MIDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MIDESCODE = ?, PC_MIDESTEXT = ?, PC_MIDES_LASTUPD = ?, PC_MINGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MIDESREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MIDESCODE, PC_MIDESTEXT, PC_MIDES_LASTUPD, PC_MINGRED ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MIDESCODE, PC_MIDESTEXT, PC_MIDES_LASTUPD, PC_MINGRED from PC_MIDESREC";
	qDebug(category) << "unsertSQL - update PC_MIDESREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MIDESCODE = ?, PC_MIDESTEXT = ?, PC_MIDES_LASTUPD = ?, PC_MINGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_MIDESREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MIDESREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_MIDESCODE[10]";
	PC_MIDESCODE.resize(10);
	qDebug(category) << "Malloc - PC_MIDESTEXT[60]";
	PC_MIDESTEXT.resize(60);
	qDebug(category) << "Malloc - PC_MIDES_LASTUPD[23]";
	PC_MIDES_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_MINGRED[18]";
	PC_MINGRED.resize(18);

#pragma endregion Resize Fields PC_MIDESREC
}
void PC_MIDESREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MIDESREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MIDESREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MIDESREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MIDESREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MIDESREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MIDESREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MIDESREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MIDESREC");
				createTable();
			}break;
		}
	}
}

bool PC_MIDESREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_MIDESCODE ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_MIDESCODE.data(), 10, &cbPC_MIDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_MIDESTEXT ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_MIDESTEXT.data(), 60, &cbPC_MIDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_MIDES_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_MIDES_LASTUPD.data(), 23, &cbPC_MIDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 18 FieldName: PC_MINGRED ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_MINGRED.data(), 18, &cbPC_MINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MIDESREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 10 FieldName: PC_MIDESCODE ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 10, 0, (SQLPOINTER)PC_MIDESCODE.constData(), 0, &cbPC_MIDESCODE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 60 FieldName: PC_MIDESTEXT ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 60, 0, (SQLPOINTER)PC_MIDESTEXT.constData(), 0, &cbPC_MIDESTEXT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 23 FieldName: PC_MIDES_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_MIDES_LASTUPD.constData(), 0, &cbPC_MIDES_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 18 FieldName: PC_MINGRED ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_MINGRED.constData(), 0, &cbPC_MINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MIDESREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MIDESREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MIDESREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MIDESREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_PIPIDESSET::PC_PIPIDESSET(QObject * parent) : QObject(parent) 
,tableName("PC_PIPIDESSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_PIPIDESSET 
PC_PIPIDESSET::~PC_PIPIDESSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_PIPIDESSET

// begin method functions
void PC_PIPIDESSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_PIPIDESSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_PIPIDESSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_PIPIDESSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_PIPIDESSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PIPIDESSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_PIPIDESSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_PIPIDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_PIPIDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_PIPIDESSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_PIPIDESSET";
	qDebug(category) << "unsertSQL - update PC_PIPIDESSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_PIPIDESSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_PIPIDESSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_PIPIDESSET
}
void PC_PIPIDESSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_PIPIDESSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_PIPIDESSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_PIPIDESSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_PIPIDESSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_PIPIDESSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_PIPIDESSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_PIPIDESSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_PIPIDESSET");
				createTable();
			}break;
		}
	}
}

bool PC_PIPIDESSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_PIPIDESSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_PIPIDESSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_PIPIDESSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_PIPIDESSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_PIPIDESSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_ASTPREC::PC_ASTPREC(QObject * parent) : QObject(parent) 
,tableName("PC_ASTPREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_ASTPREC 
PC_ASTPREC::~PC_ASTPREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_ASTPTQTY.clear();
	PC_ASTPQPB.clear();
	PC_ASTPUOM.clear();
	PC_ASTP_LASTUPD.clear();
	PC_ADTINGRED.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_ASTPREC

// begin method functions
void PC_ASTPREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_ASTPREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_ASTPREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_ASTPREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_ASTPREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ASTPTQTY, PC_ASTPQPB, PC_ASTPUOM, PC_ASTP_LASTUPD, PC_ADTINGRED from PC_ASTPREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_ASTPREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_ASTPREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ASTPTQTY, PC_ASTPQPB, PC_ASTPUOM, PC_ASTP_LASTUPD, PC_ADTINGRED ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_ASTPREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ASTPTQTY = ?, PC_ASTPQPB = ?, PC_ASTPUOM = ?, PC_ASTP_LASTUPD = ?, PC_ADTINGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_ASTPREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_ASTPTQTY, PC_ASTPQPB, PC_ASTPUOM, PC_ASTP_LASTUPD, PC_ADTINGRED ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_ASTPTQTY, PC_ASTPQPB, PC_ASTPUOM, PC_ASTP_LASTUPD, PC_ADTINGRED from PC_ASTPREC";
	qDebug(category) << "unsertSQL - update PC_ASTPREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_ASTPTQTY = ?, PC_ASTPQPB = ?, PC_ASTPUOM = ?, PC_ASTP_LASTUPD = ?, PC_ADTINGRED = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_ASTPREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_ASTPREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_ASTPTQTY[8]";
	PC_ASTPTQTY.resize(8);
	qDebug(category) << "Malloc - PC_ASTPQPB[8]";
	PC_ASTPQPB.resize(8);
	qDebug(category) << "Malloc - PC_ASTPUOM[2]";
	PC_ASTPUOM.resize(2);
	qDebug(category) << "Malloc - PC_ASTP_LASTUPD[23]";
	PC_ASTP_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_ADTINGRED[18]";
	PC_ADTINGRED.resize(18);

#pragma endregion Resize Fields PC_ASTPREC
}
void PC_ASTPREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_ASTPREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_ASTPREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_ASTPREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_ASTPREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_ASTPREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_ASTPREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_ASTPREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_ASTPREC");
				createTable();
			}break;
		}
	}
}

bool PC_ASTPREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 8 Buffer Size: 8 FieldName: PC_ASTPTQTY ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 8, PC_ASTPTQTY.data(), 8, &cbPC_ASTPTQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 8 Buffer Size: 8 FieldName: PC_ASTPQPB ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 8, PC_ASTPQPB.data(), 8, &cbPC_ASTPQPB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 1 Buffer Size: 2 FieldName: PC_ASTPUOM ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 1, PC_ASTPUOM.data(), 2, &cbPC_ASTPUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 1 Buffer Size: 23 FieldName: PC_ASTP_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 1, PC_ASTP_LASTUPD.data(), 23, &cbPC_ASTP_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 1 Buffer Size: 18 FieldName: PC_ADTINGRED ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 1, PC_ADTINGRED.data(), 18, &cbPC_ADTINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_ASTPREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 8 Buffer Size: 8 FieldName: PC_ASTPTQTY ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_ASTPTQTY.constData(), 0, &cbPC_ASTPTQTY);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 8 Buffer Size: 8 FieldName: PC_ASTPQPB ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_ASTPQPB.constData(), 0, &cbPC_ASTPQPB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 1 Buffer Size: 2 FieldName: PC_ASTPUOM ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_ASTPUOM.constData(), 0, &cbPC_ASTPUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 1 Buffer Size: 23 FieldName: PC_ASTP_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_ASTP_LASTUPD.constData(), 0, &cbPC_ASTP_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 1 Buffer Size: 18 FieldName: PC_ADTINGRED ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_ADTINGRED.constData(), 0, &cbPC_ADTINGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_ASTPREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_ASTPREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_ASTPREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_ASTPREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_MENDREC::PC_MENDREC(QObject * parent) : QObject(parent) 
,tableName("PC_MENDREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_MENDREC 
PC_MENDREC::~PC_MENDREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_MENDPROD.clear();
	PC_MENDTYPE.clear();
	PC_MENDCRFLG.clear();
	PC_MENDQTYQ.clear();
	PC_MENDQTYPCT.clear();
	PC_MENDUOM.clear();
	PC_MENDCSTPCT.clear();
	PC_MENDSEQ.clear();
	PC_MENDFSDOFF.clear();
	PC_MENDVSDOFF.clear();
	PC_MENDMPFLG.clear();
	PC_MEND_LASTUPD.clear();
	PC_MBOWIPACCT.clear();
	PC_PRTNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_MENDREC

// begin method functions
void PC_MENDREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_MENDREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_MENDREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_MENDREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_MENDREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MENDPROD, PC_MENDTYPE, PC_MENDCRFLG, PC_MENDQTYQ, PC_MENDQTYPCT, PC_MENDUOM, PC_MENDCSTPCT, PC_MENDSEQ, PC_MENDFSDOFF, PC_MENDVSDOFF, PC_MENDMPFLG, PC_MEND_LASTUPD, PC_MBOWIPACCT, PC_PRTNO from PC_MENDREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_MENDREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_MENDREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MENDPROD, PC_MENDTYPE, PC_MENDCRFLG, PC_MENDQTYQ, PC_MENDQTYPCT, PC_MENDUOM, PC_MENDCSTPCT, PC_MENDSEQ, PC_MENDFSDOFF, PC_MENDVSDOFF, PC_MENDMPFLG, PC_MEND_LASTUPD, PC_MBOWIPACCT, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_MENDREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MENDPROD = ?, PC_MENDTYPE = ?, PC_MENDCRFLG = ?, PC_MENDQTYQ = ?, PC_MENDQTYPCT = ?, PC_MENDUOM = ?, PC_MENDCSTPCT = ?, PC_MENDSEQ = ?, PC_MENDFSDOFF = ?, PC_MENDVSDOFF = ?, PC_MENDMPFLG = ?, PC_MEND_LASTUPD = ?, PC_MBOWIPACCT = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_MENDREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_MENDPROD, PC_MENDTYPE, PC_MENDCRFLG, PC_MENDQTYQ, PC_MENDQTYPCT, PC_MENDUOM, PC_MENDCSTPCT, PC_MENDSEQ, PC_MENDFSDOFF, PC_MENDVSDOFF, PC_MENDMPFLG, PC_MEND_LASTUPD, PC_MBOWIPACCT, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_MENDPROD, PC_MENDTYPE, PC_MENDCRFLG, PC_MENDQTYQ, PC_MENDQTYPCT, PC_MENDUOM, PC_MENDCSTPCT, PC_MENDSEQ, PC_MENDFSDOFF, PC_MENDVSDOFF, PC_MENDMPFLG, PC_MEND_LASTUPD, PC_MBOWIPACCT, PC_PRTNO from PC_MENDREC";
	qDebug(category) << "unsertSQL - update PC_MENDREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_MENDPROD = ?, PC_MENDTYPE = ?, PC_MENDCRFLG = ?, PC_MENDQTYQ = ?, PC_MENDQTYPCT = ?, PC_MENDUOM = ?, PC_MENDCSTPCT = ?, PC_MENDSEQ = ?, PC_MENDFSDOFF = ?, PC_MENDVSDOFF = ?, PC_MENDMPFLG = ?, PC_MEND_LASTUPD = ?, PC_MBOWIPACCT = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_MENDREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_MENDREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_MENDPROD[18]";
	PC_MENDPROD.resize(18);
	qDebug(category) << "Malloc - PC_MENDTYPE[2]";
	PC_MENDTYPE.resize(2);
	qDebug(category) << "Malloc - PC_MENDCRFLG[2]";
	PC_MENDCRFLG.resize(2);
	qDebug(category) << "Malloc - PC_MENDQTYQ[8]";
	PC_MENDQTYQ.resize(8);
	qDebug(category) << "Malloc - PC_MENDQTYPCT[8]";
	PC_MENDQTYPCT.resize(8);
	qDebug(category) << "Malloc - PC_MENDUOM[2]";
	PC_MENDUOM.resize(2);
	qDebug(category) << "Malloc - PC_MENDCSTPCT[8]";
	PC_MENDCSTPCT.resize(8);
	qDebug(category) << "Malloc - PC_MENDSEQ[2]";
	PC_MENDSEQ.resize(2);
	qDebug(category) << "Malloc - PC_MENDFSDOFF[8]";
	PC_MENDFSDOFF.resize(8);
	qDebug(category) << "Malloc - PC_MENDVSDOFF[8]";
	PC_MENDVSDOFF.resize(8);
	qDebug(category) << "Malloc - PC_MENDMPFLG[2]";
	PC_MENDMPFLG.resize(2);
	qDebug(category) << "Malloc - PC_MEND_LASTUPD[23]";
	PC_MEND_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_MBOWIPACCT[24]";
	PC_MBOWIPACCT.resize(24);
	qDebug(category) << "Malloc - PC_PRTNO[18]";
	PC_PRTNO.resize(18);

#pragma endregion Resize Fields PC_MENDREC
}
void PC_MENDREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_MENDREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_MENDREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_MENDREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_MENDREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_MENDREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_MENDREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_MENDREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_MENDREC");
				createTable();
			}break;
		}
	}
}

bool PC_MENDREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_MENDPROD ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_MENDPROD.data(), 18, &cbPC_MENDPROD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 1 Buffer Size: 2 FieldName: PC_MENDTYPE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 1, PC_MENDTYPE.data(), 2, &cbPC_MENDTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_MENDCRFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, PC_MENDCRFLG.data(), 2, &cbPC_MENDCRFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_MENDQTYQ ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 8, PC_MENDQTYQ.data(), 8, &cbPC_MENDQTYQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_MENDQTYPCT ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 8, PC_MENDQTYPCT.data(), 8, &cbPC_MENDQTYPCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 1 Buffer Size: 2 FieldName: PC_MENDUOM ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 1, PC_MENDUOM.data(), 2, &cbPC_MENDUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_MENDCSTPCT ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 8, PC_MENDCSTPCT.data(), 8, &cbPC_MENDCSTPCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 5 Buffer Size: 2 FieldName: PC_MENDSEQ ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 5, PC_MENDSEQ.data(), 2, &cbPC_MENDSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_MENDFSDOFF ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 8, PC_MENDFSDOFF.data(), 8, &cbPC_MENDFSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_MENDVSDOFF ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 8, PC_MENDVSDOFF.data(), 8, &cbPC_MENDVSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 5 Buffer Size: 2 FieldName: PC_MENDMPFLG ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 5, PC_MENDMPFLG.data(), 2, &cbPC_MENDMPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 1 Buffer Size: 23 FieldName: PC_MEND_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 1, PC_MEND_LASTUPD.data(), 23, &cbPC_MEND_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 1, PC_MBOWIPACCT.data(), 24, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 1, PC_PRTNO.data(), 18, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_MENDREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_MENDPROD ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_MENDPROD.constData(), 0, &cbPC_MENDPROD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 1 Buffer Size: 2 FieldName: PC_MENDTYPE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_MENDTYPE.constData(), 0, &cbPC_MENDTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_MENDCRFLG ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MENDCRFLG.constData(), 0, &cbPC_MENDCRFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_MENDQTYQ ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MENDQTYQ.constData(), 0, &cbPC_MENDQTYQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 8 Buffer Size: 8 FieldName: PC_MENDQTYPCT ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MENDQTYPCT.constData(), 0, &cbPC_MENDQTYPCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 1 Buffer Size: 2 FieldName: PC_MENDUOM ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_MENDUOM.constData(), 0, &cbPC_MENDUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_MENDCSTPCT ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MENDCSTPCT.constData(), 0, &cbPC_MENDCSTPCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 5 Buffer Size: 2 FieldName: PC_MENDSEQ ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MENDSEQ.constData(), 0, &cbPC_MENDSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 8 Buffer Size: 8 FieldName: PC_MENDFSDOFF ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MENDFSDOFF.constData(), 0, &cbPC_MENDFSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 8 Buffer Size: 8 FieldName: PC_MENDVSDOFF ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_MENDVSDOFF.constData(), 0, &cbPC_MENDVSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 5 Buffer Size: 2 FieldName: PC_MENDMPFLG ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_MENDMPFLG.constData(), 0, &cbPC_MENDMPFLG);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 1 Buffer Size: 23 FieldName: PC_MEND_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_MEND_LASTUPD.constData(), 0, &cbPC_MEND_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 1 Buffer Size: 24 FieldName: PC_MBOWIPACCT ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 24, 0, (SQLPOINTER)PC_MBOWIPACCT.constData(), 0, &cbPC_MBOWIPACCT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_PRTNO.constData(), 0, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_MENDREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_MENDREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_MENDREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_MENDREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_TOOHSHSET::PC_TOOHSHSET(QObject * parent) : QObject(parent) 
,tableName("PC_TOOHSHSET")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_TOOHSHSET 
PC_TOOHSHSET::~PC_TOOHSHSET() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	OAREA.clear();
	OPAGE.clear();
	OLINE.clear();
	MAREA.clear();
	MPAGE.clear();
	MLINE.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_TOOHSHSET

// begin method functions
void PC_TOOHSHSET::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_TOOHSHSET::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_TOOHSHSET::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_TOOHSHSET::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_TOOHSHSET

	fetchSql = "select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TOOHSHSET";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_TOOHSHSET' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_TOOHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_TOOHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_TOOHSHSET ( PLANT_CODE, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE ) values ( ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, OAREA, OPAGE, OLINE, MAREA, MPAGE, MLINE from PC_TOOHSHSET";
	qDebug(category) << "unsertSQL - update PC_TOOHSHSET set  PLANT_CODE = ?, NVTIMESTAMP = ?, OAREA = ?, OPAGE = ?, OLINE = ?, MAREA = ?, MPAGE = ?, MLINE = ?  where  OAREA = ? and OPAGE = ? and OLINE = ? ";

#pragma endregion Sql Statements_PC_TOOHSHSET
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_TOOHSHSET
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - OAREA[2]";
	OAREA.resize(2);
	qDebug(category) << "Malloc - OPAGE[4]";
	OPAGE.resize(4);
	qDebug(category) << "Malloc - OLINE[2]";
	OLINE.resize(2);
	qDebug(category) << "Malloc - MAREA[2]";
	MAREA.resize(2);
	qDebug(category) << "Malloc - MPAGE[4]";
	MPAGE.resize(4);
	qDebug(category) << "Malloc - MLINE[2]";
	MLINE.resize(2);

#pragma endregion Resize Fields PC_TOOHSHSET
}
void PC_TOOHSHSET::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_TOOHSHSET::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_TOOHSHSET::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_TOOHSHSET", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_TOOHSHSET::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_TOOHSHSET::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_TOOHSHSET");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_TOOHSHSET");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_TOOHSHSET");
				createTable();
			}break;
		}
	}
}

bool PC_TOOHSHSET::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, OAREA.data(), 2, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, OPAGE.data(), 4, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, OLINE.data(), 2, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 5, MAREA.data(), 2, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 4, MPAGE.data(), 4, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, MLINE.data(), 2, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_TOOHSHSET::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: OAREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OAREA.constData(), 0, &cbOAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: OPAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)OPAGE.constData(), 0, &cbOPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: OLINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)OLINE.constData(), 0, &cbOLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 5 Buffer Size: 2 FieldName: MAREA ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 4 Buffer Size: 4 FieldName: MPAGE ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: MLINE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 6, 0, 0, (SQLPOINTER)MAREA.constData(), 0, &cbMAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 7, 0, 0, (SQLPOINTER)MPAGE.constData(), 0, &cbMPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)MLINE.constData(), 0, &cbMLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_TOOHSHSET is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [6] 00 00 FieldName: MAREA ";
		 qDebug(category) << " Parameters: Ordinal [7] 00 00  FieldName: MPAGE ";
		 qDebug(category) << " Parameters: Ordinal [8] 00 00 FieldName:  MLINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_TOOHSHSET::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_TOOHSHSET::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_TOOHSHSET::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
PC_INGREC::PC_INGREC(QObject * parent) : QObject(parent) 
,tableName("PC_INGREC")
,m_dropOption(DropOption::DropTable) { 
	numRowsFetched = 0;
}

#pragma region ~CTOR PC_INGREC 
PC_INGREC::~PC_INGREC() { 

#pragma region Buffers - Clear 
	DB_ID.clear();
	NVTIMESTAMP.clear();
	AREA.clear();
	PAGE.clear();
	LINE.clear();
	PC_INGRED.clear();
	PC_INGITEM.clear();
	PC_INGSCALE.clear();
	PC_INGQPB.clear();
	PC_INGUOM.clear();
	PC_INGSEQ.clear();
	PC_INGYLD.clear();
	PC_INGEDAT.clear();
	PC_INGIDAT.clear();
	PC_INGTYPE.clear();
	PC_INGFSDOFF.clear();
	PC_INGVSDOFF.clear();
	PC_INGUSERDEF1.clear();
	PC_INGUSERDEF2.clear();
	PC_INGUSERDEF3.clear();
	PC_INGUSERDEF4.clear();
	PC_INGPIYLD.clear();
	PC_ING_LASTUPD.clear();
	PC_FRMNAME.clear();
	PC_PRTNO.clear();
#pragma endregion Buffers - Clear 
}
#pragma endregion Destructor_PC_INGREC

// begin method functions
void PC_INGREC::setAbortFlag() { 
	QLoggingCategory category("classLibQ");
	qCInfo(category) << "isAbort was set to True";
	bIsAbort = true;
}

void PC_INGREC::run() { 
	process(1);
	QLoggingCategory category("classLibQ");
	qDebug(category) << "Entered;";
}

void	PC_INGREC::initOdbcAttributes()
{
	QLoggingCategory category("classLibQ");
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
	m_OdbcAttributesList = m_OdbcAttributes.split(","); 
	foreach(QString m, m_OdbcAttributesList)
	{
		QStringList keyValue = m.split("=");
		nOdbcAttributesClass * oM = new nOdbcAttributesClass(this);
		if (oM->loadToOdbc(keyValue.value(0), keyValue.value(1)))
		{
			m_OdbcAttributes_Map.insert(oM->odbcKey, oM);
		}
	}
}
void	PC_INGREC::initialize()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	this->setProfileName(profileName);
	qDebug(category) << "Processing - PRCDB100"; 
//SQL Statements
//--------------------------------------------------

#pragma region Sql Statements_PC_INGREC

	fetchSql = "select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_INGRED, PC_INGITEM, PC_INGSCALE, PC_INGQPB, PC_INGUOM, PC_INGSEQ, PC_INGYLD, PC_INGEDAT, PC_INGIDAT, PC_INGTYPE, PC_INGFSDOFF, PC_INGVSDOFF, PC_INGUSERDEF1, PC_INGUSERDEF2, PC_INGUSERDEF3, PC_INGUSERDEF4, PC_INGPIYLD, PC_ING_LASTUPD, PC_FRMNAME, PC_PRTNO from PC_INGREC";
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			fetchSql.append(" p1, nv_transfers p2 WHERE  p2.table_name = 'PC_INGREC' AND p1.nvtimestamp > p2.last_completed");
		}
	insertSql = "insert into PC_INGREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_INGRED, PC_INGITEM, PC_INGSCALE, PC_INGQPB, PC_INGUOM, PC_INGSEQ, PC_INGYLD, PC_INGEDAT, PC_INGIDAT, PC_INGTYPE, PC_INGFSDOFF, PC_INGVSDOFF, PC_INGUSERDEF1, PC_INGUSERDEF2, PC_INGUSERDEF3, PC_INGUSERDEF4, PC_INGPIYLD, PC_ING_LASTUPD, PC_FRMNAME, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	updateSql = "update PC_INGREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_INGRED = ?, PC_INGITEM = ?, PC_INGSCALE = ?, PC_INGQPB = ?, PC_INGUOM = ?, PC_INGSEQ = ?, PC_INGYLD = ?, PC_INGEDAT = ?, PC_INGIDAT = ?, PC_INGTYPE = ?, PC_INGFSDOFF = ?, PC_INGVSDOFF = ?, PC_INGUSERDEF1 = ?, PC_INGUSERDEF2 = ?, PC_INGUSERDEF3 = ?, PC_INGUSERDEF4 = ?, PC_INGPIYLD = ?, PC_ING_LASTUPD = ?, PC_FRMNAME = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

	qDebug(category) << "insertSQL - insert into PC_INGREC ( PLANT_CODE, NVTIMESTAMP, AREA, PAGE, LINE, PC_INGRED, PC_INGITEM, PC_INGSCALE, PC_INGQPB, PC_INGUOM, PC_INGSEQ, PC_INGYLD, PC_INGEDAT, PC_INGIDAT, PC_INGTYPE, PC_INGFSDOFF, PC_INGVSDOFF, PC_INGUSERDEF1, PC_INGUSERDEF2, PC_INGUSERDEF3, PC_INGUSERDEF4, PC_INGPIYLD, PC_ING_LASTUPD, PC_FRMNAME, PC_PRTNO ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	qDebug(category) << "fetchSQL - select  DB_ID, NVTIMESTAMP, AREA, PAGE, LINE, PC_INGRED, PC_INGITEM, PC_INGSCALE, PC_INGQPB, PC_INGUOM, PC_INGSEQ, PC_INGYLD, PC_INGEDAT, PC_INGIDAT, PC_INGTYPE, PC_INGFSDOFF, PC_INGVSDOFF, PC_INGUSERDEF1, PC_INGUSERDEF2, PC_INGUSERDEF3, PC_INGUSERDEF4, PC_INGPIYLD, PC_ING_LASTUPD, PC_FRMNAME, PC_PRTNO from PC_INGREC";
	qDebug(category) << "unsertSQL - update PC_INGREC set  PLANT_CODE = ?, NVTIMESTAMP = ?, AREA = ?, PAGE = ?, LINE = ?, PC_INGRED = ?, PC_INGITEM = ?, PC_INGSCALE = ?, PC_INGQPB = ?, PC_INGUOM = ?, PC_INGSEQ = ?, PC_INGYLD = ?, PC_INGEDAT = ?, PC_INGIDAT = ?, PC_INGTYPE = ?, PC_INGFSDOFF = ?, PC_INGVSDOFF = ?, PC_INGUSERDEF1 = ?, PC_INGUSERDEF2 = ?, PC_INGUSERDEF3 = ?, PC_INGUSERDEF4 = ?, PC_INGPIYLD = ?, PC_ING_LASTUPD = ?, PC_FRMNAME = ?, PC_PRTNO = ?  where  AREA = ? and PAGE = ? and LINE = ? ";

#pragma endregion Sql Statements_PC_INGREC
	SQLHANDLE		insert_hStmt = SQL_NULL_HANDLE;
	SQLHANDLE		fetch_hStmt = SQL_NULL_HANDLE; 
	SQLHANDLE		update_hStmt = SQL_NULL_HANDLE; 
 
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_source, &fetch_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error  hDbc_Source SQLCode : %1 is %2").arg(QString::number( (long)hDbc_source)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &insert_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source -SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
	r = ::SQLAllocHandle(SQL_HANDLE_STMT, hDbc_target, &update_hStmt);
	if (r != SQL_SUCCESS) {
		 qCCritical(category) << QString("Error hDbc_Source +SQLCode: %1 is %2").arg(QString::number( (long)hDbc_target)).arg(QString::number(r));
		return; 
	}
 
	hStmt_Fetch = fetch_hStmt;
	hStmt_Insert = insert_hStmt;
	hStmt_Update = update_hStmt;
 
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_USE_BOOKMARKS, (SQLPOINTER)SQL_UB_OFF, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_BIND_TYPE, (SQLPOINTER)SQL_BIND_BY_COLUMN, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROW_ARRAY_SIZE, (SQLPOINTER)1, 0);
	SQLSetStmtAttr(hStmt_Fetch, SQL_ATTR_ROWS_FETCHED_PTR, &numRowsFetched, 0);

// Fields used by this class 
// ---------------------------------------------------

#pragma region Resize Fields PC_INGREC
	qDebug(category) << "Malloc - DB_ID[2]";
	DB_ID.resize(2);
	qDebug(category) << "Malloc - NVTIMESTAMP[23]";
	NVTIMESTAMP.resize(23);
	qDebug(category) << "Malloc - AREA[2]";
	AREA.resize(2);
	qDebug(category) << "Malloc - PAGE[4]";
	PAGE.resize(4);
	qDebug(category) << "Malloc - LINE[2]";
	LINE.resize(2);
	qDebug(category) << "Malloc - PC_INGRED[18]";
	PC_INGRED.resize(18);
	qDebug(category) << "Malloc - PC_INGITEM[2]";
	PC_INGITEM.resize(2);
	qDebug(category) << "Malloc - PC_INGSCALE[2]";
	PC_INGSCALE.resize(2);
	qDebug(category) << "Malloc - PC_INGQPB[8]";
	PC_INGQPB.resize(8);
	qDebug(category) << "Malloc - PC_INGUOM[2]";
	PC_INGUOM.resize(2);
	qDebug(category) << "Malloc - PC_INGSEQ[2]";
	PC_INGSEQ.resize(2);
	qDebug(category) << "Malloc - PC_INGYLD[8]";
	PC_INGYLD.resize(8);
	qDebug(category) << "Malloc - PC_INGEDAT[4]";
	PC_INGEDAT.resize(4);
	qDebug(category) << "Malloc - PC_INGIDAT[4]";
	PC_INGIDAT.resize(4);
	qDebug(category) << "Malloc - PC_INGTYPE[2]";
	PC_INGTYPE.resize(2);
	qDebug(category) << "Malloc - PC_INGFSDOFF[8]";
	PC_INGFSDOFF.resize(8);
	qDebug(category) << "Malloc - PC_INGVSDOFF[8]";
	PC_INGVSDOFF.resize(8);
	qDebug(category) << "Malloc - PC_INGUSERDEF1[30]";
	PC_INGUSERDEF1.resize(30);
	qDebug(category) << "Malloc - PC_INGUSERDEF2[30]";
	PC_INGUSERDEF2.resize(30);
	qDebug(category) << "Malloc - PC_INGUSERDEF3[30]";
	PC_INGUSERDEF3.resize(30);
	qDebug(category) << "Malloc - PC_INGUSERDEF4[30]";
	PC_INGUSERDEF4.resize(30);
	qDebug(category) << "Malloc - PC_INGPIYLD[8]";
	PC_INGPIYLD.resize(8);
	qDebug(category) << "Malloc - PC_ING_LASTUPD[23]";
	PC_ING_LASTUPD.resize(23);
	qDebug(category) << "Malloc - PC_FRMNAME[20]";
	PC_FRMNAME.resize(20);
	qDebug(category) << "Malloc - PC_PRTNO[18]";
	PC_PRTNO.resize(18);

#pragma endregion Resize Fields PC_INGREC
}
void PC_INGREC::close()
{
	QLoggingCategory category("classLibQ");
	if (m_bIsOpen)
	{
	qDebug(category) << "database is Open";
		SQLHANDLE source_hStmt = hStmt_Fetch;
		SQLHANDLE insert_hStmt = hStmt_Insert;
		SQLHANDLE hDb_S = this->hDbc_source;
		SQLHANDLE hDb_T = hDbc_target;
		SQLHANDLE hEnvS = hEnv_Source;
		SQLHANDLE hEnvT = hEnv_Target;
		RETCODE r;

		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Insert);
		r = ::SQLFreeHandle(SQL_HANDLE_STMT, hStmt_Update);
		if (hDbc_source != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_S);
		if (hDbc_target != SQL_NULL_HANDLE) 		r = ::SQLDisconnect(hDb_T);

		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_S);
		r = ::SQLFreeHandle(SQL_HANDLE_DBC, hDb_T);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvS);
		r = ::SQLFreeHandle(SQL_HANDLE_ENV, hEnvT);
	}

	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hEnv_Source = SQL_NULL_HANDLE;
	hEnv_Target = SQL_NULL_HANDLE;
	hStmt_Fetch = SQL_NULL_HANDLE;
	hStmt_Insert = SQL_NULL_HANDLE;
	hStmt_Update = SQL_NULL_HANDLE;
}

void PC_INGREC::open(const QString sourceDSN, const QString targetDSN)
{
	QLoggingCategory category("classLibQ");
	m_lpszTargetDSN = targetDSN;
	m_lpszSourceDSN = sourceDSN;
	qDebug(category) << QString("Source - %1[%2]").arg(sourceDSN);
	qDebug(category) << QString("Target - %1[%2]").arg(targetDSN);
}

void PC_INGREC::createTable()
{
	QLoggingCategory category("classLibQ");
	{
		QScopedPointer<nvTableOracleRdb> tbl(new nvTableOracleRdb(nullptr));
		tbl->initialize("PC_INGREC", this->m_lpszSourceDSN);
		QString newTbl = tbl->getCreateTableSQL();
		QScopedPointer<vtlExecute> vExec(new vtlExecute(nullptr));
		{
			vExec->initialize(m_lpszTargetDSN);
			vExec->setOdbcAttributes(m_OdbcAttributes);
			vExec->executeDirect(newTbl);
		}
	 qDebug(category) << QString("End Create Table %1 ").arg(tableName); 
	}
}

bool PC_INGREC::prepare()
{
	RETCODE r;
	QString check;
	QLoggingCategory category("classLibQ");
	 qDebug(category) << fetchSql;
	 qDebug(category) << insertSql;
#ifdef UNICODE
	r = SQLPrepare(hStmt_Insert,toSQLTCHAR(insertSql).data(),(SQLINTEGER)insertSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(insertSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Update,toSQLTCHAR(updateSql).data(),(SQLINTEGER)updateSql.length()); 
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
		 qCCritical(category) << QString("Prepare Statement-Update : %1 is %2").arg(updateSql).arg(check);
		return false; 
	}
	r = SQLPrepare(hStmt_Fetch,toSQLTCHAR(fetchSql).data(),(SQLINTEGER)fetchSql.length());
	if (r != SQL_SUCCESS) {
		check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
		 qCCritical(category) << QString("Prepare Statement-Insert : %1 is %2").arg(fetchSql).arg(check);
		return false; 
	}
#else
	QByteArray queryI8 = insertSql.toUtf8();
	r = SQLPrepare(insert_hStmt,SQLCHAR*)queryI8.data(),(SQLINTEGER)queryI8.length());
	QByteArray queryU8 = fetchSql.toUtf8();
	r = SQLPrepare(hStmt_Fetch,(SQLCHAR*)queryU8.data(),(SQLINTEGER)queryU8.length());
#endif
	return true;

}

void PC_INGREC::prepareTargetTable()
{
	QLoggingCategory category("classLibQ");
	if (this->m_ReplicationOption == ReplicationOption::BulkCopy)
	{
		QScopedPointer<vtlExecute> execSql(new vtlExecute(nullptr));
		DropOption option = this->m_dropOption;
		switch (option)
		{
			case DropOption::DeleteFromTable:
			{
				QLoggingCategory category("classLibQ");
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("delete from PC_INGREC");
			}break;
			case DropOption::TruncateTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("truncate table PC_INGREC");
			}break;
			case DropOption::DropTable:
			{
				execSql->initialize(this->m_lpszTargetDSN);
				execSql->setOdbcAttributes(this->m_OdbcAttributes);
				execSql->executeDirect("drop table PC_INGREC");
				createTable();
			}break;
		}
	}
}

bool PC_INGREC::bindColumn()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
		 qDebug(category) << " Bindings: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = ::SQLBindCol(hStmt_Fetch, 1, 5, DB_ID.data(), 2, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = ::SQLBindCol(hStmt_Fetch, 2, 93, NVTIMESTAMP.data(), 23, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = ::SQLBindCol(hStmt_Fetch, 3, 5, AREA.data(), 2, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = ::SQLBindCol(hStmt_Fetch, 4, 4, PAGE.data(), 4, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = ::SQLBindCol(hStmt_Fetch, 5, 5, LINE.data(), 2, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_INGRED ";
		r = ::SQLBindCol(hStmt_Fetch, 6, 1, PC_INGRED.data(), 18, &cbPC_INGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_INGITEM ";
		r = ::SQLBindCol(hStmt_Fetch, 7, 5, PC_INGITEM.data(), 2, &cbPC_INGITEM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_INGSCALE ";
		r = ::SQLBindCol(hStmt_Fetch, 8, 5, PC_INGSCALE.data(), 2, &cbPC_INGSCALE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_INGQPB ";
		r = ::SQLBindCol(hStmt_Fetch, 9, 8, PC_INGQPB.data(), 8, &cbPC_INGQPB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [10] Type: 1 Buffer Size: 2 FieldName: PC_INGUOM ";
		r = ::SQLBindCol(hStmt_Fetch, 10, 1, PC_INGUOM.data(), 2, &cbPC_INGUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_INGSEQ ";
		r = ::SQLBindCol(hStmt_Fetch, 11, 5, PC_INGSEQ.data(), 2, &cbPC_INGSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_INGYLD ";
		r = ::SQLBindCol(hStmt_Fetch, 12, 8, PC_INGYLD.data(), 8, &cbPC_INGYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_INGEDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 13, 4, PC_INGEDAT.data(), 4, &cbPC_INGEDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [14] Type: 4 Buffer Size: 4 FieldName: PC_INGIDAT ";
		r = ::SQLBindCol(hStmt_Fetch, 14, 4, PC_INGIDAT.data(), 4, &cbPC_INGIDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [15] Type: 1 Buffer Size: 2 FieldName: PC_INGTYPE ";
		r = ::SQLBindCol(hStmt_Fetch, 15, 1, PC_INGTYPE.data(), 2, &cbPC_INGTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_INGFSDOFF ";
		r = ::SQLBindCol(hStmt_Fetch, 16, 8, PC_INGFSDOFF.data(), 8, &cbPC_INGFSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_INGVSDOFF ";
		r = ::SQLBindCol(hStmt_Fetch, 17, 8, PC_INGVSDOFF.data(), 8, &cbPC_INGVSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [18] Type: 1 Buffer Size: 30 FieldName: PC_INGUSERDEF1 ";
		r = ::SQLBindCol(hStmt_Fetch, 18, 1, PC_INGUSERDEF1.data(), 30, &cbPC_INGUSERDEF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [19] Type: 1 Buffer Size: 30 FieldName: PC_INGUSERDEF2 ";
		r = ::SQLBindCol(hStmt_Fetch, 19, 1, PC_INGUSERDEF2.data(), 30, &cbPC_INGUSERDEF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [20] Type: 1 Buffer Size: 30 FieldName: PC_INGUSERDEF3 ";
		r = ::SQLBindCol(hStmt_Fetch, 20, 1, PC_INGUSERDEF3.data(), 30, &cbPC_INGUSERDEF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [21] Type: 1 Buffer Size: 30 FieldName: PC_INGUSERDEF4 ";
		r = ::SQLBindCol(hStmt_Fetch, 21, 1, PC_INGUSERDEF4.data(), 30, &cbPC_INGUSERDEF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_INGPIYLD ";
		r = ::SQLBindCol(hStmt_Fetch, 22, 8, PC_INGPIYLD.data(), 8, &cbPC_INGPIYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [23] Type: 1 Buffer Size: 23 FieldName: PC_ING_LASTUPD ";
		r = ::SQLBindCol(hStmt_Fetch, 23, 1, PC_ING_LASTUPD.data(), 23, &cbPC_ING_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [24] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = ::SQLBindCol(hStmt_Fetch, 24, 1, PC_FRMNAME.data(), 20, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Bindings: Ordinal [25] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = ::SQLBindCol(hStmt_Fetch, 25, 1, PC_PRTNO.data(), 18, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	return isValid;
}

bool PC_INGREC::bindParameter()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	bool isValid=true;
	{
		 qDebug(category) << " Parameters: Ordinal [1] Type: 5 Buffer Size: 2 FieldName: DB_ID ";
		r = SQLBindParameter(hStmt_Insert, 1, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)DB_ID.constData(), 0, &cbDB_ID);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [2] Type: 93 Buffer Size: 23 FieldName: NVTIMESTAMP ";
		r = SQLBindParameter(hStmt_Insert, 2, SQL_PARAM_INPUT, SQL_C_DEFAULT, 93, 23, 0, (SQLPOINTER)NVTIMESTAMP.constData(), 0, &cbNVTIMESTAMP);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [3] Type: 5 Buffer Size: 2 FieldName: AREA ";
		r = SQLBindParameter(hStmt_Insert, 3, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [4] Type: 4 Buffer Size: 4 FieldName: PAGE ";
		r = SQLBindParameter(hStmt_Insert, 4, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [5] Type: 5 Buffer Size: 2 FieldName: LINE ";
		r = SQLBindParameter(hStmt_Insert, 5, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [6] Type: 1 Buffer Size: 18 FieldName: PC_INGRED ";
		r = SQLBindParameter(hStmt_Insert, 6, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_INGRED.constData(), 0, &cbPC_INGRED);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [7] Type: 5 Buffer Size: 2 FieldName: PC_INGITEM ";
		r = SQLBindParameter(hStmt_Insert, 7, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_INGITEM.constData(), 0, &cbPC_INGITEM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [8] Type: 5 Buffer Size: 2 FieldName: PC_INGSCALE ";
		r = SQLBindParameter(hStmt_Insert, 8, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_INGSCALE.constData(), 0, &cbPC_INGSCALE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [9] Type: 8 Buffer Size: 8 FieldName: PC_INGQPB ";
		r = SQLBindParameter(hStmt_Insert, 9, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_INGQPB.constData(), 0, &cbPC_INGQPB);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [10] Type: 1 Buffer Size: 2 FieldName: PC_INGUOM ";
		r = SQLBindParameter(hStmt_Insert, 10, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_INGUOM.constData(), 0, &cbPC_INGUOM);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [11] Type: 5 Buffer Size: 2 FieldName: PC_INGSEQ ";
		r = SQLBindParameter(hStmt_Insert, 11, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)PC_INGSEQ.constData(), 0, &cbPC_INGSEQ);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [12] Type: 8 Buffer Size: 8 FieldName: PC_INGYLD ";
		r = SQLBindParameter(hStmt_Insert, 12, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_INGYLD.constData(), 0, &cbPC_INGYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [13] Type: 4 Buffer Size: 4 FieldName: PC_INGEDAT ";
		r = SQLBindParameter(hStmt_Insert, 13, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_INGEDAT.constData(), 0, &cbPC_INGEDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [14] Type: 4 Buffer Size: 4 FieldName: PC_INGIDAT ";
		r = SQLBindParameter(hStmt_Insert, 14, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PC_INGIDAT.constData(), 0, &cbPC_INGIDAT);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [15] Type: 1 Buffer Size: 2 FieldName: PC_INGTYPE ";
		r = SQLBindParameter(hStmt_Insert, 15, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 2, 0, (SQLPOINTER)PC_INGTYPE.constData(), 0, &cbPC_INGTYPE);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [16] Type: 8 Buffer Size: 8 FieldName: PC_INGFSDOFF ";
		r = SQLBindParameter(hStmt_Insert, 16, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_INGFSDOFF.constData(), 0, &cbPC_INGFSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [17] Type: 8 Buffer Size: 8 FieldName: PC_INGVSDOFF ";
		r = SQLBindParameter(hStmt_Insert, 17, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_INGVSDOFF.constData(), 0, &cbPC_INGVSDOFF);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [18] Type: 1 Buffer Size: 30 FieldName: PC_INGUSERDEF1 ";
		r = SQLBindParameter(hStmt_Insert, 18, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_INGUSERDEF1.constData(), 0, &cbPC_INGUSERDEF1);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [19] Type: 1 Buffer Size: 30 FieldName: PC_INGUSERDEF2 ";
		r = SQLBindParameter(hStmt_Insert, 19, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_INGUSERDEF2.constData(), 0, &cbPC_INGUSERDEF2);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [20] Type: 1 Buffer Size: 30 FieldName: PC_INGUSERDEF3 ";
		r = SQLBindParameter(hStmt_Insert, 20, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_INGUSERDEF3.constData(), 0, &cbPC_INGUSERDEF3);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [21] Type: 1 Buffer Size: 30 FieldName: PC_INGUSERDEF4 ";
		r = SQLBindParameter(hStmt_Insert, 21, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 30, 0, (SQLPOINTER)PC_INGUSERDEF4.constData(), 0, &cbPC_INGUSERDEF4);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [22] Type: 8 Buffer Size: 8 FieldName: PC_INGPIYLD ";
		r = SQLBindParameter(hStmt_Insert, 22, SQL_PARAM_INPUT, SQL_C_DEFAULT, 8, 0, 0, (SQLPOINTER)PC_INGPIYLD.constData(), 0, &cbPC_INGPIYLD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [23] Type: 1 Buffer Size: 23 FieldName: PC_ING_LASTUPD ";
		r = SQLBindParameter(hStmt_Insert, 23, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 23, 0, (SQLPOINTER)PC_ING_LASTUPD.constData(), 0, &cbPC_ING_LASTUPD);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [24] Type: 1 Buffer Size: 20 FieldName: PC_FRMNAME ";
		r = SQLBindParameter(hStmt_Insert, 24, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 20, 0, (SQLPOINTER)PC_FRMNAME.constData(), 0, &cbPC_FRMNAME);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
		 qDebug(category) << " Parameters: Ordinal [25] Type: 1 Buffer Size: 18 FieldName: PC_PRTNO ";
		r = SQLBindParameter(hStmt_Insert, 25, SQL_PARAM_INPUT, SQL_C_DEFAULT, 1, 18, 0, (SQLPOINTER)PC_PRTNO.constData(), 0, &cbPC_PRTNO);
		if (r == SQL_SUCCESS) { isValid=true; }
		else { return false;}
	}
	if (m_ReplicationOption == ReplicationOption::NetChange)
	{
		r = SQLBindParameter(hStmt_Update, 26, SQL_PARAM_INPUT, SQL_C_DEFAULT, 3, 0, 0, (SQLPOINTER)AREA.constData(), 0, &cbAREA);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 27, SQL_PARAM_INPUT, SQL_C_DEFAULT, 4, 0, 0, (SQLPOINTER)PAGE.constData(), 0, &cbPAGE);
		if (r == SQL_SUCCESS) { isValid=true; }
		r = SQLBindParameter(hStmt_Update, 28, SQL_PARAM_INPUT, SQL_C_DEFAULT, 5, 0, 0, (SQLPOINTER)LINE.constData(), 0, &cbLINE);
		if (r == SQL_SUCCESS) { isValid=true; }
	// PC_INGREC is a well formed table for eNVy Replication 
		 qDebug(category) << " Parameters: Ordinal [3] 00 00 FieldName: AREA ";
		 qDebug(category) << " Parameters: Ordinal [4] 00 00  FieldName: PAGE ";
		 qDebug(category) << " Parameters: Ordinal [5] 00 00 FieldName:  LINE ";
	} // 	if (m_ReplicationOption == ReplicationOption::NetChange)
	return isValid;
}

bool PC_INGREC::process(int rowSize)
{
	QLoggingCategory category("classLibQ");
	initOdbcAttributes();
	connect(Source);
	connect(Target);
	initialize();
	prepareTargetTable();
	prepare();
	bindColumn();
	bindParameter();
	copyTable();
	close();
	return false;
}

void PC_INGREC::copyTable()
{
	QLoggingCategory category("classLibQ");
	RETCODE r;
	QString check;
	r = SQLExecute(hStmt_Fetch);
	if (bIsAbort) {
		emit aborted(tableName, rowsFetched, rowsInserted, rowsUpdated);
		return;
	}
	while((r = SQLFetch(hStmt_Fetch)) != SQL_NO_DATA) {
		if (r != SQL_SUCCESS) {
			check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Fetch);
			qCCritical(category) << QString("[%3.%4] - SqlFetch - Error : %1 is %2").arg(fetchSql).arg(check).arg(profileName).arg(tableName);
			return;
		} 
		rowsFetched++;
		if (m_ReplicationOption == ReplicationOption::BulkCopy)
		{
			r = SQLExecute(hStmt_Insert);
			if (r == SQL_ERROR) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
				qCCritical(category) << QString("[%3.%4] - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
				return;
			}
			rowsInserted++;
			if ((rowsFetched % updateInterval) == 0) {
				qDebug(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
				emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
			}
		}
		if (m_ReplicationOption == ReplicationOption::NetChange)
		{
			r = SQLExecute(hStmt_Update);
			if (r != SQL_SUCCESS) {
				check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Update);
				qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Try Insert: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
				r = SQLExecute(hStmt_Insert);
				if (r != SQL_SUCCESS) {
					check = qWarnODBCHandle(SQL_HANDLE_STMT, hStmt_Insert);
					qCritical(category) << QString("[%3.%4] NetChange - SqlExecute:Insert - Error : %1 is %2").arg(insertSql).arg(check).arg(profileName).arg(tableName);
					qDebug(category)  << QString("[%3.%4] NetChange - SqlExecute:Update - Error - Exit Function: %1 is %2").arg(updateSql).arg(check).arg(profileName).arg(tableName);
					return;
				}
				else 	rowsInserted++;
				}
			else	rowsUpdated++;
			} // end While
		emit updateStatusFetched(profileName, tableName, rowsFetched,rowsInserted,rowsUpdated);
	}
	qInfo(category) << QString("[%1.%2]	Insertion: %3	Updates : %4	Fetched : %5").arg(profileName).arg(tableName).arg(rowsInserted).arg(rowsUpdated).arg(rowsFetched);
}

void PC_INGREC::connect(connectionHandle connectionSource)
{

	QLoggingCategory category("classLibQ");
	RETCODE r;

	bool isValid = false;
	HWND	hWnd = nullptr;
	hWnd = ::GetDesktopWindow(); 
	SQLSMALLINT nResult = 0;

	SQLSMALLINT cb;
	UWORD wConnectOption = SQL_DRIVER_COMPLETE; //SQL_DRIVER_NOPROMPT;
	QVarLengthArray<SQLTCHAR> connOut(1024);
	memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));

	switch (connectionSource)
	{
		case Source:
			{// environment
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Source = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_source = hDbc;
				if (isValid)
				{
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszSourceDSN).data(),
#else
						(SQLCHAR*)dsnSource.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszSourceDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
					int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
					{
						QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
						qCritical(category) <<  check;
						m_bIsOpen = false;
					}
					m_bIsOpen = true;
				}
			} break;
		case Target:
			{
				SQLHANDLE hEnv = SQL_NULL_HANDLE;
				SQLHANDLE hDbc = SQL_NULL_HANDLE;
				r = ::SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, &hEnv);
				if (r == SQL_SUCCESS) isValid = true;

				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
					if (k->attributeType == enumAttributeType::hEnv)
					{
						r = ::SQLSetEnvAttr(hEnv, (SQLINTEGER) k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
						if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hEnv_Target = hEnv;

				r = SQLAllocHandle(SQL_HANDLE_DBC, hEnv, &hDbc);
				if (r == SQL_SUCCESS) isValid = true;
				foreach(nOdbcAttributesClass * k, this->m_OdbcAttributes_Map)
				{
				if (k->attributeType == enumAttributeType::hDbc)
					{
					r = ::SQLSetConnectAttr(hDbc, k->odbcKey, (SQLPOINTER)k->odbcValue, 0);
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_DRIVER) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_ONE_PER_HENV) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (k->odbcKey == SQL_ATTR_CONNECTION_POOLING && k->odbcValue == SQL_CP_DRIVER_AWARE) wConnectOption = SQL_DRIVER_NOPROMPT;
					if (r == SQL_SUCCESS) isValid = true;
					}
				}
				hDbc_target = hDbc;
				if (isValid) {
					r = ::SQLDriverConnect(
						hDbc,
						hWnd,
#ifdef UNICODE
						toSQLTCHAR(m_lpszTargetDSN).data(),
#else
						(SQLCHAR*)m_lpszTargetDSN.toUtf8().data(),
#endif
						(SQLSMALLINT)m_lpszTargetDSN.length(),
						connOut.data(),
						1024,
						&cb, 
						wConnectOption); 
						int colSize = cb / sizeof(SQLTCHAR);
					if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
						{
							QString check = qWarnODBCHandle(SQL_HANDLE_DBC, hDbc);
							qCritical(category) <<  check;
							m_bIsOpen = false;
						}
							m_bIsOpen = true;
					}
			} break;
			default: break;
	}
}
